{"version":3,"sources":["utils/helper.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/dfs.js","algorithms/path_finding/bfs.js","algorithms/path_finding/aStar.js","algorithms/path_finding/bestFirst.js","algorithms/terrain/recursiveDivision.js","algorithms/terrain/perlin.js","algorithms/terrain/random.js","algorithms/terrain/randomWeighted.js","utils/constants.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","components/Visualize.js","images/down_arrow.svg","images/weight.svg","images/weight_unfilled.svg","images/optimal.svg","images/optimal_unfilled.svg","components/CustomDropdown.js","components/ShowInfo.js","components/ChooseAlgorithm.js","components/GenerateTerrain.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","images/close.svg","components/InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","nodeTypeEnum","wall","push","createPath","startCord","targetCord","prevNodes","cord","path","findMinPriorityNode","minPQ","minPriority","Math","min","Object","values","key","isAlgoUnweighted","algo","unweightedPathAlgos","includes","isTerrainAlgoUnweighted","unweightedTerrainAlgos","sleep","ms","Promise","resolve","setTimeout","getRandomNum","num1","num2","max","floor","random","dijkstras","timeout","a","visited","totalCosts","x","y","Infinity","keys","length","minKey","nodeStateFunc","prevState","slice","neighbours","neighbour","currPath","nodeWeight","visiting","dfs","stack","currCord","none","pop","shift","unshift","unvisitedNeighbourFound","splice","bfs","queue","aStar","openSet","G","H","F","currNode","currGScore","h","currNodeCord","currRow","currCol","targetRow","targetCol","abs","bestFirst","console","log","recursiveDivision","setGridState","setWall","divide","startRow","endRow","startCol","endCol","orientation","width","height","sCol","sRow","skip","randRow","i","randCol","state","start","target","Grad","z","this","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","v","F2","sqrt","G2","simplex2","xin","yin","i1","j1","s","j","t","x0","y0","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","perlinNoise","gridMap","value","weighted100","weighted80","weighted60","weighted40","weighted20","newState","randomWeighted","DIJKSTRAS","ASTAR","BFS","DFS","BEST_FIRST","algoFunctions","freeze","algoSleepTimes","allPathAlgos","optimalPathAlgos","RECURSIVE_DIVISION","PERLIN_NOISE","RANDOM_UNWEIGHTED","RANDOM_WEIGHTED","allTerrainAlgos","terrainFunctions","terrainAlgoSleepTimes","pathfindingAlgoInfo","nodeColorClass","nodeColors","obstacleTypes","obsEnum","Node","nodeId","size","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","startingState","useState","nodeState","setNodeState","useEffect","nodeColor","colorA","colorB","amount","match","map","c","rA","gA","bA","rB","gB","bB","round","toString","padStart","getNodeColor","nodeStyle","backgroundColor","border","cursor","style","className","remObstacle","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","Grid","React","memo","padding","nodeSize","nodes","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","CustomDropdown","setSelection","items","disabled","dropDownWidth","isAlgoSelector","isObstacleSelector","isTerrainSelector","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","dropdownItems","id","src","weightUnfilled","title","alt","weight","optimal","optimalUnfilled","downArrow","display","ShowInfo","toggleInfoBox","ChooseAlgorithm","setSelectedAlgo","GenerateTerrain","selectedTerrainAlgo","resetGrid","ChooseTerrain","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","weightedObsDisabled","obstacleName","Header","paddingBottom","InfoBox","infoBoxOpen","dragging","setDragging","boxCord","setBoxCord","disableDragging","e","left","top","onMouseMove","movementX","movementY","closeIcon","description","optimality","App","setInfoBoxOpen","setRows","setCols","setWeightedObsDisabled","initializeGrid","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","currRows","currCols","currState","updateGrid","prev","algoName","unweightedAlgo","clearWeightedObstacles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a6606f9.chunk.js","sourcesContent":["import { nodeTypeEnum, unweightedPathAlgos, optimalPathAlgos, nodeColors, unweightedTerrainAlgos } from './constants.js'\n\nexport const getNodeColor = (nodeState) => {\n    if ((nodeState[0] === nodeTypeEnum.visited || nodeState[0] === nodeTypeEnum.visiting) && nodeState[1] > nodeTypeEnum.wall) {\n        let colorA = nodeColors[nodeState[0]];\n        const colorB = nodeColors[nodeState[1]];\n        let amount = 0.78;\n\n        if (nodeState[0] === nodeTypeEnum.visiting) {\n            colorA = nodeColors[nodeTypeEnum.visited];\n        }\n        // we need to mix colors\n        const [rA, gA, bA] = colorA.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n        const [rB, gB, bB] = colorB.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n        const r = Math.round(rA + (rB - rA) * amount).toString(16).padStart(2, '0');\n        const g = Math.round(gA + (gB - gA) * amount).toString(16).padStart(2, '0');\n        const b = Math.round(bA + (bB - bA) * amount).toString(16).padStart(2, '0');\n        return '#' + r + g + b;\n    }\n\n    return nodeColors[nodeState[0]];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isTerrainAlgoUnweighted = (algo) => {\n    return unweightedTerrainAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n\nexport const sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n};\n\nexport const getRandomNum = (num1, num2) => {\n    if (num1 === num2) {\n        return num1;\n    }\n    const min = Math.min(num1, num2);\n    const max = Math.max(num1, num2);\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};","import { getNeighbourNodes, createPath, findMinPriorityNode, sleep } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dijkstras = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            const nodeStateFunc = gridState[minKey][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + nodeWeight[gridState[neighbour][0][0]];\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                }\n            }\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};","import { getNeighbourNodes, sleep } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};","import { getNeighbourNodes, createPath, sleep } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bfs = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        if (currCord !== startCord && currCord !== targetCord) {\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n        }\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            const nodeStateFunc = gridState[neighbour][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};\n","import { getNeighbourNodes, createPath, findMinPriorityNode, sleep } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const aStar = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let G = { [startCord]: 0 }; // G(n) => tell us the current shortest distance from start node to node n\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = G(n) + H(n)\n    let visited = {};\n    let prevNodes = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = G[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            const nodeStateFunc = gridState[currNode][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n        }\n        else if (currNode === targetCord) {\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currGScore = G[currNode] + nodeWeight[gridState[neighbour][0][0]];\n\n            if (currGScore < G[neighbour]) {\n                if (neighbour !== startCord && neighbour !== targetCord && !(neighbour in visited)) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                }\n                visited[neighbour] = 1;\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                G[neighbour] = currGScore;\n                H[neighbour] = h(neighbour, targetCord);\n                F[neighbour] = G[neighbour] + H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { getNeighbourNodes, createPath, findMinPriorityNode, sleep } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bestFirst = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = H(n)\n    let prevNodes = {};\n    let visited = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            const nodeStateFunc = gridState[currNode][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n        }\n        else if (currNode === targetCord) {\n            console.log(\"DONNEE\");\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            if (!(neighbour in visited)) {\n                visited[neighbour] = 1;\n\n                if (neighbour !== startCord && neighbour !== targetCord) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                }\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                H[neighbour] = h(neighbour, targetCord) + nodeWeight[gridState[neighbour][0][0]];\n                F[neighbour] = H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { nodeTypeEnum } from '../../utils/constants.js'\nimport { sleep, getRandomNum } from '../../utils/helper.js'\n\nconst HORIZONTAL = 0;\nconst VERTICAL = 1;\n\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    // make border around the screen\n    for (let y = 0; y < cols; y++) {\n        const currCord = `${0}:${y}`;\n        setWall(currCord, startCord, targetCord, gridState, setGridState);\n        await sleep(timeout);\n    }\n\n    for (let y = 1; y < rows; y++) {\n        const currCord = `${y}:${cols - 1}`;\n        setWall(currCord, startCord, targetCord, gridState, setGridState);\n        await sleep(timeout);\n    }\n\n    for (let y = cols - 2; y >= 0; y--) {\n        const currCord = `${rows - 1}:${y}`;\n        setWall(currCord, startCord, targetCord, gridState, setGridState);\n        await sleep(timeout);\n    }\n\n    for (let y = rows - 2; y > 0; y--) {\n        const currCord = `${y}:${0}`;\n        setWall(currCord, startCord, targetCord, gridState, setGridState);\n        await sleep(timeout);\n    }\n\n    // await divide(1, 1, rows - 2, cols - 2, gridState, setGridState, timeout);\n    await divide(startCord, targetCord, gridState, setGridState, 1, rows - 2, 1, cols - 2, timeout, rows, cols);\n};\n\nconst divide = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols) => {\n    const width = endCol - startCol + 1;\n    const height = endRow - startRow + 1;\n\n    let orientation = HORIZONTAL;\n    if (width < height) {\n        orientation = HORIZONTAL;\n    }\n    else if (height < width) {\n        orientation = VERTICAL;\n    }\n    else {\n        orientation = getRandomNum(HORIZONTAL, VERTICAL);\n    }\n\n    if (orientation === HORIZONTAL) {\n        // cutting horizontally\n        if (height < 3 || (startRow % 2 === 1 && height === 3)) {\n            return;\n        }\n        let sCol = startCol;\n        if (startCol % 2 === 1) {\n            sCol += 1;\n        }\n\n        let sRow = startRow + 2;\n        if (startRow % 2 === 0) {\n            sRow = startRow + 1;\n        }\n\n        const skip = Math.floor(getRandomNum(sCol, endCol) / 2) * 2;\n        let randRow = getRandomNum(sRow, endRow - 2);\n        randRow = (Math.floor(randRow / 2) * 2) + 1;\n\n        for (let i = startCol; i <= endCol; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${randRow}:${i}`;\n            setWall(currCord, startCord, targetCord, gridState, setGridState);\n            await sleep(timeout);\n        }\n\n        await divide(startCord, targetCord, gridState, setGridState, startRow, randRow - 1, startCol, endCol, timeout, rows, cols);\n        await divide(startCord, targetCord, gridState, setGridState, randRow + 1, endRow, startCol, endCol, timeout, rows, cols);\n    }\n    else if (orientation === VERTICAL) {\n        // divide vertically \n        if (width < 3 || (startCol % 2 === 1 && width === 3)) {\n            return;\n        }\n        let sRow = startRow;\n        if (startRow % 2 === 1) {\n            sRow += 1;\n        }\n\n        let sCol = startCol + 2;\n        if (startCol % 2 === 0) {\n            sCol = startCol + 1;\n        }\n        const skip = Math.floor(getRandomNum(sRow, endRow) / 2) * 2;\n        let randCol = getRandomNum(sCol, endCol - 2);\n        randCol = (Math.floor(randCol / 2) * 2) + 1;\n\n        for (let i = startRow; i <= endRow; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${i}:${randCol}`;\n            setWall(currCord, startCord, targetCord, gridState, setGridState);\n            await sleep(timeout);\n        }\n\n        await divide(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, randCol - 1, timeout, rows, cols);\n\n        await divide(startCord, targetCord, gridState, setGridState, startRow, endRow, randCol + 1, endCol, timeout, rows, cols);\n    }\n};\n\nconst setWall = (currCord, startCord, targetCord, gridState, setGridState) => {\n    const nodeStateFunc = gridState[currCord][1];\n\n    let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n    if (currCord === startCord) {\n        state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n    }\n    else if (currCord === targetCord) {\n        state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n    }\n\n    nodeStateFunc(prevState => state);\n    setGridState(prevState => ({ ...prevState, [currCord]: [state, prevState[currCord][1]] }));\n};","import { nodeTypeEnum } from \"../../utils/constants\";\nimport { sleep } from \"../../utils/helper\";\n\nfunction Grad(x, y, z) {\n    this.x = x; this.y = y; this.z = z;\n}\n\nGrad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n};\n\nGrad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n};\n\nconst grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\nnew Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\nnew Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n\nconst p = [151, 160, 137, 91, 90, 15,\n    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n\n// To remove the need for index wrapping, double the permutation table length\nvar perm = new Array(512);\nvar gradP = new Array(512);\n\n// This isn't a very good seeding function, but it works ok. It supports 2^16\n// different seed values. Write something better if you need more seeds.\nconst seed = (seed) => {\n    if (seed > 0 && seed < 1) {\n        // Scale the seed out\n        seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n    if (seed < 256) {\n        seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n        var v;\n        if (i & 1) {\n            v = p[i] ^ (seed & 255);\n        } else {\n            v = p[i] ^ ((seed >> 8) & 255);\n        }\n\n        perm[i] = perm[i + 256] = v;\n        gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n};\n\n// Skewing and unskewing factors for 2, 3, and 4 dimensions\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n\n// 2D simplex noise\nconst simplex2 = (xin, yin) => {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n    var y0 = yin - j + t;\n    // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n    if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n        i1 = 1; j1 = 0;\n    } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        i1 = 0; j1 = 1;\n    }\n    // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n    var y2 = y0 - 1 + 2 * G2;\n    // Work out the hashed gradient indices of the three simplex corners\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]];\n    // Calculate the contribution from the three corners\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n    if (t0 < 0) {\n        n0 = 0;\n    } else {\n        t0 *= t0;\n        n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n    }\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n    if (t1 < 0) {\n        n1 = 0;\n    } else {\n        t1 *= t1;\n        n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n    if (t2 < 0) {\n        n2 = 0;\n    } else {\n        t2 *= t2;\n        n2 = t2 * t2 * gi2.dot2(x2, y2);\n    }\n    // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n    return 70 * (n0 + n1 + n2);\n};\n\nconst SCALE = 12;\nexport const perlinNoise = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    seed(Math.random());\n    let gridMap = {};\n    for (let x = 0; x < cols; x++) {\n        for (let y = 0; y < rows; y++) {\n            // All noise functions return values in the range of -1 to 1.\n            const currCord = `${y}:${x}`;\n            const nodeStateFunc = gridState[currCord][1];\n\n            // noise.simplex2 and noise.perlin2 for 2d noise\n            let value = simplex2(x / SCALE, y / SCALE);\n            const state = [nodeTypeEnum.none];\n\n            if (value >= -1 && value <= -0.50) {\n                state.unshift(nodeTypeEnum.wall);\n            }\n            else if (value > -0.50 && value <= -0.20) {\n                state.unshift(nodeTypeEnum.weighted100);\n            }\n            else if (value > -0.20 && value <= 0.10) {\n                state.unshift(nodeTypeEnum.weighted80);\n            }\n            else if (value > 0.10 && value <= 0.40) {\n                state.unshift(nodeTypeEnum.weighted60);\n            }\n            else if (value > 0.40 && value <= 0.70) {\n                state.unshift(nodeTypeEnum.weighted40);\n            }\n            else if (value > 0.70 && value <= 1) {\n                state.unshift(nodeTypeEnum.weighted20);\n            }\n\n            if (currCord === startCord) {\n                state.unshift(nodeTypeEnum.start);\n            }\n            else if (currCord === targetCord) {\n                state.unshift(nodeTypeEnum.target);\n            }\n\n            nodeStateFunc(prevState => state);\n            gridMap[currCord] = [state, nodeStateFunc];\n            await sleep(timeout);\n        }\n    }\n\n    setGridState(prevState => gridMap);\n};","import { nodeTypeEnum } from '../../utils/constants.js';\nimport { getRandomNum } from '../../utils/helper.js'\n\nexport const random = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            const currCord = `${x}:${y}`;\n            const nodeStateFunc = gridState[currCord][1];\n            const randomNum = getRandomNum(1, 10);\n\n            if (randomNum >= 4) {\n                // don't place wall\n                let newState = [nodeTypeEnum.none];\n\n                if (currCord === startCord) {\n                    newState.unshift(nodeTypeEnum.start);\n                }\n                else if (currCord === targetCord) {\n                    newState.unshift(nodeTypeEnum.target);\n                }\n\n                gridMap[currCord] = [newState, nodeStateFunc];\n                continue;\n            }\n\n            // place wall\n            let newState = [nodeTypeEnum.wall, nodeTypeEnum.none];\n\n            if (currCord === startCord) {\n                newState.unshift(nodeTypeEnum.start);\n            }\n            else if (currCord === targetCord) {\n                newState.unshift(nodeTypeEnum.target);\n            }\n\n            nodeStateFunc(prevState => newState);\n            gridMap[currCord] = [newState, nodeStateFunc];\n        }\n    }\n\n    setGridState(prevState => gridMap);\n};","import { nodeTypeEnum } from '../../utils/constants.js';\nimport { getRandomNum } from '../../utils/helper.js'\n\nexport const randomWeighted = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            const currCord = `${x}:${y}`;\n            const nodeStateFunc = gridState[currCord][1];\n            const randomNum = getRandomNum(1, 10);\n\n            if (randomNum >= 5) {\n                // don't place obstacle\n                let newState = [nodeTypeEnum.none];\n\n                if (currCord === startCord) {\n                    newState.unshift(nodeTypeEnum.start);\n                }\n                else if (currCord === targetCord) {\n                    newState.unshift(nodeTypeEnum.target);\n                }\n\n                gridMap[currCord] = [newState, nodeStateFunc];\n                continue;\n            }\n\n            // place a random obstacle\n            const randomObstacle = getRandomNum(nodeTypeEnum.wall, nodeTypeEnum.weighted20);\n            let newState = [randomObstacle, nodeTypeEnum.none];\n\n            if (currCord === startCord) {\n                newState.unshift(nodeTypeEnum.start);\n            }\n            else if (currCord === targetCord) {\n                newState.unshift(nodeTypeEnum.target);\n            }\n\n            nodeStateFunc(prevState => newState);\n            gridMap[currCord] = [newState, nodeStateFunc];\n        }\n    }\n\n    setGridState(prevState => gridMap);\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\nimport { bestFirst } from '../algorithms/path_finding/bestFirst.js';\nimport { recursiveDivision } from '../algorithms/terrain/recursiveDivision.js'\nimport { perlinNoise } from '../algorithms/terrain/perlin.js'\nimport { random } from '../algorithms/terrain/random.js';\nimport { randomWeighted } from '../algorithms/terrain/randomWeighted.js';\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = 'A* (A-Star)';\nconst BFS = 'Breadth-first Search';\nconst DFS = 'Depth-first Search';\nconst BEST_FIRST = 'Best-first Search';\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs,\n    [BEST_FIRST]: bestFirst\n};\nObject.freeze(algoFunctions);\n\nconst PATH_CREATION_SLEEP = 7;\nconst algoSleepTimes = {\n    [DIJKSTRAS]: 1,\n    [ASTAR]: 4,\n    [BFS]: 5,\n    [DFS]: 10,\n    [BEST_FIRST]: 11\n};\nObject.freeze(algoSleepTimes);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST, algoFunctions, PATH_CREATION_SLEEP, algoSleepTimes };\n\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst MAZE_GENERATION_SLEEP = 5;\nconst RECURSIVE_DIVISION = \"Recursive Division\";\nconst PERLIN_NOISE = \"Perlin Noise\";\nconst RANDOM_UNWEIGHTED = \"Random\";\nconst RANDOM_WEIGHTED = \"Random (Weighted)\"\nconst allTerrainAlgos = [RECURSIVE_DIVISION, PERLIN_NOISE, RANDOM_UNWEIGHTED, RANDOM_WEIGHTED];\nObject.freeze(allTerrainAlgos);\n\nconst unweightedTerrainAlgos = [RECURSIVE_DIVISION, RANDOM_UNWEIGHTED];\nObject.freeze(unweightedTerrainAlgos);\n\nconst terrainFunctions = {\n    [RECURSIVE_DIVISION]: recursiveDivision,\n    [PERLIN_NOISE]: perlinNoise,\n    [RANDOM_UNWEIGHTED]: random,\n    [RANDOM_WEIGHTED]: randomWeighted,\n};\nObject.freeze(terrainFunctions);\n\nconst terrainAlgoSleepTimes = {\n    [RECURSIVE_DIVISION]: 5,\n    [PERLIN_NOISE]: 1,\n    [RANDOM_UNWEIGHTED]: 1,\n    [RANDOM_WEIGHTED]: 1\n};\nObject.freeze(terrainAlgoSleepTimes);\n\nexport { MAZE_GENERATION_SLEEP, RECURSIVE_DIVISION, PERLIN_NOISE, allTerrainAlgos, unweightedTerrainAlgos, terrainFunctions, terrainAlgoSleepTimes };\n\nconst pathfindingAlgoInfo = {\n    [DIJKSTRAS]: {\n        'description': <p>Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the <strong>lowest distance</strong>, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.</p>,\n        'optimality': <p>Dijkstra's is guranteed to find the shortest path.</p>\n    }\n};\nObject.freeze(pathfindingAlgoInfo);\nexport { pathfindingAlgoInfo };\n\n// NODE CONSTANTS ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n};\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst EMPTY_NODE_BORDER_COLOR = '#3C4046';\nconst nodeColors = {\n    [nodeTypeEnum.none]: 'transparent',\n    [nodeTypeEnum.target]: '#f14846',\n    [nodeTypeEnum.wall]: '#18191c',\n    [nodeTypeEnum.visiting]: '#4988dc',\n    [nodeTypeEnum.start]: '#43b581',\n    [nodeTypeEnum.visited]: '#3f70dd',\n    [nodeTypeEnum.path]: '#f9a719',\n    [nodeTypeEnum.weighted100]: '#1b1c1e',\n    [nodeTypeEnum.weighted80]: '#1c1e21',\n    [nodeTypeEnum.weighted60]: '#222327',\n    [nodeTypeEnum.weighted40]: '#26272b',\n    [nodeTypeEnum.weighted20]: '#2b2c31'\n};\nObject.freeze(nodeColors);\n\nexport { EMPTY_NODE_BORDER_COLOR, nodeColors };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n};\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n};\nObject.freeze(obsEnum);\n\nexport { obstacleTypes, obsEnum };","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { EMPTY_NODE_BORDER_COLOR, nodeTypeEnum } from '../utils/constants.js'\nimport { getNodeColor } from '../utils/helper.js'\n\nconst Node = ({ nodeId, size, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n\n    useEffect(() => {\n        setGridState(prevState => ({ ...prevState, [nodeId]: [startingState, setNodeState] }));\n    }, []);\n\n    const nodeColor = getNodeColor(nodeState);\n    let nodeStyle = {\n        width: size,\n        height: size,\n        backgroundColor: nodeColor,\n        border: `1px solid ${nodeState[0] === nodeTypeEnum.none ? EMPTY_NODE_BORDER_COLOR : nodeColor}`\n    };\n\n    if (!runningAlgo) {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            nodeStyle.cursor = 'grabbing';\n        }\n        else if (draggingSelection === nodeTypeEnum.none && (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target)) {\n            nodeStyle.cursor = 'grab';\n        }\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n        else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${((nodeState[0] >= nodeTypeEnum.wall && draggingSelection === nodeTypeEnum.none) || draggingSelection === nodeTypeEnum.remObstacle) && 'erasing'}\n        ${draggingSelection !== nodeTypeEnum.remObstacle && (nodeState[0] <= nodeTypeEnum.none || draggingSelection >= nodeTypeEnum.wall) && !runningAlgo && 'ready-to-draw'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n};\n\nexport default Node\n","import Node from './Node.js'\nimport React from 'react'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = React.memo(({ rows, cols, padding, nodeSize, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    console.log(\"RERENDERING GRID\");\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            let startingState = [nodeTypeEnum.none];\n            if (x === 1 && y === 1) {\n                startingState.unshift(nodeTypeEnum.start);\n            }\n            else if (x === (rows - 2) && y === (cols - 2)) {\n                startingState.unshift(nodeTypeEnum.target);\n            }\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} startingState={startingState} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n});\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { algoFunctions, nodeTypeEnum, PATH_CREATION_SLEEP, algoSleepTimes } from '../utils/constants.js'\nimport { sleep } from '../utils/helper.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, gridState, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        path = await algoFunctions[selectedAlgo](startCord, targetCord, gridState, rows, cols, algoSleepTimes[selectedAlgo]);\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            await sleep(PATH_CREATION_SLEEP);\n            const nodeStateFunc = gridState[path[i]][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.path, ...gridState[path[i]][0]]));\n        }\n\n        setRunningAlgo(false);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","export default __webpack_public_path__ + \"static/media/weight.e51e9729.svg\";","export default __webpack_public_path__ + \"static/media/weight_unfilled.cc3c5f2f.svg\";","export default __webpack_public_path__ + \"static/media/optimal.5649a19a.svg\";","export default __webpack_public_path__ + \"static/media/optimal_unfilled.e461ee2c.svg\";","import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal, isTerrainAlgoUnweighted } from '../utils/helper.js'\nimport { nodeColors, nodeTypeEnum, obsEnum } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth, isAlgoSelector, isObstacleSelector, isTerrainSelector }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled]);\n\n    useEffect(() => {\n        setSelectedVal(items[0]);\n        setSelectedId(0);\n        setDropDownOpen(false);\n        setSelection(items[0]);\n    }, [items]);\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n            {isObstacleSelector && <div style={{ backgroundColor: nodeColors[nodeTypeEnum[obsEnum[items[i]]]] }} className=\"obstacle-preview\"> </div>}\n            {isTerrainSelector && (!isTerrainAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} makes use of weighted obstacles.`} alt={`${items[i]} makes use of weighted obstacles.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} does not use weighted obstacles.`} alt={`${items[i]} does not use weighted obstacles.`}></img>)}\n        </div >)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            <div style={{ display: (dropDownOpen ? 'flex' : 'none') }} className='dropdown-list'>\n                {dropdownItems}\n            </div>\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","const ShowInfo = ({ toggleInfoBox }) => {\n    return (\n        <div className={`button blue`} onClick={toggleInfoBox} >\n            Info\n        </div >\n    )\n}\n\nexport default ShowInfo\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport ShowInfo from './ShowInfo.js'\n\nimport { allPathAlgos } from '../utils/constants.js'\n\nconst ChooseAlgorithm = ({ rows, cols, gridState, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={allPathAlgos} disabled={false} dropDownWidth={dropDownWidth} isAlgoSelector={true} isObstacleSelector={false} />\n            <ShowInfo toggleInfoBox={toggleInfoBox} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import { terrainFunctions, terrainAlgoSleepTimes } from '../utils/constants.js'\n\nconst GenerateTerrain = ({ rows, cols, selectedTerrainAlgo, gridState, setGridState, startCord, targetCord, runningAlgo, setRunningAlgo, resetGrid }) => {\n    const run = async () => {\n        await resetGrid();\n\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedTerrainAlgo);\n\n        await terrainFunctions[selectedTerrainAlgo](startCord, targetCord, gridState, setGridState, rows, cols, terrainAlgoSleepTimes[selectedTerrainAlgo]);\n\n        console.log(\"ENDED: \", selectedTerrainAlgo);\n        setRunningAlgo(false);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default GenerateTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { allTerrainAlgos, unweightedTerrainAlgos } from '../utils/constants.js'\nimport { isAlgoUnweighted } from '../utils/helper.js'\nimport GenerateTerrain from './GenerateTerrain.js'\n\nconst ChooseTerrain = ({ rows, cols, gridState, setGridState, startCord, targetCord, runningAlgo, setRunningAlgo, dropDownWidth, resetGrid, selectedAlgo }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(allTerrainAlgos[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={isAlgoUnweighted(selectedAlgo) ? unweightedTerrainAlgos : allTerrainAlgos} disabled={false} dropDownWidth={dropDownWidth} isAlgoSelector={false} isObstacleSelector={false} isTerrainSelector={true} />\n            <GenerateTerrain rows={rows} cols={cols} selectedTerrainAlgo={selectedTerrainAlgo} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} resetGrid={resetGrid} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { obstacleTypes, obsEnum } from '../utils/constants.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle, weightedObsDisabled, dropDownWidth }) => {\n    const setObstacle = (obstacleName) => {\n        console.log(\"selected obs: \", obsEnum[obstacleName]);\n        setSelectedObstacle(obsEnum[obstacleName]);\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={obstacleTypes} disabled={weightedObsDisabled} dropDownWidth={dropDownWidth} isAlgoSelector={false} isObstacleSelector={true} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, gridState, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, toggleInfoBox, selectedAlgo, setSelectedAlgo, resetGrid }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={220} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={setSelectedAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={190} />\n            <ChooseTerrain rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} resetGrid={resetGrid} selectedAlgo={selectedAlgo} dropDownWidth={200} />\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/close.494fd48f.svg\";","import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const enableDragging = (e) => {\n        setDragging(true);\n    };\n\n    const beingDragged = (e) => {\n        if (dragging) {\n            setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n    };\n\n    return (\n        <div style={{ left: `${boxCord[0]}px`, top: `${boxCord[1]}px` }} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging} onMouseLeave={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} alt='Close info box' />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description) || <p>No information.</p>}\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality)}\n        </div >\n    )\n}\n\nexport default InfoBox\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    initializeGrid();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const initializeGrid = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const currRows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const currCols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(currRows);\n    setCols(currCols);\n    setStartCord('1:1');\n    setTargetCord(`${currRows - 2}:${currCols - 2}`);\n  };\n\n  const clearPath = () => {\n    console.log(\"CLEARING PATH\");\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] <= nodeTypeEnum.visiting)) {\n          nodeState.splice(1, 1);\n        }\n        else if (currState <= nodeTypeEnum.visiting) {\n          nodeState.splice(0, 1);\n        }\n\n        nodeStateFunc(prevState => nodeState);\n      }\n    }\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let updateGrid = false;\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        gridMap[id] = [nodeState, nodeStateFunc];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] >= nodeTypeEnum.wall)) {\n          updateGrid = true;\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          gridMap[id] = [nodeState, nodeStateFunc];\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          updateGrid = true;\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          gridMap[id] = [[nodeTypeEnum.none], nodeStateFunc];\n        }\n      }\n    }\n\n    if (updateGrid) {\n      setGridState(prevState => gridMap);\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let updateGrid = false;\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        gridMap[id] = [nodeState, nodeStateFunc];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] > nodeTypeEnum.wall)) {\n          updateGrid = true;\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          gridMap[id] = [nodeState, nodeStateFunc];\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          updateGrid = true;\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          gridMap[id] = [[nodeTypeEnum.none], nodeStateFunc];\n        }\n      }\n    }\n\n    if (updateGrid) {\n      setGridState(prevState => gridMap);\n    }\n  };\n\n  const resetGrid = () => {\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n        let newState = [nodeTypeEnum.none];\n\n        if (currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) {\n          newState.unshift(currState);\n        }\n\n        nodeStateFunc(prev => newState);\n        gridMap[id] = [newState, nodeStateFunc];\n      }\n    }\n\n    setGridState(prevState => gridMap);\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearPath();\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} resetGrid={resetGrid} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}