{"version":3,"sources":["utils/helper.js","algorithms/path_finding/aStar.js","utils/constants.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/bfs.js","algorithms/path_finding/dfs.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","components/Visualize.js","images/down_arrow.svg","images/weight.svg","images/weight_unfilled.svg","images/optimal.svg","images/optimal_unfilled.svg","components/CustomDropdown.js","components/ShowInfo.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","images/close.svg","components/InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","nodeTypeEnum","wall","push","createPath","startCord","targetCord","prevNodes","cord","path","findMinPriorityNode","minPQ","minPriority","Math","min","Object","values","key","isAlgoUnweighted","algo","unweightedPathAlgos","includes","h","currNodeCord","currRow","currCol","targetRow","targetCol","abs","DIJKSTRAS","ASTAR","BFS","DFS","algoFunctions","setGridState","timeout","totalCosts","visited","x","y","Infinity","minKey","setTimeout","prevState","slice","neighbours","neighbour","currPath","nodeWeight","visiting","keys","length","openSet","G","H","F","currNode","currGScore","queue","currCord","pop","none","unshift","stack","shift","unvisitedNeighbourFound","splice","freeze","allPathAlgos","optimalPathAlgos","terrainAlgos","nodeColorClass","target","start","weighted100","weighted80","weighted60","weighted40","weighted20","obstacleTypes","obsEnum","Node","React","memo","nodeId","size","nodeState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeDim","width","height","style","className","onMouseDown","remObstacle","onMouseUp","onMouseEnter","onMouseLeave","Grid","padding","nodeSize","useState","nodes","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","console","log","i","CustomDropdown","setSelection","items","disabled","dropDownWidth","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","isAlgoSelector","useEffect","dropdownItems","id","src","weightUnfilled","title","alt","weight","optimal","optimalUnfilled","downArrow","ShowInfo","toggleInfoBox","ChooseAlgorithm","setSelectedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","weightedObsDisabled","obstacleName","Header","setWeightedObsDisabled","clearWeightedObstacles","paddingBottom","InfoBox","infoBoxOpen","closeIcon","App","setInfoBoxOpen","setRows","setCols","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","change","currState","algoName","unweightedAlgo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37170ed2.chunk.js","sourcesContent":["import { nodeTypeEnum, unweightedPathAlgos, optimalPathAlgos } from './constants.js'\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const aStar = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let G = { [startCord]: 0 }; // G(n) => tell us the current shortest distance from start node to node n\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = G(n) + H(n)\n    let prevNodes = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = G[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currNode]: [nodeTypeEnum.visited, ...prevState[currNode].slice(1)] }));\n            }, timeout);\n        }\n        else if (currNode === targetCord) {\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currGScore = G[currNode] + nodeWeight[gridState[neighbour][0]];\n\n            if (currGScore < G[neighbour]) {\n                if (neighbour !== startCord && neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                G[neighbour] = currGScore;\n                H[neighbour] = h(neighbour, targetCord);\n                F[neighbour] = G[neighbour] + H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = \"A* (A-Star)\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs\n}\nObject.freeze(algoFunctions);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, algoFunctions };\n\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\n\nexport { ALGO1, ALGO2, terrainAlgos };\n\n// NODE TYPES ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n}\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [nodeTypeEnum.visited, ...prevState[minKey].slice(1)] }));\n            }, timeout);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + nodeWeight[gridState[neighbour][0]];\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n            }\n        }\n    }\n\n    return [];\n};","import { getNeighbourNodes, createPath } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        if (currCord !== startCord && currCord !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visited, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n","import { getNeighbourNodes } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visiting, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visited, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};","import React from 'react'\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${nodeColorClass[nodeState[0]]}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { algoFunctions, nodeTypeEnum } from '../utils/constants.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        let timeout = 1;\n        path = algoFunctions[selectedAlgo](startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [nodeTypeEnum.path, ...updatedGridState[path[i]]] }));\n            }, timeout);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, timeout);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","export default __webpack_public_path__ + \"static/media/weight.e51e9729.svg\";","export default __webpack_public_path__ + \"static/media/weight_unfilled.cc3c5f2f.svg\";","export default __webpack_public_path__ + \"static/media/optimal.5649a19a.svg\";","export default __webpack_public_path__ + \"static/media/optimal_unfilled.e461ee2c.svg\";","import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js'\nimport { allPathAlgos } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (allPathAlgos[0] === items[0]);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import { algoFunctions, nodeTypeEnum } from '../utils/constants.js'\n\nconst ShowInfo = ({ toggleInfoBox, selectedAlgo }) => {\n    return (\n        <div className={`button blue`} onClick={toggleInfoBox} >\n            Info\n        </div >\n    )\n}\n\nexport default ShowInfo\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport ShowInfo from './ShowInfo.js'\n\nimport { allPathAlgos } from '../utils/constants.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={allPathAlgos} disabled={false} dropDownWidth={dropDownWidth} />\n            <ShowInfo toggleInfoBox={toggleInfoBox} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { terrainAlgos } from '../utils/constants.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(terrainAlgos[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={terrainAlgos} disabled={false} dropDownWidth={dropDownWidth} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { obstacleTypes, obsEnum } from '../utils/constants.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle, weightedObsDisabled, dropDownWidth }) => {\n    const setObstacle = (obstacleName) => {\n        console.log(\"selected obs: \", obsEnum[obstacleName]);\n        setSelectedObstacle(obsEnum[obstacleName]);\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={obstacleTypes} disabled={weightedObsDisabled} dropDownWidth={dropDownWidth} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, setWeightedObsDisabled, clearWeightedObstacles, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={200} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={setSelectedAlgo} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={150} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={150} />\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/close.494fd48f.svg\";","import closeIcon from '../images/close.svg'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    return (\n        <div className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} >\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} />\n            <h1>{selectedAlgo}</h1>\n            SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text SAmple text text text\n        </div >\n    )\n}\n\nexport default InfoBox\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] === nodeTypeEnum.path || gridState[id][1] === nodeTypeEnum.visited || gridState[id][1] === nodeTypeEnum.visiting)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] >= nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] > nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}