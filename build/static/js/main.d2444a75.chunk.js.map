{"version":3,"sources":["utils/util.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/dfs.js","components/Visualize.js","images/down_arrow.svg","components/CustomDropdown.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","visiting","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getPathAlgos","getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","push","Node","React","memo","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeDim","width","height","style","className","onMouseDown","prevState","slice","onMouseUp","onMouseEnter","onMouseLeave","Grid","padding","nodeSize","useState","nodes","x","y","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","dijkstras","startCord","targetCord","totalCosts","prevNodes","minPQ","cord","minKey","findMinPriorityNode","setTimeout","createPath","neighbours","neighbour","currPath","keys","length","minPriority","Math","min","values","dfs","stack","currCord","pop","shift","unshift","unvisitedNeighbourFound","splice","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","console","log","i","CustomDropdown","setSelection","items","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","dropdownItems","id","src","downArrow","ChooseAlgorithm","setSelectedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","obstacleName","Header","paddingBottom","App","setRows","setCols","useEffect","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","change","currState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2444a75.chunk.js","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'visiting': 6,\n    'wall': 7,\n    'weighted-100': 8,\n    'weighted-80': 9,\n    'weighted-60': 10,\n    'weighted-40': 11,\n    'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n","import React from 'react'\nimport { getNodeColorClass, getNodeTypeEnum } from '../utils/util.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        if (nodeState[0] === getNodeTypeEnum('none') || nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited')) {\n            setDraggingSelection(getNodeTypeEnum(selectedObstacle));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n            return;\n        }\n        else if (nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(getNodeTypeEnum('remObstacle'));\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === getNodeTypeEnum('remObstacle') && nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === getNodeTypeEnum(selectedObstacle) && (nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited') || nodeState[0] === getNodeTypeEnum('none'))) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${getNodeColorClass(nodeState[0])}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { getNodeTypeEnum, getNodeWeight, getNeighbourNodes } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [getNodeTypeEnum('visited'), ...prevState[minKey].slice(1)] }));\n            }, 1);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [getNodeTypeEnum('visiting'), ...prevState[neighbour]] }));\n                    }, 1);\n                }\n            }\n        }\n    }\n\n    return [];\n};\n\nconst createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};","import { getNodeTypeEnum, getNeighbourNodes } from '../../utils/util.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visiting'), getNodeTypeEnum('none')] }));\n            }, 1);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')] }));\n            }, 1);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        switch (selectedAlgo) {\n            case \"Dijkstra's\":\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n                break;\n            case \"DFS\":\n                path = dfs(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path'), ...updatedGridState[path[i]]] }));\n            }, 1);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, 1);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","import { useState } from 'react'\nimport downArrow from '../images/down_arrow.svg';\n\nconst CustomDropdown = ({ setSelection, items }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div className={`dropdown-header ${dropDownOpen && 'open'}`} onClick={toggle}>\n                {selectedVal}\n                <img className=\"down-arrow\" src={downArrow}></img>\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos } from '../utils/util.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const [selectedAlgo, setSelectedAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={getPathAlgos()} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos, getTerrainAlgos } from '../utils/util.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={getTerrainAlgos()} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { getObstacleTypes, getObstacleEnum } from '../utils/util.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle }) => {\n    const setObstacle = (obstacleName) => {\n        setSelectedObstacle(getObstacleEnum(obstacleName));\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={getObstacleTypes()} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} />\n        </div>\n    )\n}\n\nexport default Header\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] === getNodeTypeEnum('path') || gridState[id][1] === getNodeTypeEnum('visited') || gridState[id][1] === getNodeTypeEnum('visiting'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] >= getNodeTypeEnum('wall'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}