[{"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/index.js":"1","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/reportWebVitals.js":"2","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/App.js":"3","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js":"4","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js":"5","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/utils/util.js":"6","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/index.js":"7","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js":"8","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/reportWebVitals.js":"9","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js":"10","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js":"11","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js":"12","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js":"13","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js":"14","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Reset.js":"15","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Clear.js":"16","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseAlgorithm.js":"17","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js":"18","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseTerrain.js":"19","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseObstacle.js":"20","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js":"21","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js":"22","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/aStar.js":"23","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js":"24","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/helper.js":"25","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ShowInfo.js":"26","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js":"27","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bestFirst.js":"28","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/recursiveDivision.js":"29","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/GenerateTerrain.js":"30","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/perlin.js":"31","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/random.js":"32","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/randomWeighted.js":"33"},{"size":500,"mtime":1616528627117,"results":"34","hashOfConfig":"35"},{"size":362,"mtime":1616528627119,"results":"36","hashOfConfig":"35"},{"size":596,"mtime":1616611782584,"results":"37","hashOfConfig":"35"},{"size":1399,"mtime":1616563609167,"results":"38","hashOfConfig":"35"},{"size":3040,"mtime":1616634498821,"results":"39","hashOfConfig":"35"},{"size":197,"mtime":1616562146340,"results":"40","hashOfConfig":"35"},{"size":500,"mtime":1616528627117,"results":"41","hashOfConfig":"42"},{"size":6490,"mtime":1618555529910,"results":"43","hashOfConfig":"42"},{"size":362,"mtime":1616528627119,"results":"44","hashOfConfig":"42"},{"size":1703,"mtime":1618447905242,"results":"45","hashOfConfig":"42"},{"size":4530,"mtime":1618448835228,"results":"46","hashOfConfig":"42"},{"size":1597,"mtime":1618447914953,"results":"47","hashOfConfig":"42"},{"size":1181,"mtime":1618447920118,"results":"48","hashOfConfig":"42"},{"size":1955,"mtime":1618547329598,"results":"49","hashOfConfig":"42"},{"size":257,"mtime":1617402129742,"results":"50","hashOfConfig":"42"},{"size":272,"mtime":1617401826472,"results":"51","hashOfConfig":"42"},{"size":991,"mtime":1618527114233,"results":"52","hashOfConfig":"42"},{"size":3755,"mtime":1618527213805,"results":"53","hashOfConfig":"42"},{"size":1175,"mtime":1618429556130,"results":"54","hashOfConfig":"42"},{"size":671,"mtime":1618095930893,"results":"55","hashOfConfig":"42"},{"size":1421,"mtime":1618560667928,"results":"56","hashOfConfig":"42"},{"size":1265,"mtime":1618209562306,"results":"57","hashOfConfig":"42"},{"size":3165,"mtime":1618438677288,"results":"58","hashOfConfig":"42"},{"size":13297,"mtime":1618596781253,"results":"59","hashOfConfig":"42"},{"size":2934,"mtime":1618429550906,"results":"60","hashOfConfig":"42"},{"size":186,"mtime":1617923675243,"results":"61","hashOfConfig":"42"},{"size":1557,"mtime":1618556051423,"results":"62","hashOfConfig":"42"},{"size":2896,"mtime":1618439673553,"results":"63","hashOfConfig":"42"},{"size":4532,"mtime":1618378804695,"results":"64","hashOfConfig":"42"},{"size":825,"mtime":1618434295767,"results":"65","hashOfConfig":"42"},{"size":6548,"mtime":1618436021851,"results":"66","hashOfConfig":"42"},{"size":1435,"mtime":1618435589684,"results":"67","hashOfConfig":"42"},{"size":1550,"mtime":1618434975084,"results":"68","hashOfConfig":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},"1t70dl0",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"71"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"4slohk",{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"84"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"84"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"84"},"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/index.js",[],["139","140"],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/reportWebVitals.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/App.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/utils/util.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/index.js",[],["141","142"],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/reportWebVitals.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js",["143"],"import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { EMPTY_NODE_BORDER_COLOR, nodeTypeEnum } from '../utils/constants.js'\nimport { getNodeColor } from '../utils/helper.js'\n\nconst Node = ({ nodeId, size, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n\n    useEffect(() => {\n        setGridState(prevState => ({ ...prevState, [nodeId]: [startingState, setNodeState] }));\n    }, []);\n\n    const nodeColor = getNodeColor(nodeState);\n    let nodeStyle = {\n        width: size,\n        height: size,\n        backgroundColor: nodeColor,\n        border: `1px solid ${nodeState[0] === nodeTypeEnum.none ? EMPTY_NODE_BORDER_COLOR : nodeColor}`\n    };\n\n    if (!runningAlgo) {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            nodeStyle.cursor = 'grabbing';\n        }\n        else if (draggingSelection === nodeTypeEnum.none && (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target)) {\n            nodeStyle.cursor = 'grab';\n        }\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n        else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${((nodeState[0] >= nodeTypeEnum.wall && draggingSelection === nodeTypeEnum.none) || draggingSelection === nodeTypeEnum.remObstacle) && 'erasing'}\n        ${draggingSelection !== nodeTypeEnum.remObstacle && (nodeState[0] <= nodeTypeEnum.none || draggingSelection >= nodeTypeEnum.wall) && !runningAlgo && 'ready-to-draw'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n};\n\nexport default Node\n","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Reset.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Clear.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseAlgorithm.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js",["144","145"],"import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal, isTerrainAlgoUnweighted } from '../utils/helper.js'\nimport { nodeColors, nodeTypeEnum, obsEnum } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth, isAlgoSelector, isObstacleSelector, isTerrainSelector }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n\n    useEffect(() => {\n        if (disabled && isObstacleSelector) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled]);\n\n    useEffect(() => {\n        setSelectedVal(items[0]);\n        setSelectedId(0);\n        setDropDownOpen(false);\n        setSelection(items[0]);\n    }, [items]);\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n            {isObstacleSelector && <div style={{ backgroundColor: nodeColors[nodeTypeEnum[obsEnum[items[i]]]] }} className=\"obstacle-preview\"> </div>}\n            {isTerrainSelector && (!isTerrainAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} makes use of weighted obstacles.`} alt={`${items[i]} makes use of weighted obstacles.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} does not use weighted obstacles.`} alt={`${items[i]} does not use weighted obstacles.`}></img>)}\n        </div >)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            <div style={{ display: (dropDownOpen ? 'flex' : 'none') }} className='dropdown-list'>\n                {dropdownItems}\n            </div>\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseTerrain.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseObstacle.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/aStar.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/helper.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ShowInfo.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bestFirst.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/recursiveDivision.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/GenerateTerrain.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/perlin.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/random.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/randomWeighted.js",[],{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"146","replacedBy":"150"},{"ruleId":"148","replacedBy":"151"},{"ruleId":"152","severity":1,"message":"153","line":11,"column":8,"nodeType":"154","endLine":11,"endColumn":10,"suggestions":"155"},{"ruleId":"152","severity":1,"message":"156","line":22,"column":8,"nodeType":"154","endLine":22,"endColumn":18,"suggestions":"157"},{"ruleId":"152","severity":1,"message":"158","line":29,"column":8,"nodeType":"154","endLine":29,"endColumn":15,"suggestions":"159"},"no-native-reassign",["160"],"no-negated-in-lhs",["161"],["160"],["161"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'nodeId', 'setGridState', and 'startingState'. Either include them or remove the dependency array. If 'setGridState' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["162"],"React Hook useEffect has missing dependencies: 'isObstacleSelector', 'items', and 'setSelection'. Either include them or remove the dependency array. If 'setSelection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],"React Hook useEffect has a missing dependency: 'setSelection'. Either include it or remove the dependency array. If 'setSelection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["164"],"no-global-assign","no-unsafe-negation",{"desc":"165","fix":"166"},{"desc":"167","fix":"168"},{"desc":"169","fix":"170"},"Update the dependencies array to be: [nodeId, setGridState, startingState]",{"range":"171","text":"172"},"Update the dependencies array to be: [disabled, isObstacleSelector, items, setSelection]",{"range":"173","text":"174"},"Update the dependencies array to be: [items, setSelection]",{"range":"175","text":"176"},[555,557],"[nodeId, setGridState, startingState]",[1005,1015],"[disabled, isObstacleSelector, items, setSelection]",[1172,1179],"[items, setSelection]"]