[{"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/index.js":"1","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/reportWebVitals.js":"2","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/App.js":"3","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js":"4","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js":"5","/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/utils/util.js":"6","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/index.js":"7","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js":"8","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/reportWebVitals.js":"9","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js":"10","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js":"11","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js":"12","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js":"13","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js":"14","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Reset.js":"15","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Clear.js":"16","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseAlgorithm.js":"17","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js":"18","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseTerrain.js":"19","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseObstacle.js":"20","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js":"21","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js":"22","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/aStar.js":"23","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js":"24","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/helper.js":"25","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ShowInfo.js":"26","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js":"27"},{"size":500,"mtime":1616528627117,"results":"28","hashOfConfig":"29"},{"size":362,"mtime":1616528627119,"results":"30","hashOfConfig":"29"},{"size":596,"mtime":1616611782584,"results":"31","hashOfConfig":"29"},{"size":1399,"mtime":1616563609167,"results":"32","hashOfConfig":"29"},{"size":3040,"mtime":1616634498821,"results":"33","hashOfConfig":"29"},{"size":197,"mtime":1616562146340,"results":"34","hashOfConfig":"29"},{"size":500,"mtime":1616528627117,"results":"35","hashOfConfig":"36"},{"size":5792,"mtime":1617956660235,"results":"37","hashOfConfig":"36"},{"size":362,"mtime":1616528627119,"results":"38","hashOfConfig":"36"},{"size":1703,"mtime":1617948828449,"results":"39","hashOfConfig":"36"},{"size":3827,"mtime":1617951318071,"results":"40","hashOfConfig":"36"},{"size":1540,"mtime":1617952969914,"results":"41","hashOfConfig":"36"},{"size":1153,"mtime":1617956239961,"results":"42","hashOfConfig":"36"},{"size":2059,"mtime":1617956222156,"results":"43","hashOfConfig":"36"},{"size":257,"mtime":1617402129742,"results":"44","hashOfConfig":"36"},{"size":272,"mtime":1617401826472,"results":"45","hashOfConfig":"36"},{"size":936,"mtime":1617952989421,"results":"46","hashOfConfig":"36"},{"size":2961,"mtime":1617863717083,"results":"47","hashOfConfig":"36"},{"size":895,"mtime":1617862716805,"results":"48","hashOfConfig":"36"},{"size":622,"mtime":1617862723983,"results":"49","hashOfConfig":"36"},{"size":1554,"mtime":1617956214960,"results":"50","hashOfConfig":"36"},{"size":1341,"mtime":1617956227035,"results":"51","hashOfConfig":"36"},{"size":3151,"mtime":1617956231640,"results":"52","hashOfConfig":"36"},{"size":3682,"mtime":1617922169715,"results":"53","hashOfConfig":"36"},{"size":1514,"mtime":1617954217659,"results":"54","hashOfConfig":"36"},{"size":186,"mtime":1617923675243,"results":"55","hashOfConfig":"36"},{"size":1604,"mtime":1617922236746,"results":"56","hashOfConfig":"36"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"1t70dl0",{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a80ne",{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"78"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"78"},"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/index.js",[],["116","117"],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/reportWebVitals.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/App.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js",[],"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/utils/util.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/index.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/reportWebVitals.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js",[],["118","119"],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js",["120"],"import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'\n\nconst Node = ({ nodeId, size, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n\n    useEffect(() => {\n        setGridState(prevState => ({ ...prevState, [nodeId]: [startingState, setNodeState] }));\n    }, []);\n\n    const nodeStyle = {\n        width: size,\n        height: size\n    };\n\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n        nodeStyle.cursor = 'grabbing';\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n        else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${nodeColorClass[nodeState[0]]} ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n};\n\nexport default Node\n","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Reset.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Clear.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseAlgorithm.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js",["121"],"import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js'\nimport { allPathAlgos } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (allPathAlgos[0] === items[0]);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseTerrain.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ChooseObstacle.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/aStar.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/helper.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/ShowInfo.js",[],"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js",["122"],"import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [prevMouseCord, setPrevMouseCord] = useState([0, 0]);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const boxStyle = {\n        left: boxCord[0],\n        top: boxCord[1]\n    }\n\n    const enableDragging = (e) => {\n        setDragging(true);\n        setPrevMouseCord([e.clientX, e.clientY]);\n    };\n\n    const beingDragged = (e) => {\n        if (dragging) {\n            const xDiff = e.clientX - prevMouseCord[0];\n            const yDiff = e.clientY - prevMouseCord[1];\n\n            setBoxCord(prevState => [prevState[0] + xDiff, prevState[1] + yDiff]);\n            setPrevMouseCord([e.clientX, e.clientY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n        console.log(\"dragging enabled\");\n    };\n\n    return (\n        <div style={boxStyle} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description) || <p>No information.</p>}\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality)}\n        </div >\n    )\n}\n\nexport default InfoBox\n",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"127"},{"ruleId":"125","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":10,"column":8,"nodeType":"131","endLine":10,"endColumn":10,"suggestions":"132"},{"ruleId":"129","severity":1,"message":"133","line":23,"column":8,"nodeType":"131","endLine":23,"endColumn":18,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":37,"column":13,"nodeType":"137","endLine":37,"endColumn":88},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],["138"],["139"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'nodeId', 'setGridState', and 'startingState'. Either include them or remove the dependency array. If 'setGridState' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["140"],"React Hook useEffect has missing dependencies: 'items' and 'setSelection'. Either include them or remove the dependency array. If 'setSelection' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["141"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"142","fix":"143"},{"desc":"144","fix":"145"},"Update the dependencies array to be: [nodeId, setGridState, startingState]",{"range":"146","text":"147"},"Update the dependencies array to be: [disabled, items, setSelection]",{"range":"148","text":"149"},[496,498],"[nodeId, setGridState, startingState]",[941,951],"[disabled, items, setSelection]"]