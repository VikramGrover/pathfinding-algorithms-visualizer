{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'; // import eraser from '../images/eraser.svg'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Node = /*#__PURE__*/React.memo(_c = _s(({\n  nodeId,\n  size,\n  unusedNodeState,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection,\n  setStartCord,\n  setTargetCord,\n  runningAlgo,\n  selectedObstacle,\n  startingState\n}) => {\n  _s();\n\n  const [nodeState, setNodeState] = useState(startingState); // useEffect(() => {\n  //     console.log(nodeId, \" IS UPDATING GRID STATE\");\n  //     setGridState(prevState => ({ ...prevState, [nodeId]: nodeState[0] }));\n  // });\n\n  const nodeStyle = {\n    width: size,\n    height: size\n  };\n\n  if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n    nodeStyle.cursor = 'grabbing';\n  }\n\n  const mouseDowned = () => {\n    if (nodeState[0] <= nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n      setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]); // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n\n      return;\n    } else if (nodeState[0] >= nodeTypeEnum.wall) {\n      setNodeState(prevState => prevState.slice(1)); // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n\n      setDraggingSelection(nodeTypeEnum.remObstacle);\n      return;\n    }\n\n    setDraggingSelection(nodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n      setNodeState(prevState => prevState.slice(1)); // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n    } else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n      setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]); // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n    } else if (draggingSelection === nodeTypeEnum.start) {\n      setNodeState(prevState => [draggingSelection, ...prevState]);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: draggingSelection\n      })); // setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n    } else if (draggingSelection === nodeTypeEnum.target) {\n      setNodeState(prevState => [draggingSelection, ...prevState]); // setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n    }\n  };\n\n  const mouseLeft = () => {\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n      setNodeState(prevState => prevState.slice(1)); // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection === nodeTypeEnum.start) {\n      setStartCord(nodeId);\n    } else if (draggingSelection === nodeTypeEnum.target) {\n      setTargetCord(nodeId);\n    }\n\n    if (draggingSelection !== nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum.none);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeStyle,\n    className: `node ${nodeColorClass[nodeState[0]]} ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`,\n    onMouseDown: runningAlgo ? null : mouseDowned,\n    onMouseUp: runningAlgo ? null : mouseUped,\n    onMouseEnter: runningAlgo ? null : mouseEntered,\n    onMouseLeave: runningAlgo ? null : mouseLeft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}, \"7fv+6v4HAV8A+L3NfjA58/HdIW4=\"));\n_c2 = Node;\nexport default Node;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Node$React.memo\");\n$RefreshReg$(_c2, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["React","useEffect","useState","nodeColorClass","nodeTypeEnum","Node","memo","nodeId","size","unusedNodeState","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","startingState","nodeState","setNodeState","nodeStyle","width","height","start","target","cursor","mouseDowned","none","prevState","wall","slice","remObstacle","mouseEntered","mouseLeft","mouseUped"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'\n// import eraser from '../images/eraser.svg'\n\nconst Node = React.memo(({ nodeId, size, unusedNodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n\n    // useEffect(() => {\n    //     console.log(nodeId, \" IS UPDATING GRID STATE\");\n    //     setGridState(prevState => ({ ...prevState, [nodeId]: nodeState[0] }));\n    // });\n\n    const nodeStyle = {\n        width: size,\n        height: size\n    };\n\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n        nodeStyle.cursor = 'grabbing';\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: draggingSelection }));\n            // setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n            // setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${nodeColorClass[nodeState[0]]} ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}