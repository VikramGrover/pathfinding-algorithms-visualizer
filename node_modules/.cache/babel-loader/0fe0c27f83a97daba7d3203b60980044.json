{"ast":null,"code":"import { getNodeTypeEnum, getNeighbourNodes } from '../../utils/util.js';\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  let queue = [startCord];\n  let visited = {\n    [startCord]: 1\n  };\n  let prevNodes = {};\n\n  while (queue.length > 0) {\n    const currCord = queue.pop();\n    const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n    for (const neighbour of neighbours) {\n      if (neighbour in visited) {\n        continue;\n      }\n\n      if (neighbour === targetCord) {\n        console.log(neighbour);\n        return createPath(startCord, targetCord, prevNodes);\n      }\n\n      queue.unshift(neighbour);\n      visited[neighbour] = 1;\n      prevNodes[neighbour] = currCord;\n      setTimeout(() => {\n        setGridState(prevState => ({ ...prevState,\n          [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')]\n        }));\n      }, timeout);\n    }\n  }\n\n  return [];\n};\n\nconst createPath = (startCord, targetCord, prevNodes) => {\n  let cord = targetCord;\n  let path = [];\n\n  while (true) {\n    cord = prevNodes[cord];\n\n    if (cord === startCord) {\n      break;\n    }\n\n    path.push(cord);\n  }\n\n  console.log(path);\n  return path;\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js"],"names":["getNodeTypeEnum","getNeighbourNodes","bfs","startCord","targetCord","gridState","setGridState","rows","cols","timeout","queue","visited","prevNodes","length","currCord","pop","neighbours","neighbour","console","log","createPath","unshift","setTimeout","prevState","cord","path","push"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,iBAA1B,QAAmD,qBAAnD;AAEA,OAAO,MAAMC,GAAG,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,IAAjD,EAAuDC,IAAvD,EAA6DC,OAA7D,KAAyE;AACxF,MAAIC,KAAK,GAAG,CAACP,SAAD,CAAZ;AACA,MAAIQ,OAAO,GAAG;AAAE,KAACR,SAAD,GAAa;AAAf,GAAd;AACA,MAAIS,SAAS,GAAG,EAAhB;;AAEA,SAAOF,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACrB,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,EAAjB;AACA,UAAMC,UAAU,GAAGf,iBAAiB,CAACa,QAAD,EAAWP,IAAX,EAAiBC,IAAjB,EAAuBH,SAAvB,CAApC;;AAEA,SAAK,MAAMY,SAAX,IAAwBD,UAAxB,EAAoC;AAChC,UAAIC,SAAS,IAAIN,OAAjB,EAA0B;AACtB;AACH;;AAED,UAAIM,SAAS,KAAKb,UAAlB,EAA8B;AAC1Bc,QAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AACA,eAAOG,UAAU,CAACjB,SAAD,EAAYC,UAAZ,EAAwBQ,SAAxB,CAAjB;AACH;;AAEDF,MAAAA,KAAK,CAACW,OAAN,CAAcJ,SAAd;AACAN,MAAAA,OAAO,CAACM,SAAD,CAAP,GAAqB,CAArB;AACAL,MAAAA,SAAS,CAACK,SAAD,CAAT,GAAuBH,QAAvB;AACAQ,MAAAA,UAAU,CAAC,MAAM;AACbhB,QAAAA,YAAY,CAACiB,SAAS,KAAK,EAAE,GAAGA,SAAL;AAAgB,WAACT,QAAD,GAAY,CAACd,eAAe,CAAC,SAAD,CAAhB,EAA6BA,eAAe,CAAC,MAAD,CAA5C;AAA5B,SAAL,CAAV,CAAZ;AACH,OAFS,EAEPS,OAFO,CAAV;AAGH;AACJ;;AAED,SAAO,EAAP;AACH,CA7BM;;AA+BP,MAAMW,UAAU,GAAG,CAACjB,SAAD,EAAYC,UAAZ,EAAwBQ,SAAxB,KAAsC;AACrD,MAAIY,IAAI,GAAGpB,UAAX;AACA,MAAIqB,IAAI,GAAG,EAAX;;AAEA,SAAO,IAAP,EAAa;AACTD,IAAAA,IAAI,GAAGZ,SAAS,CAACY,IAAD,CAAhB;;AAEA,QAAIA,IAAI,KAAKrB,SAAb,EAAwB;AACpB;AACH;;AAEDsB,IAAAA,IAAI,CAACC,IAAL,CAAUF,IAAV;AACH;;AAEDN,EAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACA,SAAOA,IAAP;AACH,CAhBD","sourcesContent":["import { getNodeTypeEnum, getNeighbourNodes } from '../../utils/util.js'\n\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (neighbour === targetCord) {\n                console.log(neighbour);\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n            prevNodes[neighbour] = currCord;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n\nconst createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    console.log(path);\n    return path;\n};"]},"metadata":{},"sourceType":"module"}