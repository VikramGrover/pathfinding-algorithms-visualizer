{"ast":null,"code":"import _slicedToArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Node from'./Node.js';import{useState}from'react';import{nodeTypeEnum}from'../utils/constants.js';import{jsx as _jsx}from\"react/jsx-runtime\";var Grid=function Grid(_ref){var rows=_ref.rows,cols=_ref.cols,padding=_ref.padding,nodeSize=_ref.nodeSize,gridState=_ref.gridState,setGridState=_ref.setGridState,selectedObstacle=_ref.selectedObstacle,setStartCord=_ref.setStartCord,setTargetCord=_ref.setTargetCord,runningAlgo=_ref.runningAlgo;var _useState=useState(nodeTypeEnum.none),_useState2=_slicedToArray(_useState,2),draggingSelection=_useState2[0],setDraggingSelection=_useState2[1];// fill nodes in the grid\nvar nodes=[];for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var nodeId=\"\".concat(x,\":\").concat(y);nodes.push(/*#__PURE__*/_jsx(Node,{nodeId:nodeId,size:nodeSize,nodeState:gridState[nodeId],setGridState:setGridState,draggingSelection:draggingSelection,setDraggingSelection:setDraggingSelection,setStartCord:setStartCord,setTargetCord:setTargetCord,runningAlgo:runningAlgo,selectedObstacle:selectedObstacle},nodeId));}}var gridDimensions={width:cols*nodeSize+cols,height:rows*nodeSize+rows};var containerStyle={paddingLeft:padding,paddingRight:padding};return/*#__PURE__*/_jsx(\"div\",{style:containerStyle,children:/*#__PURE__*/_jsx(\"div\",{className:\"grid\",style:gridDimensions,children:nodes})});};export default Grid;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js"],"names":["Node","useState","nodeTypeEnum","Grid","rows","cols","padding","nodeSize","gridState","setGridState","selectedObstacle","setStartCord","setTargetCord","runningAlgo","none","draggingSelection","setDraggingSelection","nodes","x","y","nodeId","push","gridDimensions","width","height","containerStyle","paddingLeft","paddingRight"],"mappings":"6LAAA,MAAOA,CAAAA,IAAP,KAAiB,WAAjB,CACA,OAASC,QAAT,KAAyB,OAAzB,CACA,OAASC,YAAT,KAA6B,uBAA7B,C,2CAEA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,MAA4H,IAAzHC,CAAAA,IAAyH,MAAzHA,IAAyH,CAAnHC,IAAmH,MAAnHA,IAAmH,CAA7GC,OAA6G,MAA7GA,OAA6G,CAApGC,QAAoG,MAApGA,QAAoG,CAA1FC,SAA0F,MAA1FA,SAA0F,CAA/EC,YAA+E,MAA/EA,YAA+E,CAAjEC,gBAAiE,MAAjEA,gBAAiE,CAA/CC,YAA+C,MAA/CA,YAA+C,CAAjCC,aAAiC,MAAjCA,aAAiC,CAAlBC,WAAkB,MAAlBA,WAAkB,eACnFZ,QAAQ,CAACC,YAAY,CAACY,IAAd,CAD2E,wCAC9HC,iBAD8H,eAC3GC,oBAD2G,eAGrI;AACA,GAAMC,CAAAA,KAAK,CAAG,EAAd,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,IAApB,CAA0Bc,CAAC,EAA3B,CAA+B,CAC3B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGd,IAApB,CAA0Bc,CAAC,EAA3B,CAA+B,CAC3B,GAAIC,CAAAA,MAAM,WAAMF,CAAN,aAAWC,CAAX,CAAV,CAEAF,KAAK,CAACI,IAAN,cAAW,KAAC,IAAD,EAAM,MAAM,CAAED,MAAd,CACP,IAAI,CAAEb,QADC,CACS,SAAS,CAAEC,SAAS,CAACY,MAAD,CAD7B,CACuC,YAAY,CAAEX,YADrD,CAEP,iBAAiB,CAAEM,iBAFZ,CAGP,oBAAoB,CAAEC,oBAHf,CAIP,YAAY,CAAEL,YAJP,CAIqB,aAAa,CAAEC,aAJpC,CAImD,WAAW,CAAEC,WAJhE,CAI6E,gBAAgB,CAAEH,gBAJ/F,EAIsHU,MAJtH,CAAX,EAKH,CACJ,CAED,GAAME,CAAAA,cAAc,CAAG,CACnBC,KAAK,CAAGlB,IAAI,CAAGE,QAAR,CAAoBF,IADR,CAEnBmB,MAAM,CAAGpB,IAAI,CAAGG,QAAR,CAAoBH,IAFT,CAAvB,CAKA,GAAMqB,CAAAA,cAAc,CAAG,CACnBC,WAAW,CAAEpB,OADM,CAEnBqB,YAAY,CAAErB,OAFK,CAAvB,CAKA,mBACI,YAAK,KAAK,CAAEmB,cAAZ,uBACI,YAAK,SAAS,CAAC,MAAf,CAAsB,KAAK,CAAEH,cAA7B,UACKL,KADL,EADJ,EADJ,CAOH,CAlCD,CAoCA,cAAed,CAAAA,IAAf","sourcesContent":["import Node from './Node.js'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}