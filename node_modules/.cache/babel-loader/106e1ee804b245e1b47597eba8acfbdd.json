{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObstacleDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n  useEffect(() => {\n    resetBoard();\n  }, []); // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + margin * 3);\n    const adjustedWinWidth = window.innerWidth - 2 * margin;\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0]; // check under start and target node for path\n\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] === getNodeTypeEnum('path') || gridState[id][1] === getNodeTypeEnum('visited') || gridState[id][1] === getNodeTypeEnum('visiting'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => gridMap);\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0]; // check under start and target node for obstacle\n\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && gridState[id][1] >= getNodeTypeEnum('wall')) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => gridMap);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      runningAlgo: runningAlgo,\n      setRunningAlgo: setRunningAlgo,\n      padding: margin,\n      height: navBarHeight,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      clearObstacles: clearObstacles,\n      clearPath: clearPath,\n      setSelectedObstacle: setSelectedObstacle,\n      weightedObsDisabled: weightedObsDisabled,\n      setWeightedObstacleDisabled: setWeightedObstacleDisabled\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord,\n      runningAlgo: runningAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"ODz6DJulJFo+UJMDsCIRngJwvO0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","useEffect","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","weightedObsDisabled","setWeightedObstacleDisabled","margin","nodeSize","navBarHeight","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","unshift","clearPath","change","id","currState","splice","slice","prevState","clearObstacles"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObstacleDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] === getNodeTypeEnum('path') || gridState[id][1] === getNodeTypeEnum('visited') || gridState[id][1] === getNodeTypeEnum('visiting'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] >= getNodeTypeEnum('wall'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} setWeightedObstacleDisabled={setWeightedObstacleDisabled} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}