{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _toConsumableArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import{getNeighbourNodes,createPath,findMinPriorityNode}from'../../utils/helper.js';import{nodeWeight,nodeTypeEnum}from'../../utils/constants.js';export var aStar=function aStar(startCord,targetCord,gridState,rows,cols,timeout){var openSet=_defineProperty({},startCord,0);var G=_defineProperty({},startCord,0);// G(n) => tell us the current shortest distance from start node to node n\nvar H=_defineProperty({},startCord,0);// H(n) => tells us the estimated distance from node n to target node\nvar F=_defineProperty({},startCord,0);// F(n) = G(n) + H(n)\nvar visited={};var prevNodes={};// intialize all the scores to infinity for all node !== start node\nfor(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var cord=\"\".concat(x,\":\").concat(y);if(cord!==startCord){F[cord]=G[cord]=H[cord]=Infinity;}}}while(Object.keys(openSet).length>0){var currNode=findMinPriorityNode(openSet);delete openSet[currNode];if(currNode!==startCord&&currNode!==targetCord){(function(){var nodeStateFunc=gridState[currNode][1];setTimeout(function(){nodeStateFunc(function(prevState){return[nodeTypeEnum.visited].concat(_toConsumableArray(prevState.slice(1)));});},timeout);})();}else if(currNode===targetCord){// we have reached target, return path\nreturn createPath(startCord,targetCord,prevNodes);}var neighbours=getNeighbourNodes(currNode,rows,cols,gridState);var _iterator=_createForOfIteratorHelper(neighbours),_step;try{for(_iterator.s();!(_step=_iterator.n()).done;){var neighbour=_step.value;var currGScore=G[currNode]+nodeWeight[gridState[neighbour][0][0]];if(currGScore<G[neighbour]){if(neighbour!==startCord&&neighbour!==targetCord&&!(neighbour in visited)){(function(){var nodeStateFunc=gridState[neighbour][1];setTimeout(function(){nodeStateFunc(function(prevState){return[nodeTypeEnum.visiting].concat(_toConsumableArray(prevState));});},timeout);})();}visited[neighbour]=1;// newly calculated G score of neighbour is lower than the one in the table\n// update all the scores\nG[neighbour]=currGScore;H[neighbour]=h(neighbour,targetCord);F[neighbour]=G[neighbour]+H[neighbour];prevNodes[neighbour]=currNode;openSet[neighbour]=F[neighbour];}}}catch(err){_iterator.e(err);}finally{_iterator.f();}}return[];};// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nvar h=function h(currNodeCord,targetCord){if(currNodeCord===targetCord){return 0;}var currRow=parseInt(currNodeCord.split(':')[0]);var currCol=parseInt(currNodeCord.split(':')[1]);var targetRow=parseInt(targetCord.split(':')[0]);var targetCol=parseInt(targetCord.split(':')[1]);return Math.abs(currRow-targetRow)+Math.abs(currCol-targetCol);};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/aStar.js"],"names":["getNeighbourNodes","createPath","findMinPriorityNode","nodeWeight","nodeTypeEnum","aStar","startCord","targetCord","gridState","rows","cols","timeout","openSet","G","H","F","visited","prevNodes","x","y","cord","Infinity","Object","keys","length","currNode","nodeStateFunc","setTimeout","prevState","slice","neighbours","neighbour","currGScore","visiting","h","currNodeCord","currRow","parseInt","split","currCol","targetRow","targetCol","Math","abs"],"mappings":"ylBAAA,OAASA,iBAAT,CAA4BC,UAA5B,CAAwCC,mBAAxC,KAAmE,uBAAnE,CACA,OAASC,UAAT,CAAqBC,YAArB,KAAyC,0BAAzC,CAEA,MAAO,IAAMC,CAAAA,KAAK,CAAG,QAARA,CAAAA,KAAQ,CAACC,SAAD,CAAYC,UAAZ,CAAwBC,SAAxB,CAAmCC,IAAnC,CAAyCC,IAAzC,CAA+CC,OAA/C,CAA2D,CAC5E,GAAIC,CAAAA,OAAO,oBAAMN,SAAN,CAAkB,CAAlB,CAAX,CACA,GAAIO,CAAAA,CAAC,oBAAMP,SAAN,CAAkB,CAAlB,CAAL,CAA4B;AAC5B,GAAIQ,CAAAA,CAAC,oBAAMR,SAAN,CAAkB,CAAlB,CAAL,CAA4B;AAC5B,GAAIS,CAAAA,CAAC,oBAAMT,SAAN,CAAkB,CAAlB,CAAL,CAA4B;AAC5B,GAAIU,CAAAA,OAAO,CAAG,EAAd,CACA,GAAIC,CAAAA,SAAS,CAAG,EAAhB,CAEA;AACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGT,IAApB,CAA0BS,CAAC,EAA3B,CAA+B,CAC3B,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGT,IAApB,CAA0BS,CAAC,EAA3B,CAA+B,CAC3B,GAAIC,CAAAA,IAAI,WAAMF,CAAN,aAAWC,CAAX,CAAR,CAEA,GAAIC,IAAI,GAAKd,SAAb,CAAwB,CACpBS,CAAC,CAACK,IAAD,CAAD,CAAUP,CAAC,CAACO,IAAD,CAAD,CAAUN,CAAC,CAACM,IAAD,CAAD,CAAUC,QAA9B,CACH,CACJ,CACJ,CAED,MAAOC,MAAM,CAACC,IAAP,CAAYX,OAAZ,EAAqBY,MAArB,CAA8B,CAArC,CAAwC,CACpC,GAAMC,CAAAA,QAAQ,CAAGvB,mBAAmB,CAACU,OAAD,CAApC,CACA,MAAOA,CAAAA,OAAO,CAACa,QAAD,CAAd,CAEA,GAAIA,QAAQ,GAAKnB,SAAb,EAA0BmB,QAAQ,GAAKlB,UAA3C,CAAuD,aACnD,GAAMmB,CAAAA,aAAa,CAAGlB,SAAS,CAACiB,QAAD,CAAT,CAAoB,CAApB,CAAtB,CACAE,UAAU,CAAC,UAAM,CACbD,aAAa,CAAC,SAAAE,SAAS,SAAMxB,YAAY,CAACY,OAAnB,4BAA+BY,SAAS,CAACC,KAAV,CAAgB,CAAhB,CAA/B,IAAV,CAAb,CACH,CAFS,CAEPlB,OAFO,CAAV,CAFmD,KAKtD,CALD,IAMK,IAAIc,QAAQ,GAAKlB,UAAjB,CAA6B,CAC9B;AACA,MAAON,CAAAA,UAAU,CAACK,SAAD,CAAYC,UAAZ,CAAwBU,SAAxB,CAAjB,CACH,CAED,GAAMa,CAAAA,UAAU,CAAG9B,iBAAiB,CAACyB,QAAD,CAAWhB,IAAX,CAAiBC,IAAjB,CAAuBF,SAAvB,CAApC,CAfoC,yCAgBZsB,UAhBY,YAgBpC,+CAAoC,IAAzBC,CAAAA,SAAyB,aAChC,GAAMC,CAAAA,UAAU,CAAGnB,CAAC,CAACY,QAAD,CAAD,CAActB,UAAU,CAACK,SAAS,CAACuB,SAAD,CAAT,CAAqB,CAArB,EAAwB,CAAxB,CAAD,CAA3C,CAEA,GAAIC,UAAU,CAAGnB,CAAC,CAACkB,SAAD,CAAlB,CAA+B,CAC3B,GAAIA,SAAS,GAAKzB,SAAd,EAA2ByB,SAAS,GAAKxB,UAAzC,EAAuD,EAAEwB,SAAS,GAAIf,CAAAA,OAAf,CAA3D,CAAoF,aAChF,GAAMU,CAAAA,aAAa,CAAGlB,SAAS,CAACuB,SAAD,CAAT,CAAqB,CAArB,CAAtB,CACAJ,UAAU,CAAC,UAAM,CACbD,aAAa,CAAC,SAAAE,SAAS,SAAMxB,YAAY,CAAC6B,QAAnB,4BAAgCL,SAAhC,IAAV,CAAb,CACH,CAFS,CAEPjB,OAFO,CAAV,CAFgF,KAKnF,CACDK,OAAO,CAACe,SAAD,CAAP,CAAqB,CAArB,CACA;AACA;AACAlB,CAAC,CAACkB,SAAD,CAAD,CAAeC,UAAf,CACAlB,CAAC,CAACiB,SAAD,CAAD,CAAeG,CAAC,CAACH,SAAD,CAAYxB,UAAZ,CAAhB,CACAQ,CAAC,CAACgB,SAAD,CAAD,CAAelB,CAAC,CAACkB,SAAD,CAAD,CAAejB,CAAC,CAACiB,SAAD,CAA/B,CACAd,SAAS,CAACc,SAAD,CAAT,CAAuBN,QAAvB,CACAb,OAAO,CAACmB,SAAD,CAAP,CAAqBhB,CAAC,CAACgB,SAAD,CAAtB,CACH,CACJ,CAnCmC,qDAoCvC,CAED,MAAO,EAAP,CACH,CA1DM,CA4DP;AACA;AACA,GAAMG,CAAAA,CAAC,CAAG,QAAJA,CAAAA,CAAI,CAACC,YAAD,CAAe5B,UAAf,CAA8B,CACpC,GAAI4B,YAAY,GAAK5B,UAArB,CAAiC,CAC7B,MAAO,EAAP,CACH,CAED,GAAM6B,CAAAA,OAAO,CAAGC,QAAQ,CAACF,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAD,CAAxB,CACA,GAAMC,CAAAA,OAAO,CAAGF,QAAQ,CAACF,YAAY,CAACG,KAAb,CAAmB,GAAnB,EAAwB,CAAxB,CAAD,CAAxB,CACA,GAAME,CAAAA,SAAS,CAAGH,QAAQ,CAAC9B,UAAU,CAAC+B,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAA1B,CACA,GAAMG,CAAAA,SAAS,CAAGJ,QAAQ,CAAC9B,UAAU,CAAC+B,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAD,CAA1B,CAEA,MAAOI,CAAAA,IAAI,CAACC,GAAL,CAASP,OAAO,CAAGI,SAAnB,EAAgCE,IAAI,CAACC,GAAL,CAASJ,OAAO,CAAGE,SAAnB,CAAvC,CACH,CAXD","sourcesContent":["import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const aStar = (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let G = { [startCord]: 0 }; // G(n) => tell us the current shortest distance from start node to node n\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = G(n) + H(n)\n    let visited = {};\n    let prevNodes = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = G[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            const nodeStateFunc = gridState[currNode][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n            }, timeout);\n        }\n        else if (currNode === targetCord) {\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currGScore = G[currNode] + nodeWeight[gridState[neighbour][0][0]];\n\n            if (currGScore < G[neighbour]) {\n                if (neighbour !== startCord && neighbour !== targetCord && !(neighbour in visited)) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    setTimeout(() => {\n                        nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                    }, timeout);\n                }\n                visited[neighbour] = 1;\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                G[neighbour] = currGScore;\n                H[neighbour] = h(neighbour, targetCord);\n                F[neighbour] = G[neighbour] + H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};"]},"metadata":{},"sourceType":"module"}