{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport closeIcon from \"../images/close.svg\";\nimport { pathfindingAlgoInfo } from '../utils/constants.js';\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfoBox = ({\n  infoBoxOpen,\n  toggleInfoBox,\n  selectedAlgo\n}) => {\n  _s();\n\n  const [dragging, setDragging] = useState(false);\n  const [boxCord, setBoxCord] = useState([300, 0]);\n\n  const enableDragging = e => {\n    setDragging(true);\n  };\n\n  const beingDragged = e => {\n    if (dragging) {\n      setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n    }\n  };\n\n  const disableDragging = e => {\n    setDragging(false);\n  };\n\n  const codeBlockCustomStyle = {\n    fontSize: 12,\n    backgroundColor: '#18191c',\n    borderRadius: 4,\n    textAlign: 'left',\n    fontFamily: `Inconsolata, Monaco, Consolas, 'Courier New', Courier`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      left: `${boxCord[0]}px`,\n      top: `${boxCord[1]}px`\n    },\n    className: `info-box ${infoBoxOpen ? 'visible' : 'hidden'}`,\n    onMouseMove: beingDragged,\n    onMouseUp: disableDragging,\n    onMouseLeave: disableDragging,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"close-info-icon\",\n      src: closeIcon,\n      onClick: toggleInfoBox,\n      alt: \"Close info box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      onMouseDown: enableDragging,\n      children: selectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), pathfindingAlgoInfo[selectedAlgo].summary || /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 59\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Pseudocode:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n      language: \"python\",\n      style: atomOneDark,\n      showLineNumbers: true,\n      wrapLines: true,\n      customStyle: codeBlockCustomStyle,\n      children: pathfindingAlgoInfo[selectedAlgo].pseudocode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoBox, \"HNOYpJG0zSQ56mBjxQmwLCnhJrk=\");\n\n_c = InfoBox;\nexport default InfoBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoBox\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js"],"names":["useState","pathfindingAlgoInfo","SyntaxHighlighter","atomOneDark","InfoBox","infoBoxOpen","toggleInfoBox","selectedAlgo","dragging","setDragging","boxCord","setBoxCord","enableDragging","e","beingDragged","prevState","movementX","movementY","disableDragging","codeBlockCustomStyle","fontSize","backgroundColor","borderRadius","textAlign","fontFamily","left","top","closeIcon","summary","pseudocode"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,mBAAT,QAAoC,uBAApC;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;AACA,SAASC,WAAT,QAA4B,+CAA5B;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,CAAD,KAAkD;AAAA;;AAC9D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAC,GAAD,EAAM,CAAN,CAAD,CAAtC;;AAEA,QAAMY,cAAc,GAAIC,CAAD,IAAO;AAC1BJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAFD;;AAIA,QAAMK,YAAY,GAAID,CAAD,IAAO;AACxB,QAAIL,QAAJ,EAAc;AACVG,MAAAA,UAAU,CAACI,SAAS,IAAI,CAACA,SAAS,CAAC,CAAD,CAAT,GAAeF,CAAC,CAACG,SAAlB,EAA6BD,SAAS,CAAC,CAAD,CAAT,GAAeF,CAAC,CAACI,SAA9C,CAAd,CAAV;AACH;AACJ,GAJD;;AAMA,QAAMC,eAAe,GAAIL,CAAD,IAAO;AAC3BJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFD;;AAIA,QAAMU,oBAAoB,GAAG;AACzBC,IAAAA,QAAQ,EAAE,EADe;AAEzBC,IAAAA,eAAe,EAAE,SAFQ;AAGzBC,IAAAA,YAAY,EAAE,CAHW;AAIzBC,IAAAA,SAAS,EAAE,MAJc;AAKzBC,IAAAA,UAAU,EAAG;AALY,GAA7B;AAQA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEC,MAAAA,IAAI,EAAG,GAAEf,OAAO,CAAC,CAAD,CAAI,IAAtB;AAA2BgB,MAAAA,GAAG,EAAG,GAAEhB,OAAO,CAAC,CAAD,CAAI;AAA9C,KAAZ;AAAiE,IAAA,SAAS,EAAG,YAAWL,WAAW,GAAG,SAAH,GAAe,QAAS,EAA3H;AAA8H,IAAA,WAAW,EAAES,YAA3I;AAAyJ,IAAA,SAAS,EAAEI,eAApK;AAAqL,IAAA,YAAY,EAAEA,eAAnM;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,GAAG,EAAES,SAAtC;AAAiD,MAAA,OAAO,EAAErB,aAA1D;AAAyE,MAAA,GAAG,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,WAAW,EAAEM,cAAjB;AAAA,gBAAmCL;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGKN,mBAAmB,CAACM,YAAD,CAAnB,CAAkCqB,OAAlC,iBAA6C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHlD,eAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJJ,eAKI,QAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAC,QAA5B;AAAqC,MAAA,KAAK,EAAEzB,WAA5C;AAAyD,MAAA,eAAe,EAAE,IAA1E;AAAgF,MAAA,SAAS,EAAE,IAA3F;AAAiG,MAAA,WAAW,EAAEgB,oBAA9G;AAAA,gBACKlB,mBAAmB,CAACM,YAAD,CAAnB,CAAkCsB;AADvC;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH,CArCD;;GAAMzB,O;;KAAAA,O;AAuCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\nimport SyntaxHighlighter from 'react-syntax-highlighter';\nimport { atomOneDark } from 'react-syntax-highlighter/dist/esm/styles/hljs';\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const enableDragging = (e) => {\n        setDragging(true);\n    };\n\n    const beingDragged = (e) => {\n        if (dragging) {\n            setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n    };\n\n    const codeBlockCustomStyle = {\n        fontSize: 12,\n        backgroundColor: '#18191c',\n        borderRadius: 4,\n        textAlign: 'left',\n        fontFamily: `Inconsolata, Monaco, Consolas, 'Courier New', Courier`\n    };\n\n    return (\n        <div style={{ left: `${boxCord[0]}px`, top: `${boxCord[1]}px` }} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging} onMouseLeave={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} alt='Close info box' />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {pathfindingAlgoInfo[selectedAlgo].summary || <p>No information.</p>}\n            <p>Pseudocode:</p>\n            <SyntaxHighlighter language=\"python\" style={atomOneDark} showLineNumbers={true} wrapLines={true} customStyle={codeBlockCustomStyle}>\n                {pathfindingAlgoInfo[selectedAlgo].pseudocode}\n            </SyntaxHighlighter>\n        </div >\n    )\n}\n\nexport default InfoBox\n"]},"metadata":{},"sourceType":"module"}