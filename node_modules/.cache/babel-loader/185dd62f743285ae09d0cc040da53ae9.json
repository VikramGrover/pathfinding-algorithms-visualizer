{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getPathAlgos, isAlgoUnweighted } from '../utils/util.js';\nimport downArrow from \"../images/down_arrow.svg\";\nimport scale from \"../images/scale.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomDropdown = ({\n  setSelection,\n  items,\n  disabled\n}) => {\n  _s();\n\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n  const [selectedVal, setSelectedVal] = useState(items[0]);\n  const [selectedId, setSelectedId] = useState(0);\n  const isAlgoSelector = getPathAlgos() === items;\n  useEffect(() => {\n    if (disabled) {\n      setSelectedVal(items[0]);\n      setSelectedId(0);\n      setDropDownOpen(false);\n      setSelection(items[0]);\n    }\n  }, [disabled]);\n\n  const toggle = () => {\n    setDropDownOpen(prevState => !prevState);\n  };\n\n  const madeSelection = id => {\n    setDropDownOpen(prevState => !prevState);\n    setSelectedVal(items[id]);\n    setSelectedId(id);\n    setSelection(items[id]);\n  };\n\n  const dropdownItems = [];\n\n  for (let i = 0; i < items.length; i++) {\n    dropdownItems.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`,\n      onClick: () => {\n        madeSelection(i);\n      },\n      children: items[i]\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 28\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`,\n      onClick: disabled ? null : toggle,\n      children: [selectedVal, isAlgoSelector && !isAlgoUnweighted(selectedVal) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-img\",\n        src: scale,\n        title: `${selectedVal} is a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 70\n      }, this), !disabled && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"down-arrow\",\n        src: downArrow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), dropDownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-list\",\n      children: dropdownItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomDropdown, \"mZjW6nGYZ0s16q3knITHUccviNE=\");\n\n_c = CustomDropdown;\nexport default CustomDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDropdown\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js"],"names":["useState","useEffect","getPathAlgos","isAlgoUnweighted","CustomDropdown","setSelection","items","disabled","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","isAlgoSelector","toggle","prevState","madeSelection","id","dropdownItems","i","length","push","scale","downArrow"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { getPathAlgos, isAlgoUnweighted } from '../utils/util.js'\nimport downArrow from '../images/down_arrow.svg';\nimport scale from '../images/scale.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (getPathAlgos() === items);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {isAlgoSelector && !isAlgoUnweighted(selectedVal) && <img className=\"algo-property-img\" src={scale} title={`${selectedVal} is a weighted path-finding algorithm.`}></img>}\n                {!disabled && <img className=\"down-arrow\" src={downArrow}></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n"]},"metadata":{},"sourceType":"module"}