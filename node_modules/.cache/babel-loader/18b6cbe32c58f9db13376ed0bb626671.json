{"ast":null,"code":"import { getNodeTypeEnum, getNeighbourNodes, createPath } from '../../utils/util.js';\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  let queue = [startCord];\n  let visited = {\n    [startCord]: 1\n  };\n  let prevNodes = {};\n\n  while (queue.length > 0) {\n    const currCord = queue.pop();\n    const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n    for (const neighbour of neighbours) {\n      if (neighbour in visited) {\n        continue;\n      }\n\n      prevNodes[neighbour] = currCord;\n      queue.unshift(neighbour);\n      visited[neighbour] = 1;\n\n      if (neighbour === targetCord) {\n        return createPath(startCord, targetCord, prevNodes);\n      }\n\n      setTimeout(() => {\n        setGridState(prevState => ({ ...prevState,\n          [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')]\n        }));\n      }, timeout);\n    }\n  }\n\n  return [];\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/bfs.js"],"names":["getNodeTypeEnum","getNeighbourNodes","createPath","bfs","startCord","targetCord","gridState","setGridState","rows","cols","timeout","queue","visited","prevNodes","length","currCord","pop","neighbours","neighbour","unshift","setTimeout","prevState"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,iBAA1B,EAA6CC,UAA7C,QAA+D,qBAA/D;AAEA,OAAO,MAAMC,GAAG,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,IAAjD,EAAuDC,IAAvD,EAA6DC,OAA7D,KAAyE;AACxF,MAAIC,KAAK,GAAG,CAACP,SAAD,CAAZ;AACA,MAAIQ,OAAO,GAAG;AAAE,KAACR,SAAD,GAAa;AAAf,GAAd;AACA,MAAIS,SAAS,GAAG,EAAhB;;AAEA,SAAOF,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACrB,UAAMC,QAAQ,GAAGJ,KAAK,CAACK,GAAN,EAAjB;AACA,UAAMC,UAAU,GAAGhB,iBAAiB,CAACc,QAAD,EAAWP,IAAX,EAAiBC,IAAjB,EAAuBH,SAAvB,CAApC;;AAEA,SAAK,MAAMY,SAAX,IAAwBD,UAAxB,EAAoC;AAChC,UAAIC,SAAS,IAAIN,OAAjB,EAA0B;AACtB;AACH;;AAEDC,MAAAA,SAAS,CAACK,SAAD,CAAT,GAAuBH,QAAvB;AACAJ,MAAAA,KAAK,CAACQ,OAAN,CAAcD,SAAd;AACAN,MAAAA,OAAO,CAACM,SAAD,CAAP,GAAqB,CAArB;;AAEA,UAAIA,SAAS,KAAKb,UAAlB,EAA8B;AAC1B,eAAOH,UAAU,CAACE,SAAD,EAAYC,UAAZ,EAAwBQ,SAAxB,CAAjB;AACH;;AAIDO,MAAAA,UAAU,CAAC,MAAM;AACbb,QAAAA,YAAY,CAACc,SAAS,KAAK,EAAE,GAAGA,SAAL;AAAgB,WAACN,QAAD,GAAY,CAACf,eAAe,CAAC,SAAD,CAAhB,EAA6BA,eAAe,CAAC,MAAD,CAA5C;AAA5B,SAAL,CAAV,CAAZ;AACH,OAFS,EAEPU,OAFO,CAAV;AAGH;AACJ;;AAED,SAAO,EAAP;AACH,CA/BM","sourcesContent":["import { getNodeTypeEnum, getNeighbourNodes, createPath } from '../../utils/util.js'\n\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n\n\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n"]},"metadata":{},"sourceType":"module"}