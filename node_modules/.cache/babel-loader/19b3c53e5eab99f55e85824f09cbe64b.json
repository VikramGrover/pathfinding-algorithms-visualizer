{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeColor, getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  nodeState,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    const currNodeState = nodeState;\n\n    if (currNodeState[0] === getNodeTypeEnum('none')) {\n      // setState(prevState => ([getNodeTypeEnum('obstacle'), ...prevState]));\n      setDraggingSelection(getNodeTypeEnum('obstacle')); // setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...prevState]);\n\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]]\n      }));\n      return;\n    } else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n      // setState(prevState => (prevState.slice(1)));\n      // setNodeState(nodeId, currNodeState[1]);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n      return;\n    }\n\n    setDraggingSelection(currNodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n      // setState(prevState => ([getNodeTypeEnum('obstacle'), ...prevState]));\n      // setNodeState(nodeId, getNodeTypeEnum('obstacle'));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]]\n      }));\n    } else if (draggingSelection === getNodeTypeEnum('start')) {\n      // setState(prevState => ([getNodeTypeEnum('start'), ...prevState]));\n      // setNodeState(nodeId, getNodeTypeEnum('start'));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]]\n      }));\n    } else if (draggingSelection === getNodeTypeEnum('target')) {\n      // setState(prevState => ([getNodeTypeEnum('target'), ...prevState]));\n      // setNodeState(nodeId, getNodeTypeEnum('target'));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]]\n      }));\n    }\n  };\n\n  const mouseLeft = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n      // setNodeState(nodeId, currNodeState[1]);\n      // setState(prevState => (prevState.slice(1)));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection !== getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('none'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: { ...nodeDim,\n      backgroundColor: getNodeColor(nodeState[0])\n    },\n    className: \"node\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: { ...nodeDim,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: mouseDowned,\n      onMouseUp: mouseUped,\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeColor","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","nodeDim","width","height","imgDim","mouseDowned","currNodeState","prevState","slice","mouseEntered","mouseLeft","mouseUped","backgroundColor","position","top","left"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeColor, getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        const currNodeState = nodeState;\n\n        if (currNodeState[0] === getNodeTypeEnum('none')) {\n            // setState(prevState => ([getNodeTypeEnum('obstacle'), ...prevState]));\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            // setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...prevState]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]] }));\n            return;\n        }\n        else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n            // setState(prevState => (prevState.slice(1)));\n            // setNodeState(nodeId, currNodeState[1]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n\n        setDraggingSelection(currNodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n            // setState(prevState => ([getNodeTypeEnum('obstacle'), ...prevState]));\n            // setNodeState(nodeId, getNodeTypeEnum('obstacle'));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            // setState(prevState => ([getNodeTypeEnum('start'), ...prevState]));\n            // setNodeState(nodeId, getNodeTypeEnum('start'));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            // setState(prevState => ([getNodeTypeEnum('target'), ...prevState]));\n            // setNodeState(nodeId, getNodeTypeEnum('target'));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n        }\n    };\n\n    const mouseLeft = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            // setNodeState(nodeId, currNodeState[1]);\n            // setState(prevState => (prevState.slice(1)));\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim, backgroundColor: getNodeColor(nodeState[0]) }} className='node' >\n            {/* {nodeState[0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {nodeState[0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {nodeState[0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />} */}\n            <div style={{ ...nodeDim, position: 'absolute', top: 0, left: 0 }} onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}