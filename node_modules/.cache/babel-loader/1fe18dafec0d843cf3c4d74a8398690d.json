{"ast":null,"code":"import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _algoFunctions,_nodeColorClass,_nodeWeight,_obsEnum;import{dijkstras}from'../algorithms/path_finding/dijkstras.js';import{dfs}from'../algorithms/path_finding/dfs.js';import{bfs}from'../algorithms/path_finding/bfs.js';import{aStar}from'../algorithms/path_finding/aStar.js';// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var DIJKSTRAS=\"Dijkstra's\";var ASTAR=\"A* (A-Star)\";var BFS=\"BFS\";var DFS=\"DFS\";var algoFunctions=(_algoFunctions={},_defineProperty(_algoFunctions,DIJKSTRAS,dijkstras),_defineProperty(_algoFunctions,ASTAR,aStar),_defineProperty(_algoFunctions,BFS,bfs),_defineProperty(_algoFunctions,DFS,dfs),_algoFunctions);Object.freeze(algoFunctions);export{DIJKSTRAS,ASTAR,BFS,DFS,algoFunctions};var allPathAlgos=[DIJKSTRAS,ASTAR,BFS,DFS];Object.freeze(allPathAlgos);var unweightedPathAlgos=[DFS,BFS];Object.freeze(unweightedPathAlgos);var optimalPathAlgos=[DIJKSTRAS,ASTAR,BFS];Object.freeze(optimalPathAlgos);export{allPathAlgos,unweightedPathAlgos,optimalPathAlgos};// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nvar ALGO1=\"ALGO 1\";var ALGO2=\"ALGO 2\";var terrainAlgos=[ALGO1,ALGO2];Object.freeze(terrainAlgos);export{ALGO1,ALGO2,terrainAlgos};var pathfindingAlgoInfo=_defineProperty({},DIJKSTRAS,{'description':/*#__PURE__*/_jsxs(\"p\",{children:[\"Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the \",/*#__PURE__*/_jsx(\"strong\",{children:\"lowest distance\"}),\", calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.\"]}),'optimality':/*#__PURE__*/_jsx(\"p\",{children:\"Dijkstra's is guranteed to find the shortest path.\"})});Object.freeze(pathfindingAlgoInfo);export{pathfindingAlgoInfo};// NODE TYPES ------------------------------------------------------------\nvar nodeTypeEnum={'path':0,'visited':1,'visiting':2,'none':3,'target':4,'start':5,'remObstacle':6,'wall':7,'weighted100':8,'weighted80':9,'weighted60':10,'weighted40':11,'weighted20':12};Object.freeze(nodeTypeEnum);export{nodeTypeEnum};var nodeColorClass=(_nodeColorClass={},_defineProperty(_nodeColorClass,nodeTypeEnum.none,'none'),_defineProperty(_nodeColorClass,nodeTypeEnum.target,'target'),_defineProperty(_nodeColorClass,nodeTypeEnum.wall,'wall'),_defineProperty(_nodeColorClass,nodeTypeEnum.visiting,'visiting'),_defineProperty(_nodeColorClass,nodeTypeEnum.start,'start'),_defineProperty(_nodeColorClass,nodeTypeEnum.visited,'visited'),_defineProperty(_nodeColorClass,nodeTypeEnum.path,'path'),_defineProperty(_nodeColorClass,nodeTypeEnum.weighted100,'weighted100'),_defineProperty(_nodeColorClass,nodeTypeEnum.weighted80,'weighted80'),_defineProperty(_nodeColorClass,nodeTypeEnum.weighted60,'weighted60'),_defineProperty(_nodeColorClass,nodeTypeEnum.weighted40,'weighted40'),_defineProperty(_nodeColorClass,nodeTypeEnum.weighted20,'weighted20'),_nodeColorClass);Object.freeze(nodeColorClass);export{nodeColorClass};var nodeWeight=(_nodeWeight={},_defineProperty(_nodeWeight,nodeTypeEnum.none,1),_defineProperty(_nodeWeight,nodeTypeEnum.target,1),_defineProperty(_nodeWeight,nodeTypeEnum.wall,Infinity),_defineProperty(_nodeWeight,nodeTypeEnum.start,1),_defineProperty(_nodeWeight,nodeTypeEnum.weighted100,100),_defineProperty(_nodeWeight,nodeTypeEnum.weighted80,80),_defineProperty(_nodeWeight,nodeTypeEnum.weighted60,60),_defineProperty(_nodeWeight,nodeTypeEnum.weighted40,40),_defineProperty(_nodeWeight,nodeTypeEnum.weighted20,20),_nodeWeight);Object.freeze(nodeWeight);export{nodeWeight};// OBSTACLE TYPES --------------------------------------------------------\nvar obstacleTypes=['Wall (âˆž)','Weighted (100)','Weighted (80)','Weighted (60)','Weighted (40)','Weighted (20)'];var obsEnum=(_obsEnum={},_defineProperty(_obsEnum,obstacleTypes[0],nodeColorClass[nodeTypeEnum.wall]),_defineProperty(_obsEnum,obstacleTypes[1],nodeColorClass[nodeTypeEnum.weighted100]),_defineProperty(_obsEnum,obstacleTypes[2],nodeColorClass[nodeTypeEnum.weighted80]),_defineProperty(_obsEnum,obstacleTypes[3],nodeColorClass[nodeTypeEnum.weighted60]),_defineProperty(_obsEnum,obstacleTypes[4],nodeColorClass[nodeTypeEnum.weighted40]),_defineProperty(_obsEnum,obstacleTypes[5],nodeColorClass[nodeTypeEnum.weighted20]),_obsEnum);Object.freeze(obsEnum);export{obstacleTypes,obsEnum};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js"],"names":["dijkstras","dfs","bfs","aStar","DIJKSTRAS","ASTAR","BFS","DFS","algoFunctions","Object","freeze","allPathAlgos","unweightedPathAlgos","optimalPathAlgos","ALGO1","ALGO2","terrainAlgos","pathfindingAlgoInfo","nodeTypeEnum","nodeColorClass","none","target","wall","visiting","start","visited","path","weighted100","weighted80","weighted60","weighted40","weighted20","nodeWeight","Infinity","obstacleTypes","obsEnum"],"mappings":"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","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = \"A* (A-Star)\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs\n}\nObject.freeze(algoFunctions);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, algoFunctions };\n\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\n\nexport { ALGO1, ALGO2, terrainAlgos };\n\nconst pathfindingAlgoInfo = {\n    [DIJKSTRAS]: {\n        'description': <p>Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the <strong>lowest distance</strong>, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.</p>,\n        'optimality': <p>Dijkstra's is guranteed to find the shortest path.</p>\n    }\n}\nObject.freeze(pathfindingAlgoInfo);\nexport { pathfindingAlgoInfo };\n\n// NODE TYPES ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (âˆž)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n}\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };"]},"metadata":{},"sourceType":"module"}