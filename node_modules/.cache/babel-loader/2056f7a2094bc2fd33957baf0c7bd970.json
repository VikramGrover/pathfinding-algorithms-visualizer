{"ast":null,"code":"import { getNodeTypeEnum, getNodeWeight } from '../../utils/util.js';\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n  let totalCosts = {};\n  let prevNodes = {};\n  let minPQ = {};\n  let visited = {};\n  totalCosts[startCord] = 0;\n  minPQ[startCord] = 0;\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let cord = `${x}:${y}`;\n\n      if (cord !== startCord) {\n        totalCosts[cord] = Infinity;\n      }\n    }\n  }\n\n  while (Object.keys(minPQ).length) {\n    const minKey = findMinPriorityNode(minPQ);\n    delete minPQ[minKey];\n    visited[minKey] = 1;\n    setGridState(prevState => ({ ...prevState,\n      [minKey]: getNodeTypeEnum('visited')\n    }));\n\n    if (minKey === targetCord) {\n      console.log(\"WE ARE DONE DIJKSTRAS\");\n      return;\n    }\n\n    const neighbours = getNeighbourNodes(minKey, rows, cols);\n\n    for (const neighbour of neighbours) {\n      if (!(neighbour in visited)) {\n        const altPath = totalCosts[neighbour] + getNodeWeight(gridState[neighbour]);\n\n        if (altPath < totalCosts[neighbour]) {\n          totalCosts[neighbour] = altPath;\n          prevNodes[neighbour] = minKey;\n          minPQ[neighbour] = altPath;\n        }\n      } else if (!(neighbour in minPQ)) {\n        minPQ[neighbour] = totalCosts[minKey] + getNodeWeight(gridState[neighbour]);\n      }\n    }\n  }\n};\n\nconst getNeighbourNodes = (node, rows, cols) => {\n  const row = parseInt(node.split(':')[0]);\n  const col = parseInt(node.split(':')[1]);\n  let res = [];\n\n  if (row - 1 >= 0) {\n    res.push(`${row - 1}:${col}`);\n  }\n\n  if (row + 1 < rows) {\n    res.push(`${row + 1}:${col}`);\n  }\n\n  if (col - 1 >= 0) {\n    res.push(`${row}:${col - 1}`);\n  }\n\n  if (col + 1 < cols) {\n    res.push(`${row}:${col + 1}`);\n  }\n\n  return res;\n};\n\nconst findMinPriorityNode = minPQ => {\n  let minPriority = Math.min(...Object.values(minPQ));\n\n  for (const key in minPQ) {\n    if (minPQ[key] == minPriority) {\n      return key;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js"],"names":["getNodeTypeEnum","getNodeWeight","dijkstras","startCord","targetCord","gridState","setGridState","rows","cols","totalCosts","prevNodes","minPQ","visited","x","y","cord","Infinity","Object","keys","length","minKey","findMinPriorityNode","prevState","console","log","neighbours","getNeighbourNodes","neighbour","altPath","node","row","parseInt","split","col","res","push","minPriority","Math","min","values","key"],"mappings":"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","sourcesContent":["import { getNodeTypeEnum, getNodeWeight } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n\n        visited[minKey] = 1;\n        setGridState(prevState => ({ ...prevState, [minKey]: getNodeTypeEnum('visited') }));\n\n        if (minKey === targetCord) {\n            console.log(\"WE ARE DONE DIJKSTRAS\");\n            return;\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols);\n        for (const neighbour of neighbours) {\n            if (!(neighbour in visited)) {\n                const altPath = totalCosts[neighbour] + getNodeWeight(gridState[neighbour]);\n\n                if (altPath < totalCosts[neighbour]) {\n                    totalCosts[neighbour] = altPath;\n                    prevNodes[neighbour] = minKey;\n                    minPQ[neighbour] = altPath;\n                }\n            }\n            else if (!(neighbour in minPQ)) {\n                minPQ[neighbour] = totalCosts[minKey] + getNodeWeight(gridState[neighbour]);\n            }\n        }\n    }\n};\n\nconst getNeighbourNodes = (node, rows, cols) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if (row - 1 >= 0) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if (row + 1 < rows) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if (col - 1 >= 0) {\n        res.push(`${row}:${col - 1}`)\n    }\n    if (col + 1 < cols) {\n        res.push(`${row}:${col + 1}`)\n    }\n\n    return res;\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] == minPriority) {\n            return key;\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}