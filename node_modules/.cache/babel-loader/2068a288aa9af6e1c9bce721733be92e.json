{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState, useLayoutEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [size, setSize] = useState([0, 0]);\n  const [gridState, setGridState] = useState({});\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerHeight, window.innerWidth]);\n    }\n\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  setSize([window.innerHeight, window.innerWidth]);\n  const nodeSize = 35;\n  const topGridMargin = 200;\n  const sideGridMargin = 100;\n  const adjustedWinHeight = size[0] - topGridMargin;\n  const adjustedWinWidth = size[1] - sideGridMargin;\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n  console.log(rows, cols);\n  let gridMap = {};\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeState = [getNodeTypeEnum('none')];\n\n      if (x === 0 && y === 0) {\n        nodeState.unshift(getNodeTypeEnum('start'));\n      } else if (x === rows - 1 && y === cols - 1) {\n        nodeState.unshift(getNodeTypeEnum('target'));\n      }\n\n      gridMap[`${x}:${y}`] = nodeState;\n    }\n  }\n\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n  const [selectedObstacle, setSelectedObstacle] = useState(defaultSelectedObstacle);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"dlP8ogZjCETuFD/xxYR6IeO9l20=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","useLayoutEffect","App","size","setSize","gridState","setGridState","updateSize","window","innerHeight","innerWidth","addEventListener","removeEventListener","nodeSize","topGridMargin","sideGridMargin","adjustedWinHeight","adjustedWinWidth","rows","parseInt","cols","console","log","gridMap","x","y","nodeState","unshift","defaultSelectedObstacle","selectedObstacle","setSelectedObstacle"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useLayoutEffect } from 'react'\n\nfunction App() {\n  const [size, setSize] = useState([0, 0]);\n  const [gridState, setGridState] = useState({});\n\n  useLayoutEffect(() => {\n    function updateSize() {\n      setSize([window.innerHeight, window.innerWidth]);\n    }\n    window.addEventListener('resize', updateSize);\n    updateSize();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n\n  setSize([window.innerHeight, window.innerWidth]);\n  const nodeSize = 35;\n  const topGridMargin = 200;\n  const sideGridMargin = 100;\n\n  const adjustedWinHeight = size[0] - topGridMargin;\n  const adjustedWinWidth = size[1] - sideGridMargin;\n\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n  console.log(rows, cols);\n\n  let gridMap = {};\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeState = [getNodeTypeEnum('none')];\n      if (x === 0 && y === 0) {\n        nodeState.unshift(getNodeTypeEnum('start'));\n      }\n      else if (x === (rows - 1) && y === (cols - 1)) {\n        nodeState.unshift(getNodeTypeEnum('target'));\n      }\n\n      gridMap[`${x}:${y}`] = nodeState;\n    }\n  }\n\n\n\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n\n  const [selectedObstacle, setSelectedObstacle] = useState(defaultSelectedObstacle);\n\n  return (\n    <>\n      <Header />\n      <Grid rows={rows} cols={cols} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}