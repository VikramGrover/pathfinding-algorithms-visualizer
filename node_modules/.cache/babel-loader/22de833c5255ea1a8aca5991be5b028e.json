{"ast":null,"code":"import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Grid from'./components/Grid.js';import Header from'./components/Header.js';import InfoBox from'./components/InfoBox.js';import{allPathAlgos,nodeTypeEnum}from'./utils/constants.js';import{useState,useEffect}from'react';import{isAlgoUnweighted}from'./utils/helper.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),gridState=_useState2[0],setGridState=_useState2[1];var _useState3=useState('wall'),_useState4=_slicedToArray(_useState3,2),selectedObstacle=_useState4[0],setSelectedObstacle=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),infoBoxOpen=_useState6[0],setInfoBoxOpen=_useState6[1];var _useState7=useState(allPathAlgos[0]),_useState8=_slicedToArray(_useState7,2),selectedAlgo=_useState8[0],setSelectedAlgo=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),rows=_useState10[0],setRows=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),cols=_useState12[0],setCols=_useState12[1];var _useState13=useState('0:0'),_useState14=_slicedToArray(_useState13,2),startCord=_useState14[0],setStartCord=_useState14[1];var _useState15=useState('0:0'),_useState16=_slicedToArray(_useState15,2),targetCord=_useState16[0],setTargetCord=_useState16[1];var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),runningAlgo=_useState18[0],setRunningAlgo=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),weightedObsDisabled=_useState20[0],setWeightedObsDisabled=_useState20[1];var margin=30;var nodeSize=28;var navBarHeight=90;useEffect(function(){console.log(\"RESETTING BOARD\");resetBoard();},[]);// useEffect(() => {\n//   window.addEventListener(\"resize\", resetBoard);\n//   return () => window.removeEventListener(\"resize\", resetBoard)\n// }, []);\nvar resetBoard=function resetBoard(){var adjustedWinHeight=window.innerHeight-(navBarHeight+margin*3);var adjustedWinWidth=window.innerWidth-2*margin;var rows=parseInt(adjustedWinHeight/(nodeSize+1));var cols=parseInt(adjustedWinWidth/(nodeSize+1));setRunningAlgo(false);setRows(rows);setCols(cols);setStartCord('0:0');setTargetCord(\"\".concat(rows-1,\":\").concat(cols-1));var gridMap={};for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var nodeState=[nodeTypeEnum.none];if(x===0&&y===0){nodeState.unshift(nodeTypeEnum.start);}else if(x===rows-1&&y===cols-1){nodeState.unshift(nodeTypeEnum.target);}gridMap[\"\".concat(x,\":\").concat(y)]=nodeState;}}setGridState(gridMap);};var clearPath=function clearPath(){console.log(\"CLEARING PATH\");for(var x=0;x<rows;x++){var _loop=function _loop(y){var id=\"\".concat(x,\":\").concat(y);var nodeState=gridState[id][0];var nodeStateFunc=gridState[id][1];var currState=nodeState[0];if((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&nodeState[1]<=nodeTypeEnum.visiting){nodeState.splice(1,1);}nodeStateFunc(function(prevState){return nodeState;});};for(var y=0;y<cols;y++){_loop(y);}}};var clearObstacles=function clearObstacles(){for(var x=0;x<rows;x++){var _loop2=function _loop2(y){var id=\"\".concat(x,\":\").concat(y);var nodeState=gridState[id][0];var nodeStateFunc=gridState[id][1];var currState=nodeState[0];// check under start and target node for obstacle\nif((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&nodeState[1]>=nodeTypeEnum.wall){nodeState.splice(1,1);nodeStateFunc(function(prev){return nodeState;});setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},id,[nodeState,prevState[id][1]]));});return\"continue\";}if(currState<=nodeTypeEnum.visiting){currState=nodeState[1];}if(currState>=nodeTypeEnum.wall){nodeStateFunc(function(prev){return[nodeTypeEnum.none];});setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},id,[[nodeTypeEnum.none],prevState[id][1]]));});}};for(var y=0;y<cols;y++){var _ret=_loop2(y);if(_ret===\"continue\")continue;}}};var clearWeightedObstacles=function clearWeightedObstacles(){for(var x=0;x<rows;x++){var _loop3=function _loop3(y){var id=\"\".concat(x,\":\").concat(y);var nodeState=gridState[id][0];var nodeStateFunc=gridState[id][1];var currState=nodeState[0];// check under start and target node for weighted obstacle\nif((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&nodeState[1]>nodeTypeEnum.wall){nodeState.splice(1,1);nodeStateFunc(function(prev){return nodeState;});setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},id,[nodeState,prevState[id][1]]));});return\"continue\";}if(currState<=nodeTypeEnum.visiting){currState=nodeState[1];}if(currState>nodeTypeEnum.wall){nodeStateFunc(function(prev){return[nodeTypeEnum.none];});setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},id,[[nodeTypeEnum.none],prevState[id][1]]));});}};for(var y=0;y<cols;y++){var _ret2=_loop3(y);if(_ret2===\"continue\")continue;}}};var toggleInfoBox=function toggleInfoBox(){setInfoBoxOpen(function(prevState){return!prevState;});};var alteredSetSelectedAlgo=function alteredSetSelectedAlgo(algoName){var unweightedAlgo=isAlgoUnweighted(algoName);setWeightedObsDisabled(unweightedAlgo);setSelectedAlgo(algoName);if(unweightedAlgo){clearPath();clearWeightedObstacles();}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{rows:rows,cols:cols,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,padding:margin,height:navBarHeight,gridState:gridState,setGridState:setGridState,startCord:startCord,targetCord:targetCord,clearObstacles:clearObstacles,clearPath:clearPath,setSelectedObstacle:setSelectedObstacle,weightedObsDisabled:weightedObsDisabled,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo,setSelectedAlgo:alteredSetSelectedAlgo}),/*#__PURE__*/_jsx(Grid,{rows:rows,cols:cols,padding:margin,nodeSize:nodeSize,setGridState:setGridState,selectedObstacle:selectedObstacle,setStartCord:setStartCord,setTargetCord:setTargetCord,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(InfoBox,{infoBoxOpen:infoBoxOpen,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo})]});}export default App;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","InfoBox","allPathAlgos","nodeTypeEnum","useState","useEffect","isAlgoUnweighted","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","infoBoxOpen","setInfoBoxOpen","selectedAlgo","setSelectedAlgo","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","weightedObsDisabled","setWeightedObsDisabled","margin","nodeSize","navBarHeight","console","log","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","none","unshift","start","target","clearPath","id","nodeStateFunc","currState","visiting","splice","prevState","clearObstacles","wall","prev","clearWeightedObstacles","toggleInfoBox","alteredSetSelectedAlgo","algoName","unweightedAlgo"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    console.log(\"CLEARING PATH\");\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] <= nodeTypeEnum.visiting)) {\n          nodeState.splice(1, 1);\n        }\n        nodeStateFunc(prevState => nodeState);\n      }\n    }\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] >= nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] > nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearPath();\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}