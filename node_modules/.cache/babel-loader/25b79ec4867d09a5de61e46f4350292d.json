{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport closeIcon from \"../images/close.svg\";\nimport { pathfindingAlgoInfo } from '../utils/constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfoBox = ({\n  infoBoxOpen,\n  toggleInfoBox,\n  selectedAlgo\n}) => {\n  _s();\n\n  const [dragging, setDragging] = useState(false);\n  const [prevMouseCord, setPrevMouseCord] = useState([0, 0]);\n  const [boxCord, setBoxCord] = useState([300, 0]);\n\n  const enableDragging = e => {\n    console.log(\"dragging enabled\");\n    setDragging(true);\n    setPrevMouseCord([e.clientX, e.clientY]);\n  };\n\n  const beingDragged = e => {\n    if (dragging) {\n      const xDiff = e.clientX - prevMouseCord[0];\n      const yDiff = e.clientY - prevMouseCord[1];\n      setBoxCord(prevState => [prevState[0] + xDiff, prevState[1] + yDiff]);\n      setPrevMouseCord([e.clientX, e.clientY]);\n    }\n  };\n\n  const disableDragging = e => {\n    setDragging(false);\n    console.log(\"dragging disabled\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      left: boxCord[0],\n      top: boxCord[1]\n    },\n    className: `info-box ${infoBoxOpen ? 'visible' : 'hidden'}`,\n    onMouseMove: beingDragged,\n    onMouseUp: disableDragging,\n    onMouseLeave: disableDragging,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"close-info-icon\",\n      src: closeIcon,\n      onClick: toggleInfoBox,\n      alt: \"Close info box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      onMouseDown: enableDragging,\n      children: selectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this), pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description || /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 102\n    }, this), pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoBox, \"qxxjb0N6+u/1dRO97AyHNw+d4a0=\");\n\n_c = InfoBox;\nexport default InfoBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoBox\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js"],"names":["useState","pathfindingAlgoInfo","InfoBox","infoBoxOpen","toggleInfoBox","selectedAlgo","dragging","setDragging","prevMouseCord","setPrevMouseCord","boxCord","setBoxCord","enableDragging","e","console","log","clientX","clientY","beingDragged","xDiff","yDiff","prevState","disableDragging","left","top","closeIcon","description","optimality"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,mBAAT,QAAoC,uBAApC;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,CAAD,KAAkD;AAAA;;AAC9D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,aAAD,EAAgBC,gBAAhB,IAAoCT,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CAAlD;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBX,QAAQ,CAAC,CAAC,GAAD,EAAM,CAAN,CAAD,CAAtC;;AAEA,QAAMY,cAAc,GAAIC,CAAD,IAAO;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACAR,IAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,IAAAA,gBAAgB,CAAC,CAACI,CAAC,CAACG,OAAH,EAAYH,CAAC,CAACI,OAAd,CAAD,CAAhB;AACH,GAJD;;AAMA,QAAMC,YAAY,GAAIL,CAAD,IAAO;AACxB,QAAIP,QAAJ,EAAc;AACV,YAAMa,KAAK,GAAGN,CAAC,CAACG,OAAF,GAAYR,aAAa,CAAC,CAAD,CAAvC;AACA,YAAMY,KAAK,GAAGP,CAAC,CAACI,OAAF,GAAYT,aAAa,CAAC,CAAD,CAAvC;AAEAG,MAAAA,UAAU,CAACU,SAAS,IAAI,CAACA,SAAS,CAAC,CAAD,CAAT,GAAeF,KAAhB,EAAuBE,SAAS,CAAC,CAAD,CAAT,GAAeD,KAAtC,CAAd,CAAV;AACAX,MAAAA,gBAAgB,CAAC,CAACI,CAAC,CAACG,OAAH,EAAYH,CAAC,CAACI,OAAd,CAAD,CAAhB;AACH;AACJ,GARD;;AAUA,QAAMK,eAAe,GAAIT,CAAD,IAAO;AAC3BN,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACH,GAHD;;AAKA,sBACI;AAAK,IAAA,KAAK,EAAE;AACRQ,MAAAA,IAAI,EAAEb,OAAO,CAAC,CAAD,CADL;AACUc,MAAAA,GAAG,EAAEd,OAAO,CAAC,CAAD;AADtB,KAAZ;AAEG,IAAA,SAAS,EAAG,YAAWP,WAAW,GAAG,SAAH,GAAe,QAAS,EAF7D;AAEgE,IAAA,WAAW,EAAEe,YAF7E;AAE2F,IAAA,SAAS,EAAEI,eAFtG;AAEuH,IAAA,YAAY,EAAEA,eAFrI;AAAA,4BAGI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,GAAG,EAAEG,SAAtC;AAAiD,MAAA,OAAO,EAAErB,aAA1D;AAAyE,MAAA,GAAG,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAI,MAAA,WAAW,EAAEQ,cAAjB;AAAA,gBAAmCP;AAAnC;AAAA;AAAA;AAAA;AAAA,YAJJ,EAKMJ,mBAAmB,CAACI,YAAD,CAAnB,IAAqCJ,mBAAmB,CAACI,YAAD,CAAnB,CAAkCqB,WAAxE,iBAAwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAL7F,EAMMzB,mBAAmB,CAACI,YAAD,CAAnB,IAAqCJ,mBAAmB,CAACI,YAAD,CAAnB,CAAkCsB,UAN7E;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CApCD;;GAAMzB,O;;KAAAA,O;AAsCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [prevMouseCord, setPrevMouseCord] = useState([0, 0]);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const enableDragging = (e) => {\n        console.log(\"dragging enabled\");\n        setDragging(true);\n        setPrevMouseCord([e.clientX, e.clientY]);\n    };\n\n    const beingDragged = (e) => {\n        if (dragging) {\n            const xDiff = e.clientX - prevMouseCord[0];\n            const yDiff = e.clientY - prevMouseCord[1];\n\n            setBoxCord(prevState => [prevState[0] + xDiff, prevState[1] + yDiff]);\n            setPrevMouseCord([e.clientX, e.clientY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n        console.log(\"dragging disabled\");\n    };\n\n    return (\n        <div style={{\n            left: boxCord[0], top: boxCord[1]\n        }} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging} onMouseLeave={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} alt='Close info box' />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description) || <p>No information.</p>}\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality)}\n        </div >\n    )\n}\n\nexport default InfoBox\n"]},"metadata":{},"sourceType":"module"}