{"ast":null,"code":"import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _nodeColorClass,_nodeWeight;var nodeTypeEnum={'none':0,'target':1,'path':2,'start':3,'remObstacle':4,'visited':5,'wall':6,'weighted-100':7,'weighted-80':8,'weighted-60':9,'weighted-40':10,'weighted-20':11};Object.freeze(nodeTypeEnum);var nodeColorClass=(_nodeColorClass={},_defineProperty(_nodeColorClass,nodeTypeEnum.none,'empty'),_defineProperty(_nodeColorClass,nodeTypeEnum.target,'target'),_defineProperty(_nodeColorClass,nodeTypeEnum.wall,'wall'),_defineProperty(_nodeColorClass,nodeTypeEnum.start,'start'),_defineProperty(_nodeColorClass,nodeTypeEnum.visited,'visited'),_defineProperty(_nodeColorClass,nodeTypeEnum.path,'path'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-100\"],'weighted-100'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-80\"],'weighted-80'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-60\"],'weighted-60'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-40\"],'weighted-40'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-20\"],'weighted-20'),_nodeColorClass);Object.freeze(nodeColorClass);var nodeWeight=(_nodeWeight={},_defineProperty(_nodeWeight,nodeTypeEnum.none,1),_defineProperty(_nodeWeight,nodeTypeEnum.target,1),_defineProperty(_nodeWeight,nodeTypeEnum.wall,Infinity),_defineProperty(_nodeWeight,nodeTypeEnum.start,1),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-100\"],100),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-80\"],80),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-60\"],60),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-40\"],40),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-20\"],20),_nodeWeight);Object.freeze(nodeWeight);var pathAlgos=[\"Dijkstra's\",\"A-Star\",\"BFS\",\"DFS\"];var terrainAlgos=[\"Algo 1\",\"Algo 2\"];var obstacleTypes=['Wall (∞)','Weighted (100)','Weighted (80)','Weighted (60)','Weighted (40)','Weighted (20)'];var obsEnum={'Wall (∞)':'wall','Weighted (100)':'weighted-100','Weighted (80)':'weighted-80','Weighted (60)':'weighted-60','Weighted (40)':'weighted-40','Weighted (20)':'weighted-20'};export var getNodeTypeEnum=function getNodeTypeEnum(key){return nodeTypeEnum[key];};export var getNodeColorClass=function getNodeColorClass(key){return nodeColorClass[key];};export var getNodeWeight=function getNodeWeight(key){return nodeWeight[key];};export var shuffleArray=function shuffleArray(array){for(var i=array.length-1;i>0;i--){var j=Math.floor(Math.random()*(i+1));var temp=array[i];array[i]=array[j];array[j]=temp;}};export var getPathAlgos=function getPathAlgos(){return pathAlgos;};export var getTerrainAlgos=function getTerrainAlgos(){return terrainAlgos;};export var getObstacleTypes=function getObstacleTypes(){return obstacleTypes;};export var getObstacleEnum=function getObstacleEnum(key){return obsEnum[key];};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getNodeColorClass","getNodeWeight","shuffleArray","array","i","length","j","Math","floor","random","temp","getPathAlgos","getTerrainAlgos","getObstacleTypes","getObstacleEnum"],"mappings":"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","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'wall': 6,\n    'weighted-100': 7,\n    'weighted-80': 8,\n    'weighted-60': 9,\n    'weighted-40': 10,\n    'weighted-20': 11\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n"]},"metadata":{},"sourceType":"module"}