{"ast":null,"code":"import { dijkstras } from '../algorithms/path_finding/dijkstras.js';\nconst nodeTypeEnum = {\n  'none': 0,\n  'target': 1,\n  'path': 2,\n  'start': 3,\n  'remObstacle': 4,\n  'visited': 5,\n  'obstacle': 6\n};\nObject.freeze(nodeTypeEnum);\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'empty',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.obstacle]: 'obstacle',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path'\n};\nObject.freeze(nodeColorClass);\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.obstacle]: Infinity,\n  [nodeTypeEnum.start]: 1\n};\nObject.freeze(nodeWeight);\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nexport const getNodeTypeEnum = key => {\n  return nodeTypeEnum[key];\n};\nexport const getNodeColorClass = key => {\n  return nodeColorClass[key];\n};\nexport const getNodeWeight = key => {\n  return nodeWeight[key];\n};\nexport const shuffleArray = array => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};\nexport const getPathAlgos = () => {\n  return pathAlgos;\n};\nexport const getTerrainAlgos = () => {\n  return terrainAlgos;\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["dijkstras","nodeTypeEnum","Object","freeze","nodeColorClass","none","target","obstacle","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","getNodeTypeEnum","key","getNodeColorClass","getNodeWeight","shuffleArray","array","i","length","j","Math","floor","random","temp","getPathAlgos","getTerrainAlgos"],"mappings":"AAAA,SAASA,SAAT,QAA0B,yCAA1B;AAEA,MAAMC,YAAY,GAAG;AACjB,UAAQ,CADS;AAEjB,YAAU,CAFO;AAGjB,UAAQ,CAHS;AAIjB,WAAS,CAJQ;AAKjB,iBAAe,CALE;AAMjB,aAAW,CANM;AAOjB,cAAY;AAPK,CAArB;AASAC,MAAM,CAACC,MAAP,CAAcF,YAAd;AAEA,MAAMG,cAAc,GAAG;AACnB,GAACH,YAAY,CAACI,IAAd,GAAqB,OADF;AAEnB,GAACJ,YAAY,CAACK,MAAd,GAAuB,QAFJ;AAGnB,GAACL,YAAY,CAACM,QAAd,GAAyB,UAHN;AAInB,GAACN,YAAY,CAACO,KAAd,GAAsB,OAJH;AAKnB,GAACP,YAAY,CAACQ,OAAd,GAAwB,SALL;AAMnB,GAACR,YAAY,CAACS,IAAd,GAAqB;AANF,CAAvB;AAQAR,MAAM,CAACC,MAAP,CAAcC,cAAd;AAEA,MAAMO,UAAU,GAAG;AACf,GAACV,YAAY,CAACI,IAAd,GAAqB,CADN;AAEf,GAACJ,YAAY,CAACK,MAAd,GAAuB,CAFR;AAGf,GAACL,YAAY,CAACM,QAAd,GAAyBK,QAHV;AAIf,GAACX,YAAY,CAACO,KAAd,GAAsB;AAJP,CAAnB;AAMAN,MAAM,CAACC,MAAP,CAAcQ,UAAd;AAEA,MAAME,SAAS,GAAG,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,EAAgC,KAAhC,CAAlB;AACA,MAAMC,YAAY,GAAG,CAAC,QAAD,EAAW,QAAX,CAArB;AAEA,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAAS;AACpC,SAAOf,YAAY,CAACe,GAAD,CAAnB;AACH,CAFM;AAIP,OAAO,MAAMC,iBAAiB,GAAID,GAAD,IAAS;AACtC,SAAOZ,cAAc,CAACY,GAAD,CAArB;AACH,CAFM;AAIP,OAAO,MAAME,aAAa,GAAIF,GAAD,IAAS;AAClC,SAAOL,UAAU,CAACK,GAAD,CAAjB;AACH,CAFM;AAIP,OAAO,MAAMG,YAAY,GAAIC,KAAD,IAAW;AACnC,OAAK,IAAIC,CAAC,GAAGD,KAAK,CAACE,MAAN,GAAe,CAA5B,EAA+BD,CAAC,GAAG,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACvC,QAAIE,CAAC,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBL,CAAC,GAAG,CAArB,CAAX,CAAR;AACA,QAAIM,IAAI,GAAGP,KAAK,CAACC,CAAD,CAAhB;AACAD,IAAAA,KAAK,CAACC,CAAD,CAAL,GAAWD,KAAK,CAACG,CAAD,CAAhB;AACAH,IAAAA,KAAK,CAACG,CAAD,CAAL,GAAWI,IAAX;AACH;AACJ,CAPM;AASP,OAAO,MAAMC,YAAY,GAAG,MAAM;AAC9B,SAAOf,SAAP;AACH,CAFM;AAIP,OAAO,MAAMgB,eAAe,GAAG,MAAM;AACjC,SAAOf,YAAP;AACH,CAFM","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\n\nconst nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'obstacle': 6\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.obstacle]: 'obstacle',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.obstacle]: Infinity,\n    [nodeTypeEnum.start]: 1\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\n\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n"]},"metadata":{},"sourceType":"module"}