{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const nodeSize = 35;\n  const topGridMargin = 180;\n  const sideGridMargin = 100;\n  const adjustedWinHeight = window.innerHeight - topGridMargin;\n  const adjustedWinWidth = window.innerWidth - sideGridMargin;\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n\n  const resetBoard = () => {\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  }; // let gridMap = {};\n  // for (let x = 0; x < rows; x++) {\n  //   for (let y = 0; y < cols; y++) {\n  //     let nodeState = [getNodeTypeEnum('none')];\n  //     if (x === 0 && y === 0) {\n  //       nodeState.unshift(getNodeTypeEnum('start'));\n  //     }\n  //     else if (x === (rows - 1) && y === (cols - 1)) {\n  //       nodeState.unshift(getNodeTypeEnum('target'));\n  //     }\n  //     gridMap[`${x}:${y}`] = nodeState;\n  //   }\n  // }\n\n\n  const [gridState, setGridState] = useState({});\n  resetBoard();\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n  const [selectedObstacle, setSelectedObstacle] = useState(defaultSelectedObstacle);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState(`${rows - 1}:${cols - 1}`);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      gridState: gridState,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      resetBoard: resetBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"U23V3sKmOXi5IdDm7tfIz/l3kYw=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","App","nodeSize","topGridMargin","sideGridMargin","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","rows","parseInt","cols","resetBoard","gridMap","x","y","nodeState","unshift","setGridState","gridState","defaultSelectedObstacle","selectedObstacle","setSelectedObstacle","startCord","setStartCord","targetCord","setTargetCord"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState } from 'react'\n\nfunction App() {\n  const nodeSize = 35;\n  const topGridMargin = 180;\n  const sideGridMargin = 100;\n\n  const adjustedWinHeight = window.innerHeight - topGridMargin;\n  const adjustedWinWidth = window.innerWidth - sideGridMargin;\n\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n\n  const resetBoard = () => {\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  // let gridMap = {};\n  // for (let x = 0; x < rows; x++) {\n  //   for (let y = 0; y < cols; y++) {\n  //     let nodeState = [getNodeTypeEnum('none')];\n  //     if (x === 0 && y === 0) {\n  //       nodeState.unshift(getNodeTypeEnum('start'));\n  //     }\n  //     else if (x === (rows - 1) && y === (cols - 1)) {\n  //       nodeState.unshift(getNodeTypeEnum('target'));\n  //     }\n\n  //     gridMap[`${x}:${y}`] = nodeState;\n  //   }\n  // }\n\n  const [gridState, setGridState] = useState({});\n  resetBoard();\n\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n\n  const [selectedObstacle, setSelectedObstacle] = useState(defaultSelectedObstacle);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState(`${rows - 1}:${cols - 1}`);\n\n\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} resetBoard={resetBoard} />\n      <Grid rows={rows} cols={cols} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}