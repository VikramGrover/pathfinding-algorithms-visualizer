{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport closeIcon from \"../images/close.svg\";\nimport { pathfindingAlgoInfo } from '../utils/constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InfoBox = ({\n  infoBoxOpen,\n  toggleInfoBox,\n  selectedAlgo\n}) => {\n  _s();\n\n  const [dragging, setDragging] = useState(false);\n  const [boxCord, setBoxCord] = useState([300, 0]);\n\n  const enableDragging = e => {\n    setDragging(true);\n  };\n\n  const beingDragged = e => {\n    // console.log(e);\n    if (dragging) {\n      // const xDiff = e.clientX - prevMouseCord[0];\n      // const yDiff = e.clientY - prevMouseCord[1];\n      setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n    }\n  };\n\n  const disableDragging = e => {\n    setDragging(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      left: boxCord[0],\n      top: boxCord[1]\n    },\n    className: `info-box ${infoBoxOpen ? 'visible' : 'hidden'}`,\n    onMouseMove: beingDragged,\n    onMouseUp: disableDragging,\n    onMouseLeave: disableDragging,\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"close-info-icon\",\n      src: closeIcon,\n      onClick: toggleInfoBox,\n      alt: \"Close info box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      onMouseDown: enableDragging,\n      children: selectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description || /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No information.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 102\n    }, this), pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 9\n  }, this);\n};\n\n_s(InfoBox, \"HNOYpJG0zSQ56mBjxQmwLCnhJrk=\");\n\n_c = InfoBox;\nexport default InfoBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"InfoBox\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/InfoBox.js"],"names":["useState","pathfindingAlgoInfo","InfoBox","infoBoxOpen","toggleInfoBox","selectedAlgo","dragging","setDragging","boxCord","setBoxCord","enableDragging","e","beingDragged","prevState","movementX","movementY","disableDragging","left","top","closeIcon","description","optimality"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,SAASC,mBAAT,QAAoC,uBAApC;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA;AAA9B,CAAD,KAAkD;AAAA;;AAC9D,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBT,QAAQ,CAAC,CAAC,GAAD,EAAM,CAAN,CAAD,CAAtC;;AAEA,QAAMU,cAAc,GAAIC,CAAD,IAAO;AAC1BJ,IAAAA,WAAW,CAAC,IAAD,CAAX;AACH,GAFD;;AAIA,QAAMK,YAAY,GAAID,CAAD,IAAO;AACxB;AACA,QAAIL,QAAJ,EAAc;AACV;AACA;AAEAG,MAAAA,UAAU,CAACI,SAAS,IAAI,CAACA,SAAS,CAAC,CAAD,CAAT,GAAeF,CAAC,CAACG,SAAlB,EAA6BD,SAAS,CAAC,CAAD,CAAT,GAAeF,CAAC,CAACI,SAA9C,CAAd,CAAV;AACH;AACJ,GARD;;AAUA,QAAMC,eAAe,GAAIL,CAAD,IAAO;AAC3BJ,IAAAA,WAAW,CAAC,KAAD,CAAX;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,KAAK,EAAE;AAAEU,MAAAA,IAAI,EAAET,OAAO,CAAC,CAAD,CAAf;AAAoBU,MAAAA,GAAG,EAAEV,OAAO,CAAC,CAAD;AAAhC,KAAZ;AAAmD,IAAA,SAAS,EAAG,YAAWL,WAAW,GAAG,SAAH,GAAe,QAAS,EAA7G;AAAgH,IAAA,WAAW,EAAES,YAA7H;AAA2I,IAAA,SAAS,EAAEI,eAAtJ;AAAuK,IAAA,YAAY,EAAEA,eAArL;AAAA,4BACI;AAAK,MAAA,SAAS,EAAC,iBAAf;AAAiC,MAAA,GAAG,EAAEG,SAAtC;AAAiD,MAAA,OAAO,EAAEf,aAA1D;AAAyE,MAAA,GAAG,EAAC;AAA7E;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAI,MAAA,WAAW,EAAEM,cAAjB;AAAA,gBAAmCL;AAAnC;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGMJ,mBAAmB,CAACI,YAAD,CAAnB,IAAqCJ,mBAAmB,CAACI,YAAD,CAAnB,CAAkCe,WAAxE,iBAAwF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAH7F,EAIMnB,mBAAmB,CAACI,YAAD,CAAnB,IAAqCJ,mBAAmB,CAACI,YAAD,CAAnB,CAAkCgB,UAJ7E;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CA9BD;;GAAMnB,O;;KAAAA,O;AAgCN,eAAeA,OAAf","sourcesContent":["import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const enableDragging = (e) => {\n        setDragging(true);\n    };\n\n    const beingDragged = (e) => {\n        // console.log(e);\n        if (dragging) {\n            // const xDiff = e.clientX - prevMouseCord[0];\n            // const yDiff = e.clientY - prevMouseCord[1];\n\n            setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n    };\n\n    return (\n        <div style={{ left: boxCord[0], top: boxCord[1] }} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging} onMouseLeave={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} alt='Close info box' />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description) || <p>No information.</p>}\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality)}\n        </div >\n    )\n}\n\nexport default InfoBox\n"]},"metadata":{},"sourceType":"module"}