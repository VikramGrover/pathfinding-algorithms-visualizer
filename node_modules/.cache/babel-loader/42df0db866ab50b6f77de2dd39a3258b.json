{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  size,\n  nodeType,\n  selectingStart,\n  setSelectingStart,\n  selectingTarget,\n  setSelectingTarget,\n  selectingObstacle,\n  setSelectingObstacle\n}) => {\n  _s();\n\n  const [type, setType] = useState([nodeType, nodeType, nodeType]);\n  let nodeDim = {\n    width: size,\n    height: size\n  };\n\n  const getBackgroundColor = () => {\n    if (type === getNodeTypeEnum('start')) {\n      return 'green';\n    }\n\n    if (type === getNodeTypeEnum('target')) {\n      return 'red';\n    }\n\n    if (type === getNodeTypeEnum('empty')) {\n      return 'transparent';\n    }\n  };\n\n  const mouseDowned = () => {\n    if (type === getNodeTypeEnum('start')) {\n      setSelectingStart(true);\n      return;\n    }\n\n    if (type === getNodeTypeEnum('target')) {\n      setSelectingTarget(true);\n      return;\n    }\n\n    setSelectingObstacle(true);\n    setType(getNodeTypeEnum('obstacle'));\n  };\n\n  const mouseEntered = () => {\n    if (selectingStart) {\n      setType(getNodeTypeEnum('start'));\n      return;\n    }\n\n    if (selectingTarget) {\n      setType(getNodeTypeEnum('target'));\n      return;\n    }\n\n    if (selectingObstacle) {\n      setType(getNodeTypeEnum('obstacle'));\n      return;\n    }\n  };\n\n  const mouseLeft = () => {\n    // edge cases \n    if (selectingStart && type === getNodeTypeEnum('target')) {\n      setType(getNodeTypeEnum('target'));\n      return;\n    }\n\n    if (selectingStart && type === getNodeTypeEnum('target')) if (selectingStart && type === getNodeTypeEnum(\"empty\")) {\n      setType(getNodeTypeEnum('empty'));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (selectingStart) {\n      setSelectingStart(false);\n      return;\n    }\n\n    if (selectingTarget) {\n      setSelectingTarget(false);\n      return;\n    }\n\n    if (selectingObstacle) {\n      setSelectingObstacle(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    onMouseDown: mouseDowned,\n    onMouseEnter: mouseEntered,\n    onMouseLeave: mouseLeft,\n    onMouseUp: mouseUped,\n    children: [type === getNodeTypeEnum(\"start\") && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      style: nodeDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 51\n    }, this), type === getNodeTypeEnum(\"target\") && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      style: nodeDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 52\n    }, this), type === getNodeTypeEnum(\"obstacle\") && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      style: nodeDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 54\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"qKATjyWw0MYFlQBYwApe131JqPo=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","size","nodeType","selectingStart","setSelectingStart","selectingTarget","setSelectingTarget","selectingObstacle","setSelectingObstacle","type","setType","nodeDim","width","height","getBackgroundColor","mouseDowned","mouseEntered","mouseLeft","mouseUped"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ size, nodeType, selectingStart, setSelectingStart, selectingTarget, setSelectingTarget, selectingObstacle, setSelectingObstacle }) => {\n    const [type, setType] = useState([nodeType, nodeType, nodeType]);\n    let nodeDim = {\n        width: size,\n        height: size,\n    };\n\n    const getBackgroundColor = () => {\n        if (type === getNodeTypeEnum('start')) {\n            return 'green';\n        }\n        if (type === getNodeTypeEnum('target')) {\n            return 'red';\n        }\n        if (type === getNodeTypeEnum('empty')) {\n            return 'transparent';\n        }\n    };\n\n    const mouseDowned = () => {\n        if (type === getNodeTypeEnum('start')) {\n            setSelectingStart(true);\n            return;\n        }\n\n        if (type === getNodeTypeEnum('target')) {\n            setSelectingTarget(true);\n            return;\n        }\n\n        setSelectingObstacle(true);\n        setType(getNodeTypeEnum('obstacle'))\n    };\n\n    const mouseEntered = () => {\n        if (selectingStart) {\n            setType(getNodeTypeEnum('start'));\n            return;\n        }\n\n        if (selectingTarget) {\n            setType(getNodeTypeEnum('target'));\n            return;\n        }\n\n        if (selectingObstacle) {\n            setType(getNodeTypeEnum('obstacle'));\n            return;\n        }\n    };\n\n    const mouseLeft = () => {\n        // edge cases \n        if (selectingStart && type === getNodeTypeEnum('target')) {\n            setType(getNodeTypeEnum('target'));\n            return;\n        }\n\n        if (selectingStart && type === getNodeTypeEnum('target'))\n            if (selectingStart && type === getNodeTypeEnum(\"empty\")) {\n                setType(getNodeTypeEnum('empty'));\n                return;\n            }\n    };\n\n    const mouseUped = () => {\n        if (selectingStart) {\n            setSelectingStart(false);\n            return;\n        }\n\n        if (selectingTarget) {\n            setSelectingTarget(false);\n            return;\n        }\n\n        if (selectingObstacle) {\n            setSelectingObstacle(false);\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" onMouseDown={mouseDowned} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} onMouseUp={mouseUped}>\n            {type === getNodeTypeEnum(\"start\") && <img className='img-node' style={nodeDim} src={startNodeImg} />}\n            {type === getNodeTypeEnum(\"target\") && <img className='img-node' style={nodeDim} src={targetNodeImg} />}\n            {type === getNodeTypeEnum(\"obstacle\") && <img className='img-node' style={nodeDim} src={obstacleNodeImg} />}\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}