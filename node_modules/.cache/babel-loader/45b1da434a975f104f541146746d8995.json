{"ast":null,"code":"import Reset from'./Reset.js';import Clear from'./Clear.js';import ChooseAlgorithm from'./ChooseAlgorithm.js';import ChooseTerrain from'./ChooseTerrain.js';import ChooseObstacle from'./ChooseObstacle.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Header=function Header(_ref){var rows=_ref.rows,cols=_ref.cols,runningAlgo=_ref.runningAlgo,setRunningAlgo=_ref.setRunningAlgo,padding=_ref.padding,height=_ref.height,gridState=_ref.gridState,setGridState=_ref.setGridState,startCord=_ref.startCord,targetCord=_ref.targetCord,clearObstacles=_ref.clearObstacles,clearPath=_ref.clearPath,setSelectedObstacle=_ref.setSelectedObstacle,weightedObsDisabled=_ref.weightedObsDisabled,toggleInfoBox=_ref.toggleInfoBox,selectedAlgo=_ref.selectedAlgo,setSelectedAlgo=_ref.setSelectedAlgo;var style={padding:padding,paddingBottom:padding/2,height:height};return/*#__PURE__*/_jsxs(\"div\",{style:style,className:\"header\",children:[/*#__PURE__*/_jsx(Reset,{clearObstacles:clearObstacles,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(Clear,{clearPath:clearPath,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(ChooseAlgorithm,{rows:rows,cols:cols,gridState:gridState,setGridState:setGridState,startCord:startCord,targetCord:targetCord,clearForReRun:clearPath,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,dropDownWidth:200,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo,setSelectedAlgo:setSelectedAlgo}),/*#__PURE__*/_jsx(ChooseObstacle,{setSelectedObstacle:setSelectedObstacle,weightedObsDisabled:weightedObsDisabled,dropDownWidth:150}),/*#__PURE__*/_jsx(ChooseTerrain,{rows:rows,cols:cols,setGridState:setGridState,startCord:startCord,targetCord:targetCord,clearForReRun:clearPath,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,dropDownWidth:150})]});};export default Header;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js"],"names":["Reset","Clear","ChooseAlgorithm","ChooseTerrain","ChooseObstacle","Header","rows","cols","runningAlgo","setRunningAlgo","padding","height","gridState","setGridState","startCord","targetCord","clearObstacles","clearPath","setSelectedObstacle","weightedObsDisabled","toggleInfoBox","selectedAlgo","setSelectedAlgo","style","paddingBottom"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,eAAP,KAA4B,sBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,qBAA3B,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAqO,IAAlOC,CAAAA,IAAkO,MAAlOA,IAAkO,CAA5NC,IAA4N,MAA5NA,IAA4N,CAAtNC,WAAsN,MAAtNA,WAAsN,CAAzMC,cAAyM,MAAzMA,cAAyM,CAAzLC,OAAyL,MAAzLA,OAAyL,CAAhLC,MAAgL,MAAhLA,MAAgL,CAAxKC,SAAwK,MAAxKA,SAAwK,CAA7JC,YAA6J,MAA7JA,YAA6J,CAA/IC,SAA+I,MAA/IA,SAA+I,CAApIC,UAAoI,MAApIA,UAAoI,CAAxHC,cAAwH,MAAxHA,cAAwH,CAAxGC,SAAwG,MAAxGA,SAAwG,CAA7FC,mBAA6F,MAA7FA,mBAA6F,CAAxEC,mBAAwE,MAAxEA,mBAAwE,CAAnDC,aAAmD,MAAnDA,aAAmD,CAApCC,YAAoC,MAApCA,YAAoC,CAAtBC,eAAsB,MAAtBA,eAAsB,CAChP,GAAMC,CAAAA,KAAK,CAAG,CACVb,OAAO,CAAEA,OADC,CAEVc,aAAa,CAAEd,OAAO,CAAG,CAFf,CAGVC,MAAM,CAAEA,MAHE,CAAd,CAMA,mBACI,aAAK,KAAK,CAAEY,KAAZ,CAAmB,SAAS,CAAC,QAA7B,wBACI,KAAC,KAAD,EAAO,cAAc,CAAEP,cAAvB,CAAuC,WAAW,CAAER,WAApD,EADJ,cAEI,KAAC,KAAD,EAAO,SAAS,CAAES,SAAlB,CAA6B,WAAW,CAAET,WAA1C,EAFJ,cAGI,KAAC,eAAD,EAAiB,IAAI,CAAEF,IAAvB,CAA6B,IAAI,CAAEC,IAAnC,CAAyC,SAAS,CAAEK,SAApD,CAA+D,YAAY,CAAEC,YAA7E,CAA2F,SAAS,CAAEC,SAAtG,CAAiH,UAAU,CAAEC,UAA7H,CAAyI,aAAa,CAAEE,SAAxJ,CAAmK,WAAW,CAAET,WAAhL,CAA6L,cAAc,CAAEC,cAA7M,CAA6N,aAAa,CAAE,GAA5O,CAAiP,aAAa,CAAEW,aAAhQ,CAA+Q,YAAY,CAAEC,YAA7R,CAA2S,eAAe,CAAEC,eAA5T,EAHJ,cAII,KAAC,cAAD,EAAgB,mBAAmB,CAAEJ,mBAArC,CAA0D,mBAAmB,CAAEC,mBAA/E,CAAoG,aAAa,CAAE,GAAnH,EAJJ,cAKI,KAAC,aAAD,EAAe,IAAI,CAAEb,IAArB,CAA2B,IAAI,CAAEC,IAAjC,CAAuC,YAAY,CAAEM,YAArD,CAAmE,SAAS,CAAEC,SAA9E,CAAyF,UAAU,CAAEC,UAArG,CAAiH,aAAa,CAAEE,SAAhI,CAA2I,WAAW,CAAET,WAAxJ,CAAqK,cAAc,CAAEC,cAArL,CAAqM,aAAa,CAAE,GAApN,EALJ,GADJ,CASH,CAhBD,CAkBA,cAAeJ,CAAAA,MAAf","sourcesContent":["import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, gridState, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={200} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={setSelectedAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={150} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={150} />\n        </div>\n    )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}