{"ast":null,"code":"const nodeTypeEnum = {\n  'none': 0,\n  'target': 1,\n  'path': 2,\n  'start': 3,\n  'remObstacle': 4,\n  'visited': 5,\n  'neighbour': 6,\n  'wall': 7,\n  'weighted-100': 8,\n  'weighted-80': 9,\n  'weighted-60': 10,\n  'weighted-40': 11,\n  'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'empty',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.wall]: 'wall',\n  [nodeTypeEnum.neighbour]: 'neighbour',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path',\n  [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n  [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n  [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n  [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n  [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n};\nObject.freeze(nodeColorClass);\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.wall]: Infinity,\n  [nodeTypeEnum.start]: 1,\n  [nodeTypeEnum[\"weighted-100\"]]: 100,\n  [nodeTypeEnum[\"weighted-80\"]]: 80,\n  [nodeTypeEnum[\"weighted-60\"]]: 60,\n  [nodeTypeEnum[\"weighted-40\"]]: 40,\n  [nodeTypeEnum[\"weighted-20\"]]: 20\n};\nObject.freeze(nodeWeight);\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n  'Wall (∞)': 'wall',\n  'Weighted (100)': 'weighted-100',\n  'Weighted (80)': 'weighted-80',\n  'Weighted (60)': 'weighted-60',\n  'Weighted (40)': 'weighted-40',\n  'Weighted (20)': 'weighted-20'\n};\nexport const getNodeTypeEnum = key => {\n  return nodeTypeEnum[key];\n};\nexport const getNodeColorClass = key => {\n  return nodeColorClass[key];\n};\nexport const getNodeWeight = key => {\n  return nodeWeight[key];\n};\nexport const shuffleArray = array => {\n  for (var i = array.length - 1; i > 0; i--) {\n    var j = Math.floor(Math.random() * (i + 1));\n    var temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n};\nexport const getPathAlgos = () => {\n  return pathAlgos;\n};\nexport const getTerrainAlgos = () => {\n  return terrainAlgos;\n};\nexport const getObstacleTypes = () => {\n  return obstacleTypes;\n};\nexport const getObstacleEnum = key => {\n  return obsEnum[key];\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","neighbour","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getNodeColorClass","getNodeWeight","shuffleArray","array","i","length","j","Math","floor","random","temp","getPathAlgos","getTerrainAlgos","getObstacleTypes","getObstacleEnum"],"mappings":"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","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'neighbour': 6,\n    'wall': 7,\n    'weighted-100': 8,\n    'weighted-80': 9,\n    'weighted-60': 10,\n    'weighted-40': 11,\n    'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.neighbour]: 'neighbour',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n"]},"metadata":{},"sourceType":"module"}