{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Node from './Node.js';\nimport { useState } from 'react';\nimport { nodeType } from '../utils/util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = ({\n  rows,\n  cols,\n  nodeSize\n}) => {\n  _s();\n\n  const [selectingStart, setSelectingStart] = useState(false);\n  console.log(rows, cols, nodeSize); // fill nodes in the grid\n\n  const nodes = [];\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let type = Util.nodeTypeEnum.empty;\n\n      if (x === 0 && y === 0) {\n        type = Util.nodeTypeEnum.start;\n      } else if (x === rows - 1 && y === cols - 1) {\n        type = Util.nodeTypeEnum.target;\n      }\n\n      nodes.push( /*#__PURE__*/_jsxDEV(Node, {\n        size: nodeSize,\n        nodeType: type,\n        selectingStart: selectingStart,\n        setSelectingStart: setSelectingStart\n      }, [x, y], false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  const gridStyle = {\n    marginTop: 150,\n    width: cols * nodeSize + cols,\n    height: rows * nodeSize + rows\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: gridStyle,\n    children: nodes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"t4wi7jyXHwe+lujKXP/550uDlpc=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Grid.js"],"names":["React","Node","useState","nodeType","Grid","rows","cols","nodeSize","selectingStart","setSelectingStart","console","log","nodes","x","y","type","Util","nodeTypeEnum","empty","start","target","push","gridStyle","marginTop","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,QAAT,QAAyB,kBAAzB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAAA;;AACvC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,KAAD,CAApD;AACAQ,EAAAA,OAAO,CAACC,GAAR,CAAYN,IAAZ,EAAkBC,IAAlB,EAAwBC,QAAxB,EAFuC,CAGvC;;AACA,QAAMK,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0BQ,CAAC,EAA3B,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,IAApB,EAA0BQ,CAAC,EAA3B,EAA+B;AAC3B,UAAIC,IAAI,GAAGC,IAAI,CAACC,YAAL,CAAkBC,KAA7B;;AAEA,UAAIL,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACpBC,QAAAA,IAAI,GAAGC,IAAI,CAACC,YAAL,CAAkBE,KAAzB;AACH,OAFD,MAGK,IAAIN,CAAC,KAAMR,IAAI,GAAG,CAAd,IAAoBS,CAAC,KAAMR,IAAI,GAAG,CAAtC,EAA0C;AAC3CS,QAAAA,IAAI,GAAGC,IAAI,CAACC,YAAL,CAAkBG,MAAzB;AACH;;AAEDR,MAAAA,KAAK,CAACS,IAAN,eAAW,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEd,QAAZ;AAAsB,QAAA,QAAQ,EAAEQ,IAAhC;AAAsC,QAAA,cAAc,EAAEP,cAAtD;AAAsE,QAAA,iBAAiB,EAAEC;AAAzF,SAAiH,CAACI,CAAD,EAAIC,CAAJ,CAAjH;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACJ;;AAED,QAAMQ,SAAS,GAAG;AACdC,IAAAA,SAAS,EAAE,GADG;AAEdC,IAAAA,KAAK,EAAGlB,IAAI,GAAGC,QAAR,GAAoBD,IAFb;AAGdmB,IAAAA,MAAM,EAAGpB,IAAI,GAAGE,QAAR,GAAoBF;AAHd,GAAlB;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAEiB,SAA7B;AAAA,cACMV;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9BD;;GAAMR,I;;KAAAA,I;AAgCN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport Node from './Node.js'\nimport { useState } from 'react'\nimport { nodeType } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, nodeSize }) => {\n    const [selectingStart, setSelectingStart] = useState(false)\n    console.log(rows, cols, nodeSize)\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let type = Util.nodeTypeEnum.empty\n\n            if (x === 0 && y === 0) {\n                type = Util.nodeTypeEnum.start\n            }\n            else if (x === (rows - 1) && y === (cols - 1)) {\n                type = Util.nodeTypeEnum.target\n            }\n\n            nodes.push(<Node size={nodeSize} nodeType={type} selectingStart={selectingStart} setSelectingStart={setSelectingStart} key={[x, y]} />)\n        }\n    }\n\n    const gridStyle = {\n        marginTop: 150,\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    }\n    return (\n        <div className='grid' style={gridStyle}>\n            { nodes}\n        </div >\n    )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}