{"ast":null,"code":"import Reset from'./Reset.js';import Clear from'./Clear.js';import ChooseAlgorithm from'./ChooseAlgorithm.js';import ChooseTerrain from'./ChooseTerrain.js';import ChooseObstacle from'./ChooseObstacle.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Header=function Header(_ref){var rows=_ref.rows,cols=_ref.cols,runningAlgo=_ref.runningAlgo,setRunningAlgo=_ref.setRunningAlgo,padding=_ref.padding,height=_ref.height,gridState=_ref.gridState,setGridState=_ref.setGridState,startCord=_ref.startCord,targetCord=_ref.targetCord,clearObstacles=_ref.clearObstacles,clearPath=_ref.clearPath,setSelectedObstacle=_ref.setSelectedObstacle,weightedObsDisabled=_ref.weightedObsDisabled,toggleInfoBox=_ref.toggleInfoBox,selectedAlgo=_ref.selectedAlgo,setSelectedAlgo=_ref.setSelectedAlgo,resetGrid=_ref.resetGrid;var style={padding:padding,paddingBottom:padding/2,height:height};return/*#__PURE__*/_jsxs(\"div\",{style:style,className:\"header\",children:[/*#__PURE__*/_jsx(Reset,{clearObstacles:clearObstacles,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(Clear,{clearPath:clearPath,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(ChooseAlgorithm,{rows:rows,cols:cols,gridState:gridState,setGridState:setGridState,startCord:startCord,targetCord:targetCord,clearForReRun:clearPath,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,dropDownWidth:260,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo,setSelectedAlgo:setSelectedAlgo}),/*#__PURE__*/_jsx(ChooseObstacle,{setSelectedObstacle:setSelectedObstacle,weightedObsDisabled:weightedObsDisabled,dropDownWidth:190}),/*#__PURE__*/_jsx(ChooseTerrain,{rows:rows,cols:cols,gridState:gridState,setGridState:setGridState,startCord:startCord,targetCord:targetCord,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,resetGrid:resetGrid,selectedAlgo:selectedAlgo,dropDownWidth:200})]});};export default Header;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Header.js"],"names":["Reset","Clear","ChooseAlgorithm","ChooseTerrain","ChooseObstacle","Header","rows","cols","runningAlgo","setRunningAlgo","padding","height","gridState","setGridState","startCord","targetCord","clearObstacles","clearPath","setSelectedObstacle","weightedObsDisabled","toggleInfoBox","selectedAlgo","setSelectedAlgo","resetGrid","style","paddingBottom"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CACA,MAAOC,CAAAA,eAAP,KAA4B,sBAA5B,CACA,MAAOC,CAAAA,aAAP,KAA0B,oBAA1B,CACA,MAAOC,CAAAA,cAAP,KAA2B,qBAA3B,C,wFAEA,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,MAAgP,IAA7OC,CAAAA,IAA6O,MAA7OA,IAA6O,CAAvOC,IAAuO,MAAvOA,IAAuO,CAAjOC,WAAiO,MAAjOA,WAAiO,CAApNC,cAAoN,MAApNA,cAAoN,CAApMC,OAAoM,MAApMA,OAAoM,CAA3LC,MAA2L,MAA3LA,MAA2L,CAAnLC,SAAmL,MAAnLA,SAAmL,CAAxKC,YAAwK,MAAxKA,YAAwK,CAA1JC,SAA0J,MAA1JA,SAA0J,CAA/IC,UAA+I,MAA/IA,UAA+I,CAAnIC,cAAmI,MAAnIA,cAAmI,CAAnHC,SAAmH,MAAnHA,SAAmH,CAAxGC,mBAAwG,MAAxGA,mBAAwG,CAAnFC,mBAAmF,MAAnFA,mBAAmF,CAA9DC,aAA8D,MAA9DA,aAA8D,CAA/CC,YAA+C,MAA/CA,YAA+C,CAAjCC,eAAiC,MAAjCA,eAAiC,CAAhBC,SAAgB,MAAhBA,SAAgB,CAC3P,GAAMC,CAAAA,KAAK,CAAG,CACVd,OAAO,CAAEA,OADC,CAEVe,aAAa,CAAEf,OAAO,CAAG,CAFf,CAGVC,MAAM,CAAEA,MAHE,CAAd,CAMA,mBACI,aAAK,KAAK,CAAEa,KAAZ,CAAmB,SAAS,CAAC,QAA7B,wBACI,KAAC,KAAD,EAAO,cAAc,CAAER,cAAvB,CAAuC,WAAW,CAAER,WAApD,EADJ,cAEI,KAAC,KAAD,EAAO,SAAS,CAAES,SAAlB,CAA6B,WAAW,CAAET,WAA1C,EAFJ,cAGI,KAAC,eAAD,EAAiB,IAAI,CAAEF,IAAvB,CAA6B,IAAI,CAAEC,IAAnC,CAAyC,SAAS,CAAEK,SAApD,CAA+D,YAAY,CAAEC,YAA7E,CAA2F,SAAS,CAAEC,SAAtG,CAAiH,UAAU,CAAEC,UAA7H,CAAyI,aAAa,CAAEE,SAAxJ,CAAmK,WAAW,CAAET,WAAhL,CAA6L,cAAc,CAAEC,cAA7M,CAA6N,aAAa,CAAE,GAA5O,CAAiP,aAAa,CAAEW,aAAhQ,CAA+Q,YAAY,CAAEC,YAA7R,CAA2S,eAAe,CAAEC,eAA5T,EAHJ,cAII,KAAC,cAAD,EAAgB,mBAAmB,CAAEJ,mBAArC,CAA0D,mBAAmB,CAAEC,mBAA/E,CAAoG,aAAa,CAAE,GAAnH,EAJJ,cAKI,KAAC,aAAD,EAAe,IAAI,CAAEb,IAArB,CAA2B,IAAI,CAAEC,IAAjC,CAAuC,SAAS,CAAEK,SAAlD,CAA6D,YAAY,CAAEC,YAA3E,CAAyF,SAAS,CAAEC,SAApG,CAA+G,UAAU,CAAEC,UAA3H,CAAuI,WAAW,CAAEP,WAApJ,CAAiK,cAAc,CAAEC,cAAjL,CAAiM,SAAS,CAAEc,SAA5M,CAAuN,YAAY,CAAEF,YAArO,CAAmP,aAAa,CAAE,GAAlQ,EALJ,GADJ,CASH,CAhBD,CAkBA,cAAehB,CAAAA,MAAf","sourcesContent":["import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, gridState, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, toggleInfoBox, selectedAlgo, setSelectedAlgo, resetGrid }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={260} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={setSelectedAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={190} />\n            <ChooseTerrain rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} resetGrid={resetGrid} selectedAlgo={selectedAlgo} dropDownWidth={200} />\n        </div>\n    )\n}\n\nexport default Header\n"]},"metadata":{},"sourceType":"module"}