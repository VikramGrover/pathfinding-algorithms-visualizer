{"ast":null,"code":"const nodeTypeEnum = {\n  'none': 0,\n  'target': 1,\n  'path': 2,\n  'start': 3,\n  'remObstacle': 4,\n  'visited': 5,\n  'visiting': 6,\n  'wall': 7,\n  'weighted-100': 8,\n  'weighted-80': 9,\n  'weighted-60': 10,\n  'weighted-40': 11,\n  'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'empty',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.wall]: 'wall',\n  [nodeTypeEnum.visiting]: 'visiting',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path',\n  [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n  [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n  [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n  [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n  [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n};\nObject.freeze(nodeColorClass);\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.wall]: Infinity,\n  [nodeTypeEnum.start]: 1,\n  [nodeTypeEnum[\"weighted-100\"]]: 100,\n  [nodeTypeEnum[\"weighted-80\"]]: 80,\n  [nodeTypeEnum[\"weighted-60\"]]: 60,\n  [nodeTypeEnum[\"weighted-40\"]]: 40,\n  [nodeTypeEnum[\"weighted-20\"]]: 20\n};\nObject.freeze(nodeWeight);\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n  'Wall (∞)': 'wall',\n  'Weighted (100)': 'weighted-100',\n  'Weighted (80)': 'weighted-80',\n  'Weighted (60)': 'weighted-60',\n  'Weighted (40)': 'weighted-40',\n  'Weighted (20)': 'weighted-20'\n};\nexport const getNodeTypeEnum = key => {\n  return nodeTypeEnum[key];\n};\nexport const getNodeColorClass = key => {\n  return nodeColorClass[key];\n};\nexport const getNodeWeight = key => {\n  return nodeWeight[key];\n};\nexport const getPathAlgos = () => {\n  return pathAlgos;\n};\nexport const getTerrainAlgos = () => {\n  return terrainAlgos;\n};\nexport const getObstacleTypes = () => {\n  return obstacleTypes;\n};\nexport const getObstacleEnum = key => {\n  return obsEnum[key];\n};\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n  const row = parseInt(node.split(':')[0]);\n  const col = parseInt(node.split(':')[1]);\n  let res = [];\n\n  if (row - 1 >= 0 && gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall')) {\n    res.push(`${row - 1}:${col}`);\n  }\n\n  if (col + 1 < cols && gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall')) {\n    res.push(`${row}:${col + 1}`);\n  }\n\n  if (row + 1 < rows && gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall')) {\n    res.push(`${row + 1}:${col}`);\n  }\n\n  if (col - 1 >= 0 && gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall')) {\n    res.push(`${row}:${col - 1}`);\n  }\n\n  return res;\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","visiting","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getNodeColorClass","getNodeWeight","getPathAlgos","getTerrainAlgos","getObstacleTypes","getObstacleEnum","getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","push"],"mappings":"AAAA,MAAMA,YAAY,GAAG;AACjB,UAAQ,CADS;AAEjB,YAAU,CAFO;AAGjB,UAAQ,CAHS;AAIjB,WAAS,CAJQ;AAKjB,iBAAe,CALE;AAMjB,aAAW,CANM;AAOjB,cAAY,CAPK;AAQjB,UAAQ,CARS;AASjB,kBAAgB,CATC;AAUjB,iBAAe,CAVE;AAWjB,iBAAe,EAXE;AAYjB,iBAAe,EAZE;AAajB,iBAAe;AAbE,CAArB;AAeAC,MAAM,CAACC,MAAP,CAAcF,YAAd;AAEA,MAAMG,cAAc,GAAG;AACnB,GAACH,YAAY,CAACI,IAAd,GAAqB,OADF;AAEnB,GAACJ,YAAY,CAACK,MAAd,GAAuB,QAFJ;AAGnB,GAACL,YAAY,CAACM,IAAd,GAAqB,MAHF;AAInB,GAACN,YAAY,CAACO,QAAd,GAAyB,UAJN;AAKnB,GAACP,YAAY,CAACQ,KAAd,GAAsB,OALH;AAMnB,GAACR,YAAY,CAACS,OAAd,GAAwB,SANL;AAOnB,GAACT,YAAY,CAACU,IAAd,GAAqB,MAPF;AAQnB,GAACV,YAAY,CAAC,cAAD,CAAb,GAAgC,cARb;AASnB,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,aATZ;AAUnB,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,aAVZ;AAWnB,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,aAXZ;AAYnB,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B;AAZZ,CAAvB;AAcAC,MAAM,CAACC,MAAP,CAAcC,cAAd;AAEA,MAAMQ,UAAU,GAAG;AACf,GAACX,YAAY,CAACI,IAAd,GAAqB,CADN;AAEf,GAACJ,YAAY,CAACK,MAAd,GAAuB,CAFR;AAGf,GAACL,YAAY,CAACM,IAAd,GAAqBM,QAHN;AAIf,GAACZ,YAAY,CAACQ,KAAd,GAAsB,CAJP;AAKf,GAACR,YAAY,CAAC,cAAD,CAAb,GAAgC,GALjB;AAMf,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,EANhB;AAOf,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,EAPhB;AAQf,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B,EARhB;AASf,GAACA,YAAY,CAAC,aAAD,CAAb,GAA+B;AAThB,CAAnB;AAWAC,MAAM,CAACC,MAAP,CAAcS,UAAd;AAEA,MAAME,SAAS,GAAG,CAAC,YAAD,EAAe,QAAf,EAAyB,KAAzB,EAAgC,KAAhC,CAAlB;AACA,MAAMC,YAAY,GAAG,CAAC,QAAD,EAAW,QAAX,CAArB;AACA,MAAMC,aAAa,GAAG,CAAC,UAAD,EAAa,gBAAb,EAA+B,eAA/B,EAAgD,eAAhD,EAAiE,eAAjE,EAAkF,eAAlF,CAAtB;AACA,MAAMC,OAAO,GAAG;AACZ,cAAY,MADA;AAEZ,oBAAkB,cAFN;AAGZ,mBAAiB,aAHL;AAIZ,mBAAiB,aAJL;AAKZ,mBAAiB,aALL;AAMZ,mBAAiB;AANL,CAAhB;AAQA,OAAO,MAAMC,eAAe,GAAIC,GAAD,IAAS;AACpC,SAAOlB,YAAY,CAACkB,GAAD,CAAnB;AACH,CAFM;AAIP,OAAO,MAAMC,iBAAiB,GAAID,GAAD,IAAS;AACtC,SAAOf,cAAc,CAACe,GAAD,CAArB;AACH,CAFM;AAIP,OAAO,MAAME,aAAa,GAAIF,GAAD,IAAS;AAClC,SAAOP,UAAU,CAACO,GAAD,CAAjB;AACH,CAFM;AAIP,OAAO,MAAMG,YAAY,GAAG,MAAM;AAC9B,SAAOR,SAAP;AACH,CAFM;AAIP,OAAO,MAAMS,eAAe,GAAG,MAAM;AACjC,SAAOR,YAAP;AACH,CAFM;AAIP,OAAO,MAAMS,gBAAgB,GAAG,MAAM;AAClC,SAAOR,aAAP;AACH,CAFM;AAIP,OAAO,MAAMS,eAAe,GAAIN,GAAD,IAAS;AACpC,SAAOF,OAAO,CAACE,GAAD,CAAd;AACH,CAFM;AAIP,OAAO,MAAMO,iBAAiB,GAAG,CAACC,IAAD,EAAOC,IAAP,EAAaC,IAAb,EAAmBC,SAAnB,KAAiC;AAC9D,QAAMC,GAAG,GAAGC,QAAQ,CAACL,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAApB;AACA,QAAMC,GAAG,GAAGF,QAAQ,CAACL,IAAI,CAACM,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAApB;AAEA,MAAIE,GAAG,GAAG,EAAV;;AACA,MAAKJ,GAAG,GAAG,CAAN,IAAW,CAAZ,IAAmBD,SAAS,CAAE,GAAEC,GAAG,GAAG,CAAE,IAAGG,GAAI,EAAnB,CAAT,CAA+B,CAA/B,MAAsChB,eAAe,CAAC,MAAD,CAA5E,EAAuF;AACnFiB,IAAAA,GAAG,CAACC,IAAJ,CAAU,GAAEL,GAAG,GAAG,CAAE,IAAGG,GAAI,EAA3B;AACH;;AACD,MAAKA,GAAG,GAAG,CAAN,GAAUL,IAAX,IAAqBC,SAAS,CAAE,GAAEC,GAAI,IAAGG,GAAG,GAAG,CAAE,EAAnB,CAAT,CAA+B,CAA/B,MAAsChB,eAAe,CAAC,MAAD,CAA9E,EAAyF;AACrFiB,IAAAA,GAAG,CAACC,IAAJ,CAAU,GAAEL,GAAI,IAAGG,GAAG,GAAG,CAAE,EAA3B;AACH;;AACD,MAAKH,GAAG,GAAG,CAAP,GAAYH,IAAZ,IAAqBE,SAAS,CAAE,GAAEC,GAAG,GAAG,CAAE,IAAGG,GAAI,EAAnB,CAAT,CAA+B,CAA/B,MAAsChB,eAAe,CAAC,MAAD,CAA9E,EAAyF;AACrFiB,IAAAA,GAAG,CAACC,IAAJ,CAAU,GAAEL,GAAG,GAAG,CAAE,IAAGG,GAAI,EAA3B;AACH;;AACD,MAAKA,GAAG,GAAG,CAAN,IAAW,CAAZ,IAAmBJ,SAAS,CAAE,GAAEC,GAAI,IAAGG,GAAG,GAAG,CAAE,EAAnB,CAAT,CAA+B,CAA/B,MAAsChB,eAAe,CAAC,MAAD,CAA5E,EAAuF;AACnFiB,IAAAA,GAAG,CAACC,IAAJ,CAAU,GAAEL,GAAI,IAAGG,GAAG,GAAG,CAAE,EAA3B;AACH;;AAED,SAAOC,GAAP;AACH,CAnBM","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'visiting': 6,\n    'wall': 7,\n    'weighted-100': 8,\n    'weighted-80': 9,\n    'weighted-60': 10,\n    'weighted-40': 11,\n    'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n"]},"metadata":{},"sourceType":"module"}