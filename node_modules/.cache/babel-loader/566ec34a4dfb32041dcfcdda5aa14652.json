{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'; // import eraser from '../images/eraser.svg'\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Node = /*#__PURE__*/React.memo(_c = _s(({\n  nodeId,\n  size,\n  unusedNodeState,\n  unusedSetGridState,\n  draggingSelection,\n  setDraggingSelection,\n  setStartCord,\n  setTargetCord,\n  runningAlgo,\n  selectedObstacle\n}) => {\n  _s();\n\n  const [nodeState, setNodeState] = useState([nodeTypeEnum.none]);\n  useEffect(() => {\n    if (nodeId === '0:0') {\n      setNodeState(prevState => [nodeTypeEnum.start, ...prevState]);\n    } else if (nodeId === '10:10') {\n      setNodeState(prevState => [nodeTypeEnum.target, ...prevState]);\n    }\n  });\n  const nodeStyle = {\n    width: size,\n    height: size\n  };\n\n  if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n    nodeStyle.cursor = 'grabbing';\n  }\n\n  const mouseDowned = () => {\n    if (nodeState[0] <= nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n      setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]); // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n\n      return;\n    } else if (nodeState[0] >= nodeTypeEnum.wall) {\n      setNodeState(prevState => prevState.slice(1)); // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n\n      setDraggingSelection(nodeTypeEnum.remObstacle);\n      return;\n    }\n\n    setDraggingSelection(nodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n    } else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]\n      }));\n    } else if (draggingSelection === nodeTypeEnum.start) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [draggingSelection, ...prevState[nodeId]]\n      }));\n      setStartCord(nodeId);\n    } else if (draggingSelection === nodeTypeEnum.target) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [draggingSelection, ...prevState[nodeId]]\n      }));\n      setTargetCord(nodeId);\n    }\n  };\n\n  const mouseLeft = () => {\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection !== nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum.none);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeStyle,\n    className: `node ${nodeColorClass[nodeState[0]]} ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`,\n    onMouseDown: runningAlgo ? null : mouseDowned,\n    onMouseUp: runningAlgo ? null : mouseUped,\n    onMouseEnter: runningAlgo ? null : mouseEntered,\n    onMouseLeave: runningAlgo ? null : mouseLeft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n}, \"jIM1x+Q0kUtOOhuRWk/QPKQIO6E=\"));\n_c2 = Node;\nexport default Node;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Node$React.memo\");\n$RefreshReg$(_c2, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["React","useEffect","useState","nodeColorClass","nodeTypeEnum","Node","memo","nodeId","size","unusedNodeState","unusedSetGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeState","setNodeState","none","prevState","start","target","nodeStyle","width","height","cursor","mouseDowned","wall","slice","remObstacle","mouseEntered","setGridState","mouseLeft","mouseUped"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'\n// import eraser from '../images/eraser.svg'\n\nconst Node = React.memo(({ nodeId, size, unusedNodeState, unusedSetGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const [nodeState, setNodeState] = useState([nodeTypeEnum.none]);\n\n    useEffect(() => {\n        if (nodeId === '0:0') {\n            setNodeState(prevState => [nodeTypeEnum.start, ...prevState]);\n        }\n        else if (nodeId === '10:10') {\n            setNodeState(prevState => [nodeTypeEnum.target, ...prevState]);\n        }\n    });\n\n\n    const nodeStyle = {\n        width: size,\n        height: size\n    };\n\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n        nodeStyle.cursor = 'grabbing';\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            // setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            // setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${nodeColorClass[nodeState[0]]} ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}