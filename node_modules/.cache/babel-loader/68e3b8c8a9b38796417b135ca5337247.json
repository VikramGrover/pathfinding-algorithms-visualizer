{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  nodeState,\n  setNodeState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  _s();\n\n  const [state, setState] = useState(nodeState);\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    const currNodeState = nodeState;\n\n    if (currNodeState[0] === getNodeTypeEnum('none')) {\n      setState([getNodeTypeEnum('obstacle'), ...currNodeState]);\n      setDraggingSelection(getNodeTypeEnum('obstacle'));\n      setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...currNodeState]);\n      return;\n    } else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n      setState(currNodeState.slice(1));\n      setNodeState(nodeId, currNodeState.slice(1));\n      return;\n    }\n\n    setDraggingSelection(currNodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n      setState([getNodeTypeEnum('obstacle'), ...currNodeState]);\n      setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...currNodeState]);\n    } else if (draggingSelection === getNodeTypeEnum('start')) {\n      setState([getNodeTypeEnum('start'), ...currNodeState]);\n      setNodeState(nodeId, [getNodeTypeEnum('start'), ...currNodeState]);\n    } else if (draggingSelection === getNodeTypeEnum('target')) {\n      setState([getNodeTypeEnum('target'), ...currNodeState]);\n      setNodeState(nodeId, [getNodeTypeEnum('target'), ...currNodeState]);\n    }\n  };\n\n  const mouseLeft = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n      setState(currNodeState.slice(1));\n      setNodeState(nodeId, currNodeState.slice(1));\n      console.log('removed last state');\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection !== getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('none'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    children: [state[0] === getNodeTypeEnum('start') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Start Node\",\n      style: imgDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 55\n    }, this), state[0] === getNodeTypeEnum('target') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Target Node\",\n      style: imgDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 56\n    }, this), state[0] === getNodeTypeEnum('obstacle') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Obstacle\",\n      style: imgDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 58\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: { ...nodeDim,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: mouseDowned,\n      onMouseUp: mouseUped,\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"XdBMUDkN0usm3w5tuDj5ItCXqAI=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","nodeId","size","nodeState","setNodeState","draggingSelection","setDraggingSelection","state","setState","nodeDim","width","height","imgDim","mouseDowned","currNodeState","slice","mouseEntered","mouseLeft","console","log","mouseUped","position","top","left"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ nodeId, size, nodeState, setNodeState, draggingSelection, setDraggingSelection }) => {\n    const [state, setState] = useState(nodeState);\n\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        const currNodeState = nodeState;\n\n        if (currNodeState[0] === getNodeTypeEnum('none')) {\n            setState([getNodeTypeEnum('obstacle'), ...currNodeState]);\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...currNodeState]);\n            return;\n        }\n        else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n            setState(currNodeState.slice(1));\n            setNodeState(nodeId, currNodeState.slice(1));\n            return;\n        }\n\n        setDraggingSelection(currNodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n            setState([getNodeTypeEnum('obstacle'), ...currNodeState]);\n            setNodeState(nodeId, [getNodeTypeEnum('obstacle'), ...currNodeState]);\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setState([getNodeTypeEnum('start'), ...currNodeState]);\n            setNodeState(nodeId, [getNodeTypeEnum('start'), ...currNodeState]);\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setState([getNodeTypeEnum('target'), ...currNodeState]);\n            setNodeState(nodeId, [getNodeTypeEnum('target'), ...currNodeState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setState(currNodeState.slice(1));\n            setNodeState(nodeId, currNodeState.slice(1));\n            console.log('removed last state');\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" >\n            {state[0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {state[0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {state[0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />}\n            <div style={{ ...nodeDim, position: 'absolute', top: 0, left: 0 }} onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}