{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport Node from './Node.js';\nimport React from 'react';\nimport { useState } from 'react';\nimport { nodeTypeEnum } from '../utils/constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Grid = /*#__PURE__*/React.memo(_c = _s(({\n  rows,\n  cols,\n  padding,\n  nodeSize,\n  setGridState,\n  selectedObstacle,\n  setStartCord,\n  setTargetCord,\n  runningAlgo,\n  finishedAlgo,\n  targetCord\n}) => {\n  _s();\n\n  const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none); // fill nodes in the grid\n\n  console.log(\"RERENDERING GRID\");\n  const nodes = [];\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeId = `${x}:${y}`;\n      let startingState = [nodeTypeEnum.none];\n\n      if (x === 1 && y === 1) {\n        startingState.unshift(nodeTypeEnum.start);\n      } else if (x === rows - 2 && y === cols - 2) {\n        startingState.unshift(nodeTypeEnum.target);\n      }\n\n      nodes.push( /*#__PURE__*/_jsxDEV(Node, {\n        nodeId: nodeId,\n        size: nodeSize,\n        setGridState: setGridState,\n        draggingSelection: draggingSelection,\n        setDraggingSelection: setDraggingSelection,\n        setStartCord: setStartCord,\n        setTargetCord: setTargetCord,\n        runningAlgo: runningAlgo,\n        selectedObstacle: selectedObstacle,\n        startingState: startingState\n      }, nodeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  const gridDimensions = {\n    width: cols * nodeSize + cols,\n    height: rows * nodeSize + rows\n  };\n  const containerStyle = {\n    paddingLeft: padding,\n    paddingRight: padding\n  };\n  const statsBoxStyle = {\n    left: parseInt(targetCord.split(':')[0]),\n    top: parseInt(targetCord.split(':')[1])\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: gridDimensions,\n      children: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this), finishedAlgo && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: statsBoxStyle,\n      className: \"stats-box\",\n      children: \"Helloooooooooo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 9\n  }, this);\n}, \"Y0DbbnglWSuKMG8hlxKGylkneV0=\"));\n_c2 = Grid;\nexport default Grid;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Grid$React.memo\");\n$RefreshReg$(_c2, \"Grid\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js"],"names":["Node","React","useState","nodeTypeEnum","Grid","memo","rows","cols","padding","nodeSize","setGridState","selectedObstacle","setStartCord","setTargetCord","runningAlgo","finishedAlgo","targetCord","draggingSelection","setDraggingSelection","none","console","log","nodes","x","y","nodeId","startingState","unshift","start","target","push","gridDimensions","width","height","containerStyle","paddingLeft","paddingRight","statsBoxStyle","left","parseInt","split","top"],"mappings":"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","sourcesContent":["import Node from './Node.js'\nimport React from 'react'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = React.memo(({ rows, cols, padding, nodeSize, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo, finishedAlgo, targetCord }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    console.log(\"RERENDERING GRID\");\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            let startingState = [nodeTypeEnum.none];\n            if (x === 1 && y === 1) {\n                startingState.unshift(nodeTypeEnum.start);\n            }\n            else if (x === (rows - 2) && y === (cols - 2)) {\n                startingState.unshift(nodeTypeEnum.target);\n            }\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} startingState={startingState} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    const statsBoxStyle = {\n        left: parseInt(targetCord.split(':')[0]),\n        top: parseInt(targetCord.split(':')[1])\n    };\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n            {finishedAlgo && <div style={statsBoxStyle} className='stats-box' >Helloooooooooo</div>}\n        </div>\n    )\n});\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}