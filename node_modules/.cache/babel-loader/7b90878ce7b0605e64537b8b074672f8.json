{"ast":null,"code":"import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";var _nodeColorClass,_nodeWeight;var nodeTypeEnum={'none':0,'target':1,'path':2,'start':3,'remObstacle':4,'visited':5,'visiting':6,'wall':7,'weighted-100':8,'weighted-80':9,'weighted-60':10,'weighted-40':11,'weighted-20':12};Object.freeze(nodeTypeEnum);var nodeColorClass=(_nodeColorClass={},_defineProperty(_nodeColorClass,nodeTypeEnum.none,'empty'),_defineProperty(_nodeColorClass,nodeTypeEnum.target,'target'),_defineProperty(_nodeColorClass,nodeTypeEnum.wall,'wall'),_defineProperty(_nodeColorClass,nodeTypeEnum.visiting,'visiting'),_defineProperty(_nodeColorClass,nodeTypeEnum.start,'start'),_defineProperty(_nodeColorClass,nodeTypeEnum.visited,'visited'),_defineProperty(_nodeColorClass,nodeTypeEnum.path,'path'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-100\"],'weighted-100'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-80\"],'weighted-80'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-60\"],'weighted-60'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-40\"],'weighted-40'),_defineProperty(_nodeColorClass,nodeTypeEnum[\"weighted-20\"],'weighted-20'),_nodeColorClass);Object.freeze(nodeColorClass);var nodeWeight=(_nodeWeight={},_defineProperty(_nodeWeight,nodeTypeEnum.none,1),_defineProperty(_nodeWeight,nodeTypeEnum.target,1),_defineProperty(_nodeWeight,nodeTypeEnum.wall,Infinity),_defineProperty(_nodeWeight,nodeTypeEnum.start,1),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-100\"],100),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-80\"],80),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-60\"],60),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-40\"],40),_defineProperty(_nodeWeight,nodeTypeEnum[\"weighted-20\"],20),_nodeWeight);Object.freeze(nodeWeight);var pathAlgos=[\"Dijkstra's\",\"A-Star\",\"BFS\",\"DFS\"];var unweightedPathAlgos=[\"DFS\",\"BFS\"];var terrainAlgos=[\"Algo 1\",\"Algo 2\"];var obstacleTypes=['Wall (∞)','Weighted (100)','Weighted (80)','Weighted (60)','Weighted (40)','Weighted (20)'];var obsEnum={'Wall (∞)':'wall','Weighted (100)':'weighted-100','Weighted (80)':'weighted-80','Weighted (60)':'weighted-60','Weighted (40)':'weighted-40','Weighted (20)':'weighted-20'};export var getNodeTypeEnum=function getNodeTypeEnum(key){return nodeTypeEnum[key];};export var getNodeColorClass=function getNodeColorClass(key){return nodeColorClass[key];};export var getNodeWeight=function getNodeWeight(key){return nodeWeight[key];};export var getPathAlgos=function getPathAlgos(){return pathAlgos;};export var getTerrainAlgos=function getTerrainAlgos(){return terrainAlgos;};export var getObstacleTypes=function getObstacleTypes(){return obstacleTypes;};export var getObstacleEnum=function getObstacleEnum(key){return obsEnum[key];};export var getNeighbourNodes=function getNeighbourNodes(node,rows,cols,gridState){var row=parseInt(node.split(':')[0]);var col=parseInt(node.split(':')[1]);var res=[];if(row-1>=0&&gridState[\"\".concat(row-1,\":\").concat(col)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row-1,\":\").concat(col));}if(col+1<cols&&gridState[\"\".concat(row,\":\").concat(col+1)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row,\":\").concat(col+1));}if(row+1<rows&&gridState[\"\".concat(row+1,\":\").concat(col)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row+1,\":\").concat(col));}if(col-1>=0&&gridState[\"\".concat(row,\":\").concat(col-1)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row,\":\").concat(col-1));}return res;};export var isAlgoUnweighted=function isAlgoUnweighted(algo){return unweightedPathAlgos.includes(algo);};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","visiting","start","visited","path","nodeWeight","Infinity","pathAlgos","unweightedPathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getNodeColorClass","getNodeWeight","getPathAlgos","getTerrainAlgos","getObstacleTypes","getObstacleEnum","getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","push","isAlgoUnweighted","algo","includes"],"mappings":"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","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'visiting': 6,\n    'wall': 7,\n    'weighted-100': 8,\n    'weighted-80': 9,\n    'weighted-60': 10,\n    'weighted-40': 11,\n    'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst unweightedPathAlgos = [\"DFS\", \"BFS\"];\n\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n"]},"metadata":{},"sourceType":"module"}