{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState, useLayoutEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [size, setSize] = useState([0, 0]);\n  const [dim, setDim] = useState([0, 0]);\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const nodeSize = 35;\n\n  const updateWindow = () => {\n    setSize([window.innerHeight, window.innerWidth]);\n    const topGridMargin = 200;\n    const sideGridMargin = 100;\n    const adjustedWinHeight = size[0] - topGridMargin;\n    const adjustedWinWidth = size[1] - sideGridMargin;\n    const rows = parseInt(adjustedWinHeight / nodeSize);\n    const cols = parseInt(adjustedWinWidth / nodeSize);\n    setDim([rows, cols]);\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n    setGridState(gridMap);\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateSize);\n    updateWindow();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: dim[0],\n      cols: dim[1],\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"6Sd4hDILX+Ya/Jg9wduAb+zj3N4=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","useLayoutEffect","App","size","setSize","dim","setDim","gridState","setGridState","selectedObstacle","setSelectedObstacle","nodeSize","updateWindow","window","innerHeight","innerWidth","topGridMargin","sideGridMargin","adjustedWinHeight","adjustedWinWidth","rows","parseInt","cols","gridMap","x","y","nodeState","unshift","defaultSelectedObstacle","addEventListener","updateSize","removeEventListener"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useLayoutEffect } from 'react'\n\nfunction App() {\n  const [size, setSize] = useState([0, 0]);\n  const [dim, setDim] = useState([0, 0]);\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const nodeSize = 35;\n\n  const updateWindow = () => {\n    setSize([window.innerHeight, window.innerWidth]);\n    const topGridMargin = 200;\n    const sideGridMargin = 100;\n\n    const adjustedWinHeight = size[0] - topGridMargin;\n    const adjustedWinWidth = size[1] - sideGridMargin;\n\n    const rows = parseInt(adjustedWinHeight / nodeSize);\n    const cols = parseInt(adjustedWinWidth / nodeSize);\n    setDim([rows, cols]);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n\n    setGridState(gridMap);\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  useLayoutEffect(() => {\n    window.addEventListener('resize', updateSize);\n    updateWindow();\n    return () => window.removeEventListener('resize', updateSize);\n  }, []);\n\n  return (\n    <>\n      <Header />\n      <Grid rows={dim[0]} cols={dim[1]} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}