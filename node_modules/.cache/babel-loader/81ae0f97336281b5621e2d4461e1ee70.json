{"ast":null,"code":"import { nodeTypeEnum } from '../../utils/constants.js';\nimport { sleep, getRandomNum } from '../../utils/helper.js';\nconst HORIZONTAL = 0;\nconst VERTICAL = 1;\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  // make border around the screen\n  for (var x = 0; x < rows; x++) {\n    for (var y = 0; y < cols; y++) {\n      const currCord = `${x}:${y}`;\n      const nodeStateFunc = gridState[currCord][1];\n\n      if (x === 0 || x === rows - 1 || y === 0 || y === cols - 1) {\n        await sleep(timeout);\n        let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n\n        if (currCord === startCord) {\n          state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n        } else if (currCord === targetCord) {\n          state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n        }\n\n        nodeStateFunc(prevState => state);\n        setGridState(prevState => ({ ...prevState,\n          [currCord]: [state, prevState[currCord][1]]\n        }));\n      }\n    }\n  } // await divide(1, 1, rows - 2, cols - 2, gridState, setGridState, timeout);\n\n\n  await divide(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols);\n};\n\nconst divide = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols) => {\n  const width = endCol - startCol;\n  const height = endRow - startRow;\n\n  if (width < 2 || height < 2) {\n    return;\n  }\n\n  if (width < height) {\n    // cutting horizontally\n    const skip = getRandomNum(startCol, endCol);\n    let randRow = getRandomNum(startRow + 1, endRow - 1);\n\n    while (randRow === previousBisection) {\n      randRow = getRandomNum(startRow + 1, endRow - 1);\n    }\n\n    for (let i = startCol; i <= endCol; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${randRow}:${i}`;\n      console.log(startRow, endRow, currCord);\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    if (randRow - 1 > 0) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, randRow - 1, startCol, endCol, timeout, rows, cols);\n    }\n\n    if (randRow + 1 < rows) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, randRow + 1, endRow, startCol, endCol, timeout, rows, cols);\n    }\n  } else {\n    // divide vertically \n    const skip = getRandomNum(startRow, endRow);\n    let randCol = getRandomNum(startCol + 1, endCol - 1);\n\n    while (randCol === previousBisection) {\n      randCol = getRandomNum(startCol + 1, endCol - 1);\n    }\n\n    console.log(startCol, endCol, randCol);\n\n    for (let i = startRow; i <= endRow; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${i}:${randCol}`;\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    if (randCol - 1 > 0) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, randCol - 1, timeout, rows, cols);\n    }\n\n    if (randCol + 1 < cols) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, randCol + 1, endCol, timeout, rows, cols);\n    }\n  }\n}; // const divide = async (x, y, height, width, gridState, setGridState, timeout) => {\n//     let orientation = HORIZONTAL; // horizontal\n//     let newWall = 0;\n//     let newGap = 0;\n//     let newHeight = 0;\n//     let newWidth = 0;\n//     let yPair = 0;\n//     let xPair = 0;\n//     let newHeightPair = 0;\n//     let newWidthPair = 0;\n//     if (width < height) {\n//         orientation = HORIZONTAL;\n//     }\n//     else if (height > width) {\n//         orientation = VERTICAL;\n//     }\n//     else {\n//         orientation = getRandomNum(HORIZONTAL, VERTICAL);\n//     }\n//     if (orientation === HORIZONTAL) {\n//         // cutting horizontally\n//         if (height < 5) {\n//             return;\n//         }\n//         let randomWall = getRandomNum(2, height - 3);\n//         let randomGap = getRandomNum(1, width - 2);\n//         newWall = y + Math.floor(randomWall / 2) * 2; // make sure the wall is on an odd co-ordinate\n//         newGap = x + (Math.floor(randomGap / 2) * 2) + 1; // make sure the gap is on an even co-ordinate\n//         for (let i = x; i < (x + width - 1); i++) {\n//             if (i === newGap) {\n//                 continue;\n//             }\n//             const currCord = `${newWall}:${i}`;\n//             console.log(\"currCord:\", currCord, \", y :\", y);\n//             const nodeStateFunc = gridState[currCord][1];\n//             nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n//             setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n//             await sleep(timeout);\n//         }\n//         newHeight = newWall - y + 1;\n//         newWidth = width\n//         yPair = newWall;\n//         xPair = x;\n//         newHeightPair = y + height - newWall;\n//         newWidthPair = width;\n//     }\n//     else if (orientation === VERTICAL) {\n//         // cutting vertically\n//         if (width < 5) {\n//             return;\n//         }\n//         let randomWall = getRandomNum(2, width - 3);\n//         let randomGap = getRandomNum(1, height - 2);\n//         newWall = x + Math.floor(randomWall / 2) * 2; // make sure the wall is on an even co-ordinate\n//         newGap = y + (Math.floor(randomGap / 2) * 2) + 1; // make sure the gap is on an odd co-ordinate\n//         for (let i = y; i < (y + height - 1); i++) {\n//             if (i === newGap) {\n//                 continue;\n//             }\n//             const currCord = `${i}:${newWall}`;\n//             console.log(\"currCord:\", currCord, \", x :\", x);\n//             const nodeStateFunc = gridState[currCord][1];\n//             nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n//             setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n//             await sleep(timeout);\n//         }\n//         newHeight = height;\n//         newWidth = newWall - x + 1;\n//         yPair = y;\n//         xPair = newWall;\n//         newHeightPair = height;\n//         newWidthPair = x + width - newWall;\n//     }\n//     await divide(y, x, newHeight, newWidth, gridState, setGridState, timeout);\n//     await divide(yPair, xPair, newHeightPair, newWidthPair, gridState, setGridState, timeout);\n// };","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/recursiveDivision.js"],"names":["nodeTypeEnum","sleep","getRandomNum","HORIZONTAL","VERTICAL","recursiveDivision","startCord","targetCord","gridState","setGridState","rows","cols","timeout","x","y","currCord","nodeStateFunc","state","wall","none","start","target","prevState","divide","startRow","endRow","startCol","endCol","width","height","skip","randRow","previousBisection","i","console","log","divideScreen","randCol"],"mappings":"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","sourcesContent":["import { nodeTypeEnum } from '../../utils/constants.js'\nimport { sleep, getRandomNum } from '../../utils/helper.js'\n\nconst HORIZONTAL = 0;\nconst VERTICAL = 1;\n\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    // make border around the screen\n    for (var x = 0; x < rows; x++) {\n        for (var y = 0; y < cols; y++) {\n            const currCord = `${x}:${y}`;\n            const nodeStateFunc = gridState[currCord][1];\n            if (x === 0 || x === (rows - 1) || y === 0 || y === (cols - 1)) {\n                await sleep(timeout);\n                let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n                if (currCord === startCord) {\n                    state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                else if (currCord === targetCord) {\n                    state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                nodeStateFunc(prevState => state);\n                setGridState(prevState => ({ ...prevState, [currCord]: [state, prevState[currCord][1]] }));\n            }\n        }\n    }\n\n    // await divide(1, 1, rows - 2, cols - 2, gridState, setGridState, timeout);\n    await divide(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols);\n};\n\nconst divide = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols) => {\n    const width = endCol - startCol;\n    const height = endRow - startRow;\n\n    if (width < 2 || height < 2) {\n        return;\n    }\n\n    if (width < height) {\n        // cutting horizontally\n        const skip = getRandomNum(startCol, endCol);\n        let randRow = getRandomNum(startRow + 1, endRow - 1);\n        while (randRow === previousBisection) {\n            randRow = getRandomNum(startRow + 1, endRow - 1);\n        }\n\n        for (let i = startCol; i <= endCol; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${randRow}:${i}`;\n            console.log(startRow, endRow, currCord);\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        if (randRow - 1 > 0) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, randRow - 1, startCol, endCol, timeout, rows, cols);\n        }\n        if ((randRow + 1) < rows) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, randRow + 1, endRow, startCol, endCol, timeout, rows, cols);\n        }\n    }\n    else {\n        // divide vertically \n        const skip = getRandomNum(startRow, endRow);\n        let randCol = getRandomNum(startCol + 1, endCol - 1);\n        while (randCol === previousBisection) {\n            randCol = getRandomNum(startCol + 1, endCol - 1);\n        }\n        console.log(startCol, endCol, randCol)\n        for (let i = startRow; i <= endRow; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${i}:${randCol}`;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        if (randCol - 1 > 0) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, randCol - 1, timeout, rows, cols);\n        }\n        if (randCol + 1 < cols) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, randCol + 1, endCol, timeout, rows, cols);\n        }\n    }\n};\n\n// const divide = async (x, y, height, width, gridState, setGridState, timeout) => {\n//     let orientation = HORIZONTAL; // horizontal\n//     let newWall = 0;\n//     let newGap = 0;\n//     let newHeight = 0;\n//     let newWidth = 0;\n//     let yPair = 0;\n//     let xPair = 0;\n//     let newHeightPair = 0;\n//     let newWidthPair = 0;\n\n//     if (width < height) {\n//         orientation = HORIZONTAL;\n//     }\n//     else if (height > width) {\n//         orientation = VERTICAL;\n//     }\n//     else {\n//         orientation = getRandomNum(HORIZONTAL, VERTICAL);\n//     }\n\n//     if (orientation === HORIZONTAL) {\n//         // cutting horizontally\n//         if (height < 5) {\n//             return;\n//         }\n\n//         let randomWall = getRandomNum(2, height - 3);\n//         let randomGap = getRandomNum(1, width - 2);\n\n//         newWall = y + Math.floor(randomWall / 2) * 2; // make sure the wall is on an odd co-ordinate\n//         newGap = x + (Math.floor(randomGap / 2) * 2) + 1; // make sure the gap is on an even co-ordinate\n\n//         for (let i = x; i < (x + width - 1); i++) {\n//             if (i === newGap) {\n//                 continue;\n//             }\n//             const currCord = `${newWall}:${i}`;\n//             console.log(\"currCord:\", currCord, \", y :\", y);\n//             const nodeStateFunc = gridState[currCord][1];\n//             nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n//             setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n//             await sleep(timeout);\n//         }\n\n//         newHeight = newWall - y + 1;\n//         newWidth = width\n\n//         yPair = newWall;\n//         xPair = x;\n//         newHeightPair = y + height - newWall;\n//         newWidthPair = width;\n//     }\n//     else if (orientation === VERTICAL) {\n//         // cutting vertically\n//         if (width < 5) {\n//             return;\n//         }\n\n//         let randomWall = getRandomNum(2, width - 3);\n//         let randomGap = getRandomNum(1, height - 2);\n\n//         newWall = x + Math.floor(randomWall / 2) * 2; // make sure the wall is on an even co-ordinate\n//         newGap = y + (Math.floor(randomGap / 2) * 2) + 1; // make sure the gap is on an odd co-ordinate\n\n//         for (let i = y; i < (y + height - 1); i++) {\n//             if (i === newGap) {\n//                 continue;\n//             }\n\n//             const currCord = `${i}:${newWall}`;\n//             console.log(\"currCord:\", currCord, \", x :\", x);\n//             const nodeStateFunc = gridState[currCord][1];\n//             nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n//             setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n//             await sleep(timeout);\n//         }\n\n//         newHeight = height;\n//         newWidth = newWall - x + 1;\n\n//         yPair = y;\n//         xPair = newWall;\n//         newHeightPair = height;\n//         newWidthPair = x + width - newWall;\n//     }\n\n//     await divide(y, x, newHeight, newWidth, gridState, setGridState, timeout);\n//     await divide(yPair, xPair, newHeightPair, newWidthPair, gridState, setGridState, timeout);\n// };"]},"metadata":{},"sourceType":"module"}