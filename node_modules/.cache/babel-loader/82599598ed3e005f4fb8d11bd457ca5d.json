{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Node from './Node.js';\nimport { useState } from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = ({\n  rows,\n  cols,\n  nodeSize\n}) => {\n  _s();\n\n  const [selectingStart, setSelectingStart] = useState(false);\n  const [selectingTarget, setSelectingTarget] = useState(false);\n  const [selectingObstacle, setSelectingObstacle] = useState(false); // fill nodes in the grid\n\n  const nodes = [];\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let type = [getNodeTypeEnum('none')];\n\n      if (x === 0 && y === 0) {\n        type.unshift(getNodeTypeEnum('start'));\n      } else if (x === rows - 1 && y === cols - 1) {\n        type.unshift(getNodeTypeEnum('target'));\n      }\n\n      nodes.push( /*#__PURE__*/_jsxDEV(Node, {\n        size: nodeSize,\n        nodeType: type,\n        selectingStart: selectingStart,\n        setSelectingStart: setSelectingStart,\n        selectingTarget: selectingTarget,\n        setSelectingTarget: setSelectingTarget,\n        selectingObstacle: selectingObstacle,\n        setSelectingObstacle: setSelectingObstacle\n      }, [x, y], false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  const gridStyle = {\n    marginTop: 150,\n    width: cols * nodeSize + cols,\n    height: rows * nodeSize + rows\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: gridStyle,\n    children: nodes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"08bMAKfu5bDNlNV5OmUBHp42S5s=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js"],"names":["React","Node","useState","getNodeTypeEnum","Grid","rows","cols","nodeSize","selectingStart","setSelectingStart","selectingTarget","setSelectingTarget","selectingObstacle","setSelectingObstacle","nodes","x","y","type","unshift","push","gridStyle","marginTop","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA8B;AAAA;;AACvC,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAACQ,eAAD,EAAkBC,kBAAlB,IAAwCT,QAAQ,CAAC,KAAD,CAAtD;AACA,QAAM,CAACU,iBAAD,EAAoBC,oBAApB,IAA4CX,QAAQ,CAAC,KAAD,CAA1D,CAHuC,CAKvC;;AACA,QAAMY,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAApB,EAA0BU,CAAC,EAA3B,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,IAApB,EAA0BU,CAAC,EAA3B,EAA+B;AAC3B,UAAIC,IAAI,GAAG,CAACd,eAAe,CAAC,MAAD,CAAhB,CAAX;;AAEA,UAAIY,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACpBC,QAAAA,IAAI,CAACC,OAAL,CAAaf,eAAe,CAAC,OAAD,CAA5B;AACH,OAFD,MAGK,IAAIY,CAAC,KAAMV,IAAI,GAAG,CAAd,IAAoBW,CAAC,KAAMV,IAAI,GAAG,CAAtC,EAA0C;AAC3CW,QAAAA,IAAI,CAACC,OAAL,CAAaf,eAAe,CAAC,QAAD,CAA5B;AACH;;AAEDW,MAAAA,KAAK,CAACK,IAAN,eAAW,QAAC,IAAD;AAAM,QAAA,IAAI,EAAEZ,QAAZ;AAAsB,QAAA,QAAQ,EAAEU,IAAhC;AAAsC,QAAA,cAAc,EAAET,cAAtD;AAAsE,QAAA,iBAAiB,EAAEC,iBAAzF;AAA4G,QAAA,eAAe,EAAEC,eAA7H;AAA8I,QAAA,kBAAkB,EAAEC,kBAAlK;AAAsL,QAAA,iBAAiB,EAAEC,iBAAzM;AAA4N,QAAA,oBAAoB,EAAEC;AAAlP,SAA6Q,CAACE,CAAD,EAAIC,CAAJ,CAA7Q;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACJ;;AAED,QAAMI,SAAS,GAAG;AACdC,IAAAA,SAAS,EAAE,GADG;AAEdC,IAAAA,KAAK,EAAGhB,IAAI,GAAGC,QAAR,GAAoBD,IAFb;AAGdiB,IAAAA,MAAM,EAAGlB,IAAI,GAAGE,QAAR,GAAoBF;AAHd,GAAlB;AAMA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAEe,SAA7B;AAAA,cACMN;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAjCD;;GAAMV,I;;KAAAA,I;AAmCN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, nodeSize }) => {\n    const [selectingStart, setSelectingStart] = useState(false);\n    const [selectingTarget, setSelectingTarget] = useState(false);\n    const [selectingObstacle, setSelectingObstacle] = useState(false);\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let type = [getNodeTypeEnum('none')];\n\n            if (x === 0 && y === 0) {\n                type.unshift(getNodeTypeEnum('start'));\n            }\n            else if (x === (rows - 1) && y === (cols - 1)) {\n                type.unshift(getNodeTypeEnum('target'));\n            }\n\n            nodes.push(<Node size={nodeSize} nodeType={type} selectingStart={selectingStart} setSelectingStart={setSelectingStart} selectingTarget={selectingTarget} setSelectingTarget={setSelectingTarget} selectingObstacle={selectingObstacle} setSelectingObstacle={setSelectingObstacle} key={[x, y]} />);\n        }\n    }\n\n    const gridStyle = {\n        marginTop: 150,\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    return (\n        <div className='grid' style={gridStyle}>\n            { nodes}\n        </div >\n    )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}