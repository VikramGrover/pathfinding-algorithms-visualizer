{"ast":null,"code":"import { getNodeWeight, getNeighbourNodes, createPath, findMinPriorityNode, nodeTypeEnum } from '../../utils/util.js';\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  let totalCosts = {};\n  let prevNodes = {};\n  let minPQ = {};\n  let visited = {};\n  totalCosts[startCord] = 0;\n  minPQ[startCord] = 0;\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let cord = `${x}:${y}`;\n\n      if (cord !== startCord) {\n        totalCosts[cord] = Infinity;\n      }\n    }\n  }\n\n  while (Object.keys(minPQ).length > 0) {\n    const minKey = findMinPriorityNode(minPQ);\n    delete minPQ[minKey];\n    visited[minKey] = 1;\n\n    if (minKey !== startCord && minKey !== targetCord) {\n      setTimeout(() => {\n        setGridState(prevState => ({ ...prevState,\n          [minKey]: [nodeTypeEnum.visited, ...prevState[minKey].slice(1)]\n        }));\n      }, timeout);\n    } else if (minKey === targetCord) {\n      return createPath(startCord, targetCord, prevNodes);\n    }\n\n    const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n\n    for (const neighbour of neighbours) {\n      const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n      if (neighbour in visited) {\n        continue;\n      }\n\n      if (neighbour in minPQ && currPath < totalCosts[neighbour] || !(neighbour in minPQ)) {\n        totalCosts[neighbour] = currPath;\n        prevNodes[neighbour] = minKey;\n        minPQ[neighbour] = currPath;\n\n        if (neighbour !== targetCord) {\n          setTimeout(() => {\n            setGridState(prevState => ({ ...prevState,\n              [neighbour]: [getNodeTypeEnum('visiting'), ...prevState[neighbour]]\n            }));\n          }, timeout);\n        }\n      }\n    }\n  }\n\n  return [];\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js"],"names":["getNodeWeight","getNeighbourNodes","createPath","findMinPriorityNode","nodeTypeEnum","dijkstras","startCord","targetCord","gridState","setGridState","rows","cols","timeout","totalCosts","prevNodes","minPQ","visited","x","y","cord","Infinity","Object","keys","length","minKey","setTimeout","prevState","slice","neighbours","neighbour","currPath","getNodeTypeEnum"],"mappings":"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","sourcesContent":["import { getNodeWeight, getNeighbourNodes, createPath, findMinPriorityNode, nodeTypeEnum } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [nodeTypeEnum.visited, ...prevState[minKey].slice(1)] }));\n            }, timeout);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [getNodeTypeEnum('visiting'), ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n            }\n        }\n    }\n\n    return [];\n};"]},"metadata":{},"sourceType":"module"}