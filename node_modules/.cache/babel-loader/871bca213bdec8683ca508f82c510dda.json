{"ast":null,"code":"import { getNodeTypeEnum, getNodeWeight } from '../../utils/util.js';\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n  console.log(\"STARTING DIJSTRAS\");\n  let totalCosts = {};\n  let prevNodes = {};\n  let minPQ = {};\n  let visited = {};\n  totalCosts[startCord] = 0;\n  minPQ[startCord] = 0;\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let cord = `${x}:${y}`;\n\n      if (cord !== startCord) {\n        totalCosts[cord] = Infinity;\n      }\n    }\n  }\n\n  while (Object.keys(minPQ).length > 0) {\n    const minKey = findMinPriorityNode(minPQ);\n    delete minPQ[minKey];\n    visited[minKey] = 1;\n\n    if (minKey !== startCord && minKey !== targetCord) {\n      setGridState(prevState => ({ ...prevState,\n        [minKey]: [getNodeTypeEnum('visited')]\n      }));\n    } else if (minKey === targetCord) {\n      createPath(startCord, targetCord, prevNodes, setGridState);\n      console.log(\"WE ARE DONE DIJKSTRAS\");\n      return;\n    }\n\n    const neighbours = getNeighbourNodes(minKey, rows, cols);\n\n    for (const neighbour of neighbours) {\n      const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n      if (neighbour in visited) {\n        continue;\n      }\n\n      if (neighbour in minPQ && currPath < totalCosts[neighbour] || !(neighbour in minPQ)) {\n        totalCosts[neighbour] = currPath;\n        prevNodes[neighbour] = minKey;\n        minPQ[neighbour] = currPath;\n      }\n    }\n  }\n};\n\nconst createPath = (startCord, targetCord, prevNodes, setGridState) => {\n  let cord = targetCord;\n  let path = [];\n\n  while (true) {\n    cord = prevNodes[cord];\n\n    if (cord === startCord) {\n      break;\n    }\n\n    path.push(cord);\n  }\n};\n\nconst getNeighbourNodes = (node, rows, cols) => {\n  const row = parseInt(node.split(':')[0]);\n  const col = parseInt(node.split(':')[1]);\n  let res = [];\n\n  if (row - 1 >= 0) {\n    res.push(`${row - 1}:${col}`);\n  }\n\n  if (row + 1 < rows) {\n    res.push(`${row + 1}:${col}`);\n  }\n\n  if (col - 1 >= 0) {\n    res.push(`${row}:${col - 1}`);\n  }\n\n  if (col + 1 < cols) {\n    res.push(`${row}:${col + 1}`);\n  }\n\n  return res;\n};\n\nconst findMinPriorityNode = minPQ => {\n  let minPriority = Math.min(...Object.values(minPQ));\n\n  for (const key in minPQ) {\n    if (minPQ[key] === minPriority) {\n      return key;\n    }\n  }\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dijkstras.js"],"names":["getNodeTypeEnum","getNodeWeight","dijkstras","startCord","targetCord","gridState","setGridState","rows","cols","console","log","totalCosts","prevNodes","minPQ","visited","x","y","cord","Infinity","Object","keys","length","minKey","findMinPriorityNode","prevState","createPath","neighbours","getNeighbourNodes","neighbour","currPath","path","push","node","row","parseInt","split","col","res","minPriority","Math","min","values","key"],"mappings":"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","sourcesContent":["import { getNodeTypeEnum, getNodeWeight } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    console.log(\"STARTING DIJSTRAS\");\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setGridState(prevState => ({ ...prevState, [minKey]: [getNodeTypeEnum('visited')] }));\n        }\n        else if (minKey === targetCord) {\n            createPath(startCord, targetCord, prevNodes, setGridState);\n            console.log(\"WE ARE DONE DIJKSTRAS\");\n            return;\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n            }\n        }\n    }\n};\n\nconst createPath = (startCord, targetCord, prevNodes, setGridState) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n};\n\nconst getNeighbourNodes = (node, rows, cols) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if (row - 1 >= 0) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if (row + 1 < rows) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if (col - 1 >= 0) {\n        res.push(`${row}:${col - 1}`)\n    }\n    if (col + 1 < cols) {\n        res.push(`${row}:${col + 1}`)\n    }\n\n    return res;\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}