{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 60;\n  useEffect(() => {\n    resetBoard();\n  }, []); // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + margin * 2) - margin;\n    const adjustedWinWidth = window.innerWidth - 2 * margin;\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState >= getNodeTypeEnum('obstacle')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => gridMap);\n    }\n  };\n\n  const clearForReRun = () => {\n    console.log('CLEARING GRID FOR RE RERUN');\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('path')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      console.log(\"DONE CLEARING FOR RE RUN\");\n      setGridState(prevState => gridMap);\n    }\n\n    return gridMap;\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      height: navBarHeight,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      resetBoard: resetBoard,\n      clearObstacles: clearObstacles,\n      clearForReRun: clearForReRun\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"vnNIM6gVtJKrMAyfV1cPDmm3ux0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","useEffect","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","margin","nodeSize","navBarHeight","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","unshift","defaultSelectedObstacle","clearObstacles","change","id","currState","prevState","clearForReRun","console","log"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 60;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 2)) - margin;\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState >= getNodeTypeEnum('obstacle')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearForReRun = () => {\n    console.log('CLEARING GRID FOR RE RERUN');\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('path')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      console.log(\"DONE CLEARING FOR RE RUN\")\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} resetBoard={resetBoard} clearObstacles={clearObstacles} clearForReRun={clearForReRun} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}