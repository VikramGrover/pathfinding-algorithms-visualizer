{"ast":null,"code":"import _slicedToArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Grid from'./components/Grid.js';import Header from'./components/Header.js';import{getNodeTypeEnum}from'./utils/util.js';import{useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),gridState=_useState2[0],setGridState=_useState2[1];var _useState3=useState({}),_useState4=_slicedToArray(_useState3,2),selectedObstacle=_useState4[0],setSelectedObstacle=_useState4[1];var _useState5=useState(0),_useState6=_slicedToArray(_useState5,2),rows=_useState6[0],setRows=_useState6[1];var _useState7=useState(0),_useState8=_slicedToArray(_useState7,2),cols=_useState8[0],setCols=_useState8[1];var _useState9=useState('0:0'),_useState10=_slicedToArray(_useState9,2),startCord=_useState10[0],setStartCord=_useState10[1];var _useState11=useState('0:0'),_useState12=_slicedToArray(_useState11,2),targetCord=_useState12[0],setTargetCord=_useState12[1];var _useState13=useState(false),_useState14=_slicedToArray(_useState13,2),runningAlgo=_useState14[0],setRunningAlgo=_useState14[1];var margin=30;var nodeSize=28;var navBarHeight=80;useEffect(function(){resetBoard();},[]);// useEffect(() => {\n//   window.addEventListener(\"resize\", resetBoard);\n//   return () => window.removeEventListener(\"resize\", resetBoard)\n// }, []);\nvar resetBoard=function resetBoard(){var adjustedWinHeight=window.innerHeight-(navBarHeight+margin*2)-margin;var adjustedWinWidth=window.innerWidth-2*margin;var rows=parseInt(adjustedWinHeight/(nodeSize+1));var cols=parseInt(adjustedWinWidth/(nodeSize+1));setRunningAlgo(false);setRows(rows);setCols(cols);setStartCord('0:0');setTargetCord(\"\".concat(rows-1,\":\").concat(cols-1));var gridMap={};for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var nodeState=[getNodeTypeEnum('none')];if(x===0&&y===0){nodeState.unshift(getNodeTypeEnum('start'));}else if(x===rows-1&&y===cols-1){nodeState.unshift(getNodeTypeEnum('target'));}gridMap[\"\".concat(x,\":\").concat(y)]=nodeState;}}setGridState(gridMap);var defaultSelectedObstacle={'obstacle':false};setSelectedObstacle(defaultSelectedObstacle);};var clearObstacles=function clearObstacles(){var gridMap={};var change=false;for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var id=\"\".concat(x,\":\").concat(y);gridMap[id]=gridState[id];var currState=gridState[id][0];if(currState>=getNodeTypeEnum('obstacle')){gridMap[id]=[getNodeTypeEnum('none')];change=true;}}}if(change){setGridState(function(prevState){return gridMap;});}};var clearForReRun=function clearForReRun(){console.log('CLEARING GRID FOR RE RERUN');var gridMap={};var change=false;for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var id=\"\".concat(x,\":\").concat(y);gridMap[id]=gridState[id];var currState=gridState[id][0];if(currState===getNodeTypeEnum('visited')||currState===getNodeTypeEnum('path')){gridMap[id]=[getNodeTypeEnum('none')];change=true;}}}if(change){console.log(\"DONE CLEARING FOR RE RUN\");setGridState(function(prevState){return gridMap;});}setRunningAlgo(true);return gridMap;};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{rows:rows,cols:cols,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,padding:margin,height:navBarHeight,setGridState:setGridState,startCord:startCord,targetCord:targetCord,resetBoard:resetBoard,clearObstacles:clearObstacles,clearForReRun:clearForReRun}),/*#__PURE__*/_jsx(Grid,{rows:rows,cols:cols,padding:margin,nodeSize:nodeSize,gridState:gridState,setGridState:setGridState,selectedObstacle:selectedObstacle,setStartCord:setStartCord,setTargetCord:setTargetCord,runningAlgo:runningAlgo})]});}export default App;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","useEffect","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","margin","nodeSize","navBarHeight","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","unshift","defaultSelectedObstacle","clearObstacles","change","id","currState","prevState","clearForReRun","console","log"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 80;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 2)) - margin;\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState >= getNodeTypeEnum('obstacle')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearForReRun = () => {\n    console.log('CLEARING GRID FOR RE RERUN');\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('path')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      console.log(\"DONE CLEARING FOR RE RUN\")\n      setGridState(prevState => (gridMap));\n    }\n\n    setRunningAlgo(true);\n    return gridMap;\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} resetBoard={resetBoard} clearObstacles={clearObstacles} clearForReRun={clearForReRun} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}