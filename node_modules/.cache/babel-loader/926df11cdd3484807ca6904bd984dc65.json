{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport InfoBox from './components/InfoBox.js';\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js';\nimport { useState, useEffect } from 'react';\nimport { isAlgoUnweighted } from './utils/helper.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    initializeGrid();\n  }, []); // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const initializeGrid = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + margin * 3);\n    const adjustedWinWidth = window.innerWidth - 2 * margin;\n    const currRows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const currCols = parseInt(adjustedWinWidth / (nodeSize + 1));\n    setRunningAlgo(false);\n    setRows(currRows);\n    setCols(currCols);\n    setStartCord('1:1');\n    setTargetCord(`${currRows - 2}:${currCols - 2}`);\n  };\n\n  const clearPath = () => {\n    console.log(\"CLEARING PATH\");\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && nodeState[1] <= nodeTypeEnum.visiting) {\n          nodeState.splice(1, 1);\n        } else if (currState <= nodeTypeEnum.visiting) {\n          nodeState.splice(0, 1);\n        }\n\n        nodeStateFunc(prevState => nodeState);\n      }\n    }\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0]; // check under start and target node for obstacle\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && nodeState[1] >= nodeTypeEnum.wall) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState,\n            [id]: [nodeState, prevState[id][1]]\n          }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState,\n            [id]: [[nodeTypeEnum.none], prevState[id][1]]\n          }));\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0]; // check under start and target node for weighted obstacle\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && nodeState[1] > nodeTypeEnum.wall) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState,\n            [id]: [nodeState, prevState[id][1]]\n          }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState,\n            [id]: [[nodeTypeEnum.none], prevState[id][1]]\n          }));\n        }\n      }\n    }\n  };\n\n  const resetGrid = () => {\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n        let newState = [nodeTypeEnum.none];\n\n        if (currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) {\n          newState.unshift(currState);\n        }\n\n        nodeStateFunc(prev => newState);\n        gridMap[id] = [newState, nodeStateFunc];\n      }\n    }\n\n    setGridState(prevState => gridMap);\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = algoName => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n\n    if (unweightedAlgo) {\n      clearPath();\n      clearWeightedObstacles();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      runningAlgo: runningAlgo,\n      setRunningAlgo: setRunningAlgo,\n      padding: margin,\n      height: navBarHeight,\n      gridState: gridState,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      clearObstacles: clearObstacles,\n      clearPath: clearPath,\n      setSelectedObstacle: setSelectedObstacle,\n      weightedObsDisabled: weightedObsDisabled,\n      toggleInfoBox: toggleInfoBox,\n      selectedAlgo: selectedAlgo,\n      setSelectedAlgo: alteredSetSelectedAlgo,\n      resetGrid: resetGrid\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      nodeSize: nodeSize,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord,\n      runningAlgo: runningAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n      infoBoxOpen: infoBoxOpen,\n      toggleInfoBox: toggleInfoBox,\n      selectedAlgo: selectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"uwj3W9yGJMDzxYQSB032Ie9Iy7M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","InfoBox","allPathAlgos","nodeTypeEnum","useState","useEffect","isAlgoUnweighted","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","infoBoxOpen","setInfoBoxOpen","selectedAlgo","setSelectedAlgo","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","weightedObsDisabled","setWeightedObsDisabled","margin","nodeSize","navBarHeight","console","log","initializeGrid","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","currRows","parseInt","currCols","clearPath","x","y","id","nodeState","nodeStateFunc","currState","start","target","visiting","splice","prevState","clearObstacles","wall","prev","none","clearWeightedObstacles","resetGrid","gridMap","newState","unshift","toggleInfoBox","alteredSetSelectedAlgo","algoName","unweightedAlgo"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    initializeGrid();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const initializeGrid = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const currRows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const currCols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(currRows);\n    setCols(currCols);\n    setStartCord('1:1');\n    setTargetCord(`${currRows - 2}:${currCols - 2}`);\n  };\n\n  const clearPath = () => {\n    console.log(\"CLEARING PATH\");\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] <= nodeTypeEnum.visiting)) {\n          nodeState.splice(1, 1);\n        }\n        else if (currState <= nodeTypeEnum.visiting) {\n          nodeState.splice(0, 1);\n        }\n\n        nodeStateFunc(prevState => nodeState);\n      }\n    }\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] >= nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] > nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const resetGrid = () => {\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n        let newState = [nodeTypeEnum.none];\n\n        if (currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) {\n          newState.unshift(currState);\n        }\n\n        nodeStateFunc(prev => newState);\n        gridMap[id] = [newState, nodeStateFunc];\n      }\n    }\n\n    setGridState(prevState => gridMap);\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearPath();\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} resetGrid={resetGrid} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}