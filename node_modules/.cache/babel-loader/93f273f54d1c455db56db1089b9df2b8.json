{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  gridState,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    const currNodeType = gridState[nodeId][0];\n\n    if (currNodeType === getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('obstacle'));\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]]\n      });\n      return;\n    }\n\n    if (currNodeType === getNodeTypeEnum('obstacle')) {\n      setGridState({\n        [nodeId]: gridState[nodeId].slice(1)\n      });\n      return;\n    }\n\n    setDraggingSelection(currNodeType);\n  };\n\n  const mouseEntered = () => {\n    const currNodeType = gridState[nodeId][0];\n\n    if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeType === getNodeTypeEnum('none')) {\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]]\n      });\n    } else if (draggingSelection === getNodeTypeEnum('start')) {\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('start'), ...gridState[nodeId]]\n      });\n    } else if (draggingSelection === getNodeTypeEnum('target')) {\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('target'), ...gridState[nodeId]]\n      });\n    }\n  };\n\n  const mouseLeft = () => {\n    if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n      setGridState({\n        [nodeId]: gridState[nodeId].slice(1)\n      });\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (selectingStart) {\n      setSelectingStart(false);\n      return;\n    }\n\n    if (selectingTarget) {\n      setSelectingTarget(false);\n      return;\n    }\n\n    if (selectingObstacle) {\n      setSelectingObstacle(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    children: [gridState[nodeId][0] === getNodeTypeEnum('start') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Start Node\",\n      style: imgDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 67\n    }, this), gridState[nodeId][0] === getNodeTypeEnum('target') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Target Node\",\n      style: imgDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 68\n    }, this), gridState[nodeId][0] === getNodeTypeEnum('obstacle') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Obstacle\",\n      style: imgDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 70\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: { ...nodeDim,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: mouseDowned,\n      onMouseUp: mouseUped,\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","nodeId","size","gridState","setGridState","draggingSelection","setDraggingSelection","nodeDim","width","height","imgDim","mouseDowned","currNodeType","slice","mouseEntered","mouseLeft","mouseUped","selectingStart","setSelectingStart","selectingTarget","setSelectingTarget","selectingObstacle","setSelectingObstacle","position","top","left"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ nodeId, size, gridState, setGridState, draggingSelection, setDraggingSelection }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        const currNodeType = gridState[nodeId][0];\n\n        if (currNodeType === getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            setGridState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]] });\n            return;\n        }\n\n        if (currNodeType === getNodeTypeEnum('obstacle')) {\n            setGridState({ [nodeId]: gridState[nodeId].slice(1) });\n            return;\n        }\n\n        setDraggingSelection(currNodeType);\n    };\n\n    const mouseEntered = () => {\n        const currNodeType = gridState[nodeId][0];\n\n        if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeType === getNodeTypeEnum('none')) {\n            setGridState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]] });\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState({ [nodeId]: [getNodeTypeEnum('start'), ...gridState[nodeId]] });\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState({ [nodeId]: [getNodeTypeEnum('target'), ...gridState[nodeId]] });\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState({ [nodeId]: gridState[nodeId].slice(1) });\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n\n        if (selectingStart) {\n            setSelectingStart(false);\n            return;\n        }\n\n        if (selectingTarget) {\n            setSelectingTarget(false);\n            return;\n        }\n\n        if (selectingObstacle) {\n            setSelectingObstacle(false);\n        }\n\n\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" >\n            {gridState[nodeId][0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {gridState[nodeId][0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {gridState[nodeId][0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />}\n            <div style={{ ...nodeDim, position: 'absolute', top: 0, left: 0 }} onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}