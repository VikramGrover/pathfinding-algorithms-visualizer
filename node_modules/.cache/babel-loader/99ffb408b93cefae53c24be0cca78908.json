{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js\";\nimport { dijkstras } from '../algorithms/path_finding/dijkstras.js';\nimport { dfs } from '../algorithms/path_finding/dfs.js';\nimport { bfs } from '../algorithms/path_finding/bfs.js';\nimport { aStar } from '../algorithms/path_finding/aStar.js';\nimport { bestFirst } from '../algorithms/path_finding/bestFirst.js';\nimport { recursiveDivision } from '../algorithms/terrain/recursiveDivision.js';\nimport { perlinNoise } from '../algorithms/terrain/perlin.js'; // PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = 'A* (A-Star)';\nconst BFS = 'Breadth-first Search';\nconst DFS = 'Depth-first Search';\nconst BEST_FIRST = 'Best-first Search';\nconst algoFunctions = {\n  [DIJKSTRAS]: dijkstras,\n  [ASTAR]: aStar,\n  [BFS]: bfs,\n  [DFS]: dfs,\n  [BEST_FIRST]: bestFirst\n};\nObject.freeze(algoFunctions);\nconst PATH_CREATION_SLEEP = 7;\nconst algoSleepTimes = {\n  [DIJKSTRAS]: 1,\n  [ASTAR]: 4,\n  [BFS]: 5,\n  [DFS]: 10,\n  [BEST_FIRST]: 11\n};\nObject.freeze(algoSleepTimes);\nexport { DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST, algoFunctions, PATH_CREATION_SLEEP, algoSleepTimes };\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos }; // TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\n\nconst MAZE_GENERATION_SLEEP = 5;\nconst RECURSIVE_DIVISION = \"Recursive Division\";\nconst PERLIN_NOISE = \"Perlin Noise\";\nconst terrainAlgos = [RECURSIVE_DIVISION, PERLIN_NOISE];\nObject.freeze(terrainAlgos);\nconst terrainFunctions = {\n  [RECURSIVE_DIVISION]: recursiveDivision,\n  [PERLIN_NOISE]: perlinNoise\n};\nObject.freeze(terrainFunctions);\nconst terrainAlgoSleepTimes = {\n  [RECURSIVE_DIVISION]: 5,\n  [PERLIN_NOISE]: 1\n};\nObject.freeze(algoSleepTimes);\nexport { MAZE_GENERATION_SLEEP, RECURSIVE_DIVISION, PERLIN_NOISE, terrainAlgos, terrainFunctions };\nconst pathfindingAlgoInfo = {\n  [DIJKSTRAS]: {\n    'description': /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"lowest distance\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 130\n      }, this), \", calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 24\n    }, this),\n    'optimality': /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Dijkstra's is guranteed to find the shortest path.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 23\n    }, this)\n  }\n};\nObject.freeze(pathfindingAlgoInfo);\nexport { pathfindingAlgoInfo }; // NODE CONSTANTS ------------------------------------------------------------\n\nconst nodeTypeEnum = {\n  'path': 0,\n  'visited': 1,\n  'visiting': 2,\n  'none': 3,\n  'target': 4,\n  'start': 5,\n  'remObstacle': 6,\n  'wall': 7,\n  'weighted100': 8,\n  'weighted80': 9,\n  'weighted60': 10,\n  'weighted40': 11,\n  'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\nexport { nodeTypeEnum };\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'none',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.wall]: 'wall',\n  [nodeTypeEnum.visiting]: 'visiting',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path',\n  [nodeTypeEnum.weighted100]: 'weighted100',\n  [nodeTypeEnum.weighted80]: 'weighted80',\n  [nodeTypeEnum.weighted60]: 'weighted60',\n  [nodeTypeEnum.weighted40]: 'weighted40',\n  [nodeTypeEnum.weighted20]: 'weighted20'\n};\nObject.freeze(nodeColorClass);\nexport { nodeColorClass };\nconst EMPTY_NODE_BORDER_COLOR = '#3C4046';\nconst nodeColors = {\n  [nodeTypeEnum.none]: 'transparent',\n  [nodeTypeEnum.target]: '#f14846',\n  [nodeTypeEnum.wall]: '#18191c',\n  [nodeTypeEnum.visiting]: '#4988dc',\n  [nodeTypeEnum.start]: '#43b581',\n  [nodeTypeEnum.visited]: '#3f70dd',\n  [nodeTypeEnum.path]: '#f9a719',\n  [nodeTypeEnum.weighted100]: '#1b1c1e',\n  [nodeTypeEnum.weighted80]: '#1c1e21',\n  [nodeTypeEnum.weighted60]: '#222327',\n  [nodeTypeEnum.weighted40]: '#26272b',\n  [nodeTypeEnum.weighted20]: '#2b2c31'\n};\nObject.freeze(nodeColors);\nexport { EMPTY_NODE_BORDER_COLOR, nodeColors };\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.wall]: Infinity,\n  [nodeTypeEnum.start]: 1,\n  [nodeTypeEnum.weighted100]: 100,\n  [nodeTypeEnum.weighted80]: 80,\n  [nodeTypeEnum.weighted60]: 60,\n  [nodeTypeEnum.weighted40]: 40,\n  [nodeTypeEnum.weighted20]: 20\n};\nObject.freeze(nodeWeight);\nexport { nodeWeight }; // OBSTACLE TYPES --------------------------------------------------------\n\nconst obstacleTypes = ['Wall (âˆž)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n  [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n  [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n  [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n  [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n  [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n  [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n};\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js"],"names":["dijkstras","dfs","bfs","aStar","bestFirst","recursiveDivision","perlinNoise","DIJKSTRAS","ASTAR","BFS","DFS","BEST_FIRST","algoFunctions","Object","freeze","PATH_CREATION_SLEEP","algoSleepTimes","allPathAlgos","unweightedPathAlgos","optimalPathAlgos","MAZE_GENERATION_SLEEP","RECURSIVE_DIVISION","PERLIN_NOISE","terrainAlgos","terrainFunctions","terrainAlgoSleepTimes","pathfindingAlgoInfo","nodeTypeEnum","nodeColorClass","none","target","wall","visiting","start","visited","path","weighted100","weighted80","weighted60","weighted40","weighted20","EMPTY_NODE_BORDER_COLOR","nodeColors","nodeWeight","Infinity","obstacleTypes","obsEnum"],"mappings":"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","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\nimport { bestFirst } from '../algorithms/path_finding/bestFirst.js';\nimport { recursiveDivision } from '../algorithms/terrain/recursiveDivision.js'\nimport { perlinNoise } from '../algorithms/terrain/perlin.js'\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = 'A* (A-Star)';\nconst BFS = 'Breadth-first Search';\nconst DFS = 'Depth-first Search';\nconst BEST_FIRST = 'Best-first Search';\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs,\n    [BEST_FIRST]: bestFirst\n};\nObject.freeze(algoFunctions);\n\nconst PATH_CREATION_SLEEP = 7;\nconst algoSleepTimes = {\n    [DIJKSTRAS]: 1,\n    [ASTAR]: 4,\n    [BFS]: 5,\n    [DFS]: 10,\n    [BEST_FIRST]: 11\n};\nObject.freeze(algoSleepTimes);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST, algoFunctions, PATH_CREATION_SLEEP, algoSleepTimes };\n\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst MAZE_GENERATION_SLEEP = 5;\nconst RECURSIVE_DIVISION = \"Recursive Division\";\nconst PERLIN_NOISE = \"Perlin Noise\";\nconst terrainAlgos = [RECURSIVE_DIVISION, PERLIN_NOISE];\nObject.freeze(terrainAlgos);\n\nconst terrainFunctions = {\n    [RECURSIVE_DIVISION]: recursiveDivision,\n    [PERLIN_NOISE]: perlinNoise\n};\nObject.freeze(terrainFunctions);\n\nconst terrainAlgoSleepTimes = {\n    [RECURSIVE_DIVISION]: 5,\n    [PERLIN_NOISE]: 1\n};\nObject.freeze(algoSleepTimes);\n\nexport { MAZE_GENERATION_SLEEP, RECURSIVE_DIVISION, PERLIN_NOISE, terrainAlgos, terrainFunctions };\n\nconst pathfindingAlgoInfo = {\n    [DIJKSTRAS]: {\n        'description': <p>Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the <strong>lowest distance</strong>, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.</p>,\n        'optimality': <p>Dijkstra's is guranteed to find the shortest path.</p>\n    }\n};\nObject.freeze(pathfindingAlgoInfo);\nexport { pathfindingAlgoInfo };\n\n// NODE CONSTANTS ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n};\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst EMPTY_NODE_BORDER_COLOR = '#3C4046';\nconst nodeColors = {\n    [nodeTypeEnum.none]: 'transparent',\n    [nodeTypeEnum.target]: '#f14846',\n    [nodeTypeEnum.wall]: '#18191c',\n    [nodeTypeEnum.visiting]: '#4988dc',\n    [nodeTypeEnum.start]: '#43b581',\n    [nodeTypeEnum.visited]: '#3f70dd',\n    [nodeTypeEnum.path]: '#f9a719',\n    [nodeTypeEnum.weighted100]: '#1b1c1e',\n    [nodeTypeEnum.weighted80]: '#1c1e21',\n    [nodeTypeEnum.weighted60]: '#222327',\n    [nodeTypeEnum.weighted40]: '#26272b',\n    [nodeTypeEnum.weighted20]: '#2b2c31'\n};\nObject.freeze(nodeColors);\n\nexport { EMPTY_NODE_BORDER_COLOR, nodeColors };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n};\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (âˆž)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n};\nObject.freeze(obsEnum);\n\nexport { obstacleTypes, obsEnum };"]},"metadata":{},"sourceType":"module"}