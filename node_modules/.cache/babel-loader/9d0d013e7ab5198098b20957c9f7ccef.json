{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport Node from './Node.js';\nimport { useState } from 'react';\nimport { nodeTypeEnum } from '../utils/constants.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = ({\n  rows,\n  cols,\n  padding,\n  nodeSize,\n  gridState,\n  setGridState,\n  selectedObstacle,\n  setStartCord,\n  setTargetCord,\n  runningAlgo\n}) => {\n  _s();\n\n  const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n  const getDraggingSelection = () => {}; // fill nodes in the grid\n\n\n  console.log(\"RERENDERING GRID\");\n  const nodes = [];\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeId = `${x}:${y}`;\n      let startingState = [nodeTypeEnum.none];\n\n      if (x === 0 && y === 0) {\n        startingState.unshift(nodeTypeEnum.start);\n      } else if (x === rows - 1 && y === cols - 1) {\n        startingState.unshift(nodeTypeEnum.target);\n      }\n\n      nodes.push( /*#__PURE__*/_jsxDEV(Node, {\n        nodeId: nodeId,\n        size: nodeSize,\n        nodeState: gridState[nodeId],\n        setGridState: setGridState,\n        draggingSelection: draggingSelection,\n        setDraggingSelection: setDraggingSelection,\n        setStartCord: setStartCord,\n        setTargetCord: setTargetCord,\n        runningAlgo: runningAlgo,\n        selectedObstacle: selectedObstacle,\n        startingState: startingState\n      }, nodeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  const gridDimensions = {\n    width: cols * nodeSize + cols,\n    height: rows * nodeSize + rows\n  };\n  const containerStyle = {\n    paddingLeft: padding,\n    paddingRight: padding\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: containerStyle,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid\",\n      style: gridDimensions,\n      children: nodes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"Y0DbbnglWSuKMG8hlxKGylkneV0=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js"],"names":["Node","useState","nodeTypeEnum","Grid","rows","cols","padding","nodeSize","gridState","setGridState","selectedObstacle","setStartCord","setTargetCord","runningAlgo","draggingSelection","setDraggingSelection","none","getDraggingSelection","console","log","nodes","x","y","nodeId","startingState","unshift","start","target","push","gridDimensions","width","height","containerStyle","paddingLeft","paddingRight"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,YAAT,QAA6B,uBAA7B;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,OAAd;AAAuBC,EAAAA,QAAvB;AAAiCC,EAAAA,SAAjC;AAA4CC,EAAAA,YAA5C;AAA0DC,EAAAA,gBAA1D;AAA4EC,EAAAA,YAA5E;AAA0FC,EAAAA,aAA1F;AAAyGC,EAAAA;AAAzG,CAAD,KAA4H;AAAA;;AACrI,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4Cd,QAAQ,CAACC,YAAY,CAACc,IAAd,CAA1D;;AAEA,QAAMC,oBAAoB,GAAG,MAAM,CAElC,CAFD,CAHqI,CAMrI;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ;AACA,QAAMC,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAApB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGjB,IAApB,EAA0BiB,CAAC,EAA3B,EAA+B;AAC3B,UAAIC,MAAM,GAAI,GAAEF,CAAE,IAAGC,CAAE,EAAvB;AAEA,UAAIE,aAAa,GAAG,CAACtB,YAAY,CAACc,IAAd,CAApB;;AACA,UAAIK,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACpBE,QAAAA,aAAa,CAACC,OAAd,CAAsBvB,YAAY,CAACwB,KAAnC;AACH,OAFD,MAGK,IAAIL,CAAC,KAAMjB,IAAI,GAAG,CAAd,IAAoBkB,CAAC,KAAMjB,IAAI,GAAG,CAAtC,EAA0C;AAC3CmB,QAAAA,aAAa,CAACC,OAAd,CAAsBvB,YAAY,CAACyB,MAAnC;AACH;;AAEDP,MAAAA,KAAK,CAACQ,IAAN,eAAW,QAAC,IAAD;AAAM,QAAA,MAAM,EAAEL,MAAd;AACP,QAAA,IAAI,EAAEhB,QADC;AACS,QAAA,SAAS,EAAEC,SAAS,CAACe,MAAD,CAD7B;AACuC,QAAA,YAAY,EAAEd,YADrD;AAEP,QAAA,iBAAiB,EAAEK,iBAFZ;AAGP,QAAA,oBAAoB,EAAEC,oBAHf;AAIP,QAAA,YAAY,EAAEJ,YAJP;AAIqB,QAAA,aAAa,EAAEC,aAJpC;AAImD,QAAA,WAAW,EAAEC,WAJhE;AAI6E,QAAA,gBAAgB,EAAEH,gBAJ/F;AAIiH,QAAA,aAAa,EAAEc;AAJhI,SAIoJD,MAJpJ;AAAA;AAAA;AAAA;AAAA,cAAX;AAKH;AACJ;;AAED,QAAMM,cAAc,GAAG;AACnBC,IAAAA,KAAK,EAAGzB,IAAI,GAAGE,QAAR,GAAoBF,IADR;AAEnB0B,IAAAA,MAAM,EAAG3B,IAAI,GAAGG,QAAR,GAAoBH;AAFT,GAAvB;AAKA,QAAM4B,cAAc,GAAG;AACnBC,IAAAA,WAAW,EAAE3B,OADM;AAEnB4B,IAAAA,YAAY,EAAE5B;AAFK,GAAvB;AAKA,sBACI;AAAK,IAAA,KAAK,EAAE0B,cAAZ;AAAA,2BACI;AAAK,MAAA,SAAS,EAAC,MAAf;AAAsB,MAAA,KAAK,EAAEH,cAA7B;AAAA,gBACKT;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH,CA9CD;;GAAMjB,I;;KAAAA,I;AAgDN,eAAeA,IAAf","sourcesContent":["import Node from './Node.js'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    const getDraggingSelection = () => {\n\n    };\n    // fill nodes in the grid\n    console.log(\"RERENDERING GRID\");\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            let startingState = [nodeTypeEnum.none];\n            if (x === 0 && y === 0) {\n                startingState.unshift(nodeTypeEnum.start);\n            }\n            else if (x === (rows - 1) && y === (cols - 1)) {\n                startingState.unshift(nodeTypeEnum.target);\n            }\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} startingState={startingState} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}