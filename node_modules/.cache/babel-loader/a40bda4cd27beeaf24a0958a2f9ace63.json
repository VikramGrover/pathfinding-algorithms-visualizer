{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { getPathAlgos, isAlgoUnweighted } from '../utils/util.js';\nimport downArrow from \"../images/down_arrow.svg\";\nimport scale from \"../images/scale.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomDropdown = ({\n  setSelection,\n  items,\n  disabled,\n  dropDownWidth\n}) => {\n  _s();\n\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n  const [selectedVal, setSelectedVal] = useState(items[0]);\n  const [selectedId, setSelectedId] = useState(0);\n  const isAlgoSelector = getPathAlgos() === items;\n  useEffect(() => {\n    if (disabled) {\n      setSelectedVal(items[0]);\n      setSelectedId(0);\n      setDropDownOpen(false);\n      setSelection(items[0]);\n    }\n  }, [disabled]);\n\n  const toggle = () => {\n    setDropDownOpen(prevState => !prevState);\n  };\n\n  const madeSelection = id => {\n    setDropDownOpen(prevState => !prevState);\n    setSelectedVal(items[id]);\n    setSelectedId(id);\n    setSelection(items[id]);\n  };\n\n  const style = {\n    width: dropDownWidth\n  };\n  const dropdownItems = [];\n\n  for (let i = 0; i < items.length; i++) {\n    dropdownItems.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      className: `dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`,\n      onClick: () => {\n        madeSelection(i);\n      },\n      children: [items[i], isAlgoSelector && !isAlgoUnweighted(items[i]) && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-img\",\n        src: scale,\n        title: `${items[i]} is a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 63\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 28\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`,\n      onClick: disabled ? null : toggle,\n      children: [selectedVal, !disabled && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"down-arrow\",\n        src: downArrow\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), dropDownOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dropdown-list\",\n      children: dropdownItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomDropdown, \"mZjW6nGYZ0s16q3knITHUccviNE=\");\n\n_c = CustomDropdown;\nexport default CustomDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDropdown\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js"],"names":["useState","useEffect","getPathAlgos","isAlgoUnweighted","CustomDropdown","setSelection","items","disabled","dropDownWidth","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","isAlgoSelector","toggle","prevState","madeSelection","id","style","width","dropdownItems","i","length","push","scale","downArrow"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { getPathAlgos, isAlgoUnweighted } from '../utils/util.js'\nimport downArrow from '../images/down_arrow.svg';\nimport scale from '../images/scale.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (getPathAlgos() === items);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && !isAlgoUnweighted(items[i]) && <img className=\"algo-property-img\" src={scale} title={`${items[i]} is a weighted path-finding algorithm.`}></img>}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow}></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n"]},"metadata":{},"sourceType":"module"}