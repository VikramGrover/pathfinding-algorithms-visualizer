{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  gridState,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  _s();\n\n  const [type, setType] = useState(gridState[nodeId]);\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    const currNodeType = gridState[nodeId][0];\n\n    if (currNodeType === getNodeTypeEnum('none')) {\n      setDraggingSelection({\n        [getNodeTypeEnum('obstacle')]: true\n      });\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]]\n      });\n      return;\n    }\n\n    if (currNodeType === getNodeTypeEnum('obstacle')) {\n      setGridState({\n        [nodeId]: gridState[nodeId].slice(1)\n      });\n      return;\n    }\n\n    setDraggingSelection({\n      [currNodeType]: true\n    });\n  };\n\n  const mouseEntered = () => {\n    const currNodeType = gridState[nodeId][0];\n\n    if (draggingSelection[getNodeTypeEnum('obstacle')] && currNodeType === getNodeTypeEnum('none')) {\n      setGridState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]]\n      });\n      return;\n    }\n\n    if (selectingStart) {\n      setType([getNodeTypeEnum('start'), ...type]);\n      return;\n    }\n\n    if (selectingTarget) {\n      setType([getNodeTypeEnum('target'), ...type]);\n      return;\n    }\n  };\n\n  const mouseLeft = () => {\n    if (selectingStart || selectingTarget) {\n      setType(type.slice(1));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (selectingStart) {\n      setSelectingStart(false);\n      return;\n    }\n\n    if (selectingTarget) {\n      setSelectingTarget(false);\n      return;\n    }\n\n    if (selectingObstacle) {\n      setSelectingObstacle(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    children: [gridState[nodeId][0] === getNodeTypeEnum('start') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Start Node\",\n      style: imgDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 67\n    }, this), gridState[nodeId][0] === getNodeTypeEnum('target') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Target Node\",\n      style: imgDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 68\n    }, this), gridState[nodeId][0] === getNodeTypeEnum('obstacle') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Obstacle\",\n      style: imgDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 70\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: { ...nodeDim,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: mouseDowned,\n      onMouseUp: mouseUped,\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"Uqks6QItekA1Xwop9ypvkh5XpkE=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","nodeId","size","gridState","setGridState","draggingSelection","setDraggingSelection","type","setType","nodeDim","width","height","imgDim","mouseDowned","currNodeType","slice","mouseEntered","selectingStart","selectingTarget","mouseLeft","mouseUped","setSelectingStart","setSelectingTarget","selectingObstacle","setSelectingObstacle","position","top","left"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ nodeId, size, gridState, setGridState, draggingSelection, setDraggingSelection }) => {\n    const [type, setType] = useState(gridState[nodeId]);\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        const currNodeType = gridState[nodeId][0];\n\n        if (currNodeType === getNodeTypeEnum('none')) {\n            setDraggingSelection({ [getNodeTypeEnum('obstacle')]: true });\n            setGridState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]] });\n            return;\n        }\n\n        if (currNodeType === getNodeTypeEnum('obstacle')) {\n            setGridState({ [nodeId]: gridState[nodeId].slice(1) });\n            return;\n        }\n\n        setDraggingSelection({ [currNodeType]: true });\n    };\n\n    const mouseEntered = () => {\n        const currNodeType = gridState[nodeId][0];\n\n        if (draggingSelection[getNodeTypeEnum('obstacle')] && currNodeType === getNodeTypeEnum('none')) {\n            setGridState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...gridState[nodeId]] });\n            return;\n        }\n\n        if (selectingStart) {\n            setType([getNodeTypeEnum('start'), ...type]);\n            return;\n        }\n\n        if (selectingTarget) {\n            setType([getNodeTypeEnum('target'), ...type]);\n            return;\n        }\n\n\n    };\n\n    const mouseLeft = () => {\n        if (selectingStart || selectingTarget) {\n            setType(type.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (selectingStart) {\n            setSelectingStart(false);\n            return;\n        }\n\n        if (selectingTarget) {\n            setSelectingTarget(false);\n            return;\n        }\n\n        if (selectingObstacle) {\n            setSelectingObstacle(false);\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" >\n            {gridState[nodeId][0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {gridState[nodeId][0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {gridState[nodeId][0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />}\n            <div style={{ ...nodeDim, position: 'absolute', top: 0, left: 0 }} onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}