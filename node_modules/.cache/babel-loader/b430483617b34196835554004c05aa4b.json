{"ast":null,"code":"import { dijkstras } from '../algorithms/path_finding/dijkstras.js';\nimport { dfs } from '../algorithms/path_finding/dfs.js';\nimport { bfs } from '../algorithms/path_finding/bfs.js';\nimport { aStar } from '../algorithms/path_finding/aStar.js'; // PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\n\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = \"A*\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\nconst algoFunctions = {\n  [DIJKSTRAS]: dijkstras,\n  [ASTAR]: aStar,\n  [BFS]: bfs,\n  [DFS]: dfs\n};\nObject.freeze(algoFunctions);\nexport { DIJKSTRAS, ASTAR, BFS, DFS, algoFunctions };\nconst pathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nObject.freeze(pathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\nexport { pathAlgos, unweightedPathAlgos, optimalPathAlgos }; // TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\n\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\nexport { ALGO1, ALGO2, terrainAlgos }; // NODE TYPES ------------------------------------------------------------\n\nconst nodeTypeEnum = {\n  'path': 0,\n  'visited': 1,\n  'visiting': 2,\n  'none': 3,\n  'target': 4,\n  'start': 5,\n  'remObstacle': 6,\n  'wall': 7,\n  'weighted100': 8,\n  'weighted80': 9,\n  'weighted60': 10,\n  'weighted40': 11,\n  'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\nexport { nodeTypeEnum };\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'none',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.wall]: 'wall',\n  [nodeTypeEnum.visiting]: 'visiting',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path',\n  [nodeTypeEnum.weighted100]: 'weighted100',\n  [nodeTypeEnum.weighted80]: 'weighted80',\n  [nodeTypeEnum.weighted60]: 'weighted60',\n  [nodeTypeEnum.weighted40]: 'weighted40',\n  [nodeTypeEnum.weighted20]: 'weighted20'\n};\nObject.freeze(nodeColorClass);\nexport { nodeColorClass };\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.wall]: Infinity,\n  [nodeTypeEnum.start]: 1,\n  [nodeTypeEnum.weighted100]: 100,\n  [nodeTypeEnum.weighted80]: 80,\n  [nodeTypeEnum.weighted60]: 60,\n  [nodeTypeEnum.weighted40]: 40,\n  [nodeTypeEnum.weighted20]: 20\n};\nObject.freeze(nodeWeight);\nexport { nodeWeight }; // OBSTACLE TYPES --------------------------------------------------------\n\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n  [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n  [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n  [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n  [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n  [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n  [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n};\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/constants.js"],"names":["dijkstras","dfs","bfs","aStar","DIJKSTRAS","ASTAR","BFS","DFS","algoFunctions","Object","freeze","pathAlgos","unweightedPathAlgos","optimalPathAlgos","ALGO1","ALGO2","terrainAlgos","nodeTypeEnum","nodeColorClass","none","target","wall","visiting","start","visited","path","weighted100","weighted80","weighted60","weighted40","weighted20","nodeWeight","Infinity","obstacleTypes","obsEnum"],"mappings":"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","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = \"A*\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs\n}\nObject.freeze(algoFunctions);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, algoFunctions };\n\nconst pathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nObject.freeze(pathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { pathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\n\nexport { ALGO1, ALGO2, terrainAlgos };\n\n// NODE TYPES ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n}\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };"]},"metadata":{},"sourceType":"module"}