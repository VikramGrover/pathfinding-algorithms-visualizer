{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js';\nimport { nodeColors, nodeTypeEnum, obsEnum } from '../utils/constants.js';\nimport downArrow from \"../images/down_arrow.svg\";\nimport weight from \"../images/weight.svg\";\nimport weightUnfilled from \"../images/weight_unfilled.svg\";\nimport optimal from \"../images/optimal.svg\";\nimport optimalUnfilled from \"../images/optimal_unfilled.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomDropdown = ({\n  setSelection,\n  items,\n  disabled,\n  dropDownWidth,\n  isAlgoSelector,\n  isObstacleSelector,\n  isTerrainSelector\n}) => {\n  _s();\n\n  const [dropDownOpen, setDropDownOpen] = useState(false);\n  const [selectedVal, setSelectedVal] = useState(items[0]);\n  const [selectedId, setSelectedId] = useState(0);\n  useEffect(() => {\n    if (disabled) {\n      setSelectedVal(items[0]);\n      setSelectedId(0);\n      setDropDownOpen(false);\n      setSelection(items[0]);\n    }\n  }, [disabled]);\n  useEffect(() => {\n    setSelectedVal(items[0]);\n    setSelectedId(0);\n    setDropDownOpen(false);\n    setSelection(items[0]);\n  }, [items]);\n\n  const toggle = () => {\n    setDropDownOpen(prevState => !prevState);\n  };\n\n  const madeSelection = id => {\n    setDropDownOpen(prevState => !prevState);\n    setSelectedVal(items[id]);\n    setSelectedId(id);\n    setSelection(items[id]);\n  };\n\n  const style = {\n    width: dropDownWidth\n  };\n  const dropdownItems = [];\n\n  for (let i = 0; i < items.length; i++) {\n    dropdownItems.push( /*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      className: `dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`,\n      onClick: () => {\n        madeSelection(i);\n      },\n      children: [items[i], isAlgoSelector && (!isAlgoUnweighted(items[i]) ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: weight,\n        title: `${items[i]} is a weighted path-finding algorithm.`,\n        alt: `${items[i]} is a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 63\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: weightUnfilled,\n        title: `${items[i]} is not a weighted path-finding algorithm.`,\n        alt: `${items[i]} is not a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 240\n      }, this)), isAlgoSelector && (isAlgoOptimal(items[i]) ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: optimal,\n        title: `${items[i]} guarantees shortest path.`,\n        alt: `${items[i]} guarantees shortest path.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 59\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: optimalUnfilled,\n        title: `${items[i]} does not guarantee shortest path.`,\n        alt: `${items[i]} does not guarantee shortest path.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 213\n      }, this)), isObstacleSelector && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          backgroundColor: nodeColors[nodeTypeEnum[obsEnum[items[i]]]]\n        },\n        className: \"obstacle-preview\",\n        children: \" \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 36\n      }, this), isTerrainSelector && (!isAlgoUnweighted(items[i]) ? /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: weight,\n        title: `${items[i]} is a weighted path-finding algorithm.`,\n        alt: `${items[i]} is a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 66\n      }, this) : /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"algo-property-badge\",\n        src: weightUnfilled,\n        title: `${items[i]} is not a weighted path-finding algorithm.`,\n        alt: `${items[i]} is not a weighted path-finding algorithm.`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 243\n      }, this))]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 28\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: style,\n      className: `dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`,\n      onClick: disabled ? null : toggle,\n      children: [selectedVal, !disabled && /*#__PURE__*/_jsxDEV(\"img\", {\n        className: \"down-arrow\",\n        src: downArrow,\n        alt: \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: dropDownOpen ? 'flex' : 'none'\n      },\n      className: \"dropdown-list\",\n      children: dropdownItems\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomDropdown, \"k929zIIVsmIqeS7xCU1dVJ7SbwY=\");\n\n_c = CustomDropdown;\nexport default CustomDropdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomDropdown\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/CustomDropdown.js"],"names":["useState","useEffect","isAlgoUnweighted","isAlgoOptimal","nodeColors","nodeTypeEnum","obsEnum","CustomDropdown","setSelection","items","disabled","dropDownWidth","isAlgoSelector","isObstacleSelector","isTerrainSelector","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","toggle","prevState","madeSelection","id","style","width","dropdownItems","i","length","push","weight","weightUnfilled","optimal","optimalUnfilled","backgroundColor","downArrow","display"],"mappings":"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","sourcesContent":["import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js'\nimport { nodeColors, nodeTypeEnum, obsEnum } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth, isAlgoSelector, isObstacleSelector, isTerrainSelector }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled]);\n\n    useEffect(() => {\n        setSelectedVal(items[0]);\n        setSelectedId(0);\n        setDropDownOpen(false);\n        setSelection(items[0]);\n    }, [items]);\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n            {isObstacleSelector && <div style={{ backgroundColor: nodeColors[nodeTypeEnum[obsEnum[items[i]]]] }} className=\"obstacle-preview\"> </div>}\n            {isTerrainSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n        </div >)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            <div style={{ display: (dropDownOpen ? 'flex' : 'none') }} className='dropdown-list'>\n                {dropdownItems}\n            </div>\n        </div >\n    )\n}\n\nexport default CustomDropdown\n"]},"metadata":{},"sourceType":"module"}