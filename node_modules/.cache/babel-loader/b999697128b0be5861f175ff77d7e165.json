{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from './utils/util.js';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  useEffect(() => {\n    resetBoard();\n  }, []);\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n  setSelectedObstacle(defaultSelectedObstacle);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState(`${rows - 1}:${cols - 1}`);\n\n  const resetBoard = () => {\n    const nodeSize = 28;\n    const margin = 30;\n    const navBarHeight = 60;\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + margin * 2) - margin;\n    const adjustedWinWidth = window.innerWidth - 2 * margin;\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      height: navBarHeight,\n      gridState: gridState,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      resetBoard: resetBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      nodeSize: nodeSize,\n      gridState: gridState,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"PLumg3waPiKNR9EalDEFHs8sqog=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","useState","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","useEffect","resetBoard","defaultSelectedObstacle","startCord","setStartCord","targetCord","setTargetCord","rows","cols","nodeSize","margin","navBarHeight","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","unshift"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,QAAT,QAAyB,OAAzB;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BH,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACI,gBAAD,EAAmBC,mBAAnB,IAA0CL,QAAQ,CAAC,EAAD,CAAxD;AAEAM,EAAAA,SAAS,CAAC,MAAM;AACdC,IAAAA,UAAU;AACX,GAFQ,EAEN,EAFM,CAAT;AAIA,MAAIC,uBAAuB,GAAG;AAC5B,gBAAY;AADgB,GAA9B;AAIAH,EAAAA,mBAAmB,CAACG,uBAAD,CAAnB;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACW,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAE,GAAEa,IAAI,GAAG,CAAE,IAAGC,IAAI,GAAG,CAAE,EAAzB,CAA5C;;AAEA,QAAMP,UAAU,GAAG,MAAM;AACvB,UAAMQ,QAAQ,GAAG,EAAjB;AACA,UAAMC,MAAM,GAAG,EAAf;AACA,UAAMC,YAAY,GAAG,EAArB;AAEA,UAAMC,iBAAiB,GAAGC,MAAM,CAACC,WAAP,IAAsBH,YAAY,GAAID,MAAM,GAAG,CAA/C,IAAqDA,MAA/E;AACA,UAAMK,gBAAgB,GAAGF,MAAM,CAACG,UAAP,GAAqB,IAAIN,MAAlD;AAEA,UAAMH,IAAI,GAAGU,QAAQ,CAACL,iBAAiB,IAAIH,QAAQ,GAAG,CAAf,CAAlB,CAArB;AACA,UAAMD,IAAI,GAAGS,QAAQ,CAACF,gBAAgB,IAAIN,QAAQ,GAAG,CAAf,CAAjB,CAArB;AAEA,QAAIS,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAApB,EAA0BY,CAAC,EAA3B,EAA+B;AAC7B,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,IAApB,EAA0BY,CAAC,EAA3B,EAA+B;AAC7B,YAAIC,SAAS,GAAG,CAAC5B,eAAe,CAAC,MAAD,CAAhB,CAAhB;;AACA,YAAI0B,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtBC,UAAAA,SAAS,CAACC,OAAV,CAAkB7B,eAAe,CAAC,OAAD,CAAjC;AACD,SAFD,MAGK,IAAI0B,CAAC,KAAMZ,IAAI,GAAG,CAAd,IAAoBa,CAAC,KAAMZ,IAAI,GAAG,CAAtC,EAA0C;AAC7Ca,UAAAA,SAAS,CAACC,OAAV,CAAkB7B,eAAe,CAAC,QAAD,CAAjC;AACD;;AAEDyB,QAAAA,OAAO,CAAE,GAAEC,CAAE,IAAGC,CAAE,EAAX,CAAP,GAAuBC,SAAvB;AACD;AACF;;AAEDxB,IAAAA,YAAY,CAACqB,OAAD,CAAZ;AACD,GA3BD;;AA6BA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAQ,MAAA,IAAI,EAAEX,IAAd;AAAoB,MAAA,IAAI,EAAEC,IAA1B;AAAgC,MAAA,OAAO,EAAEE,MAAzC;AAAiD,MAAA,MAAM,EAAEC,YAAzD;AAAuE,MAAA,SAAS,EAAEf,SAAlF;AAA6F,MAAA,YAAY,EAAEC,YAA3G;AAAyH,MAAA,SAAS,EAAEM,SAApI;AAA+I,MAAA,UAAU,EAAEE,UAA3J;AAAuK,MAAA,UAAU,EAAEJ;AAAnL;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEM,IAAZ;AAAkB,MAAA,IAAI,EAAEC,IAAxB;AAA8B,MAAA,OAAO,EAAEE,MAAvC;AAA+C,MAAA,QAAQ,EAAED,QAAzD;AAAmE,MAAA,SAAS,EAAEb,SAA9E;AAAyF,MAAA,YAAY,EAAEC,YAAvG;AAAqH,MAAA,gBAAgB,EAAEC,gBAAvI;AAAyJ,MAAA,YAAY,EAAEM,YAAvK;AAAqL,MAAA,aAAa,EAAEE;AAApM;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAnDQX,G;;KAAAA,G;AAqDT,eAAeA,GAAf","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  let defaultSelectedObstacle = {\n    'obstacle': false\n  };\n\n  setSelectedObstacle(defaultSelectedObstacle);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState(`${rows - 1}:${cols - 1}`);\n\n  const resetBoard = () => {\n    const nodeSize = 28;\n    const margin = 30;\n    const navBarHeight = 60;\n\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 2)) - margin;\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} padding={margin} height={navBarHeight} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} resetBoard={resetBoard} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}