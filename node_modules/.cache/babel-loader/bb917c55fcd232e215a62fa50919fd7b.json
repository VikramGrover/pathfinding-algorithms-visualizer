{"ast":null,"code":"import _regeneratorRuntime from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _objectSpread from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dijkstras}from'../algorithms/path_finding/dijkstras.js';import{getNodeTypeEnum}from'../utils/util.js';import{jsx as _jsx}from\"react/jsx-runtime\";var Visualize=function Visualize(_ref){var rows=_ref.rows,cols=_ref.cols,setGridState=_ref.setGridState,startCord=_ref.startCord,targetCord=_ref.targetCord,clearForReRun=_ref.clearForReRun,runningAlgo=_ref.runningAlgo,setRunningAlgo=_ref.setRunningAlgo;var run=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var updatedGridState,path,_loop,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:console.log(\"I AM RUNNING\");updatedGridState=clearForReRun();path=dijkstras(startCord,targetCord,updatedGridState,setGridState,rows,cols);_loop=function _loop(i){setTimeout(function(){setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},path[i],[getNodeTypeEnum('path')]));});},1);};for(i=path.length;i>=0;i--){_loop(i);}setTimeout(function(){setRunningAlgo(false);},1);case 6:case\"end\":return _context.stop();}}},_callee);}));return function run(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{className:\"button \".concat(runningAlgo?'disabled':'green'),onClick:runningAlgo?null:run,children:\"Run\"});};export default Visualize;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js"],"names":["dijkstras","getNodeTypeEnum","Visualize","rows","cols","setGridState","startCord","targetCord","clearForReRun","runningAlgo","setRunningAlgo","run","console","log","updatedGridState","path","i","setTimeout","prevState","length"],"mappings":"kvBAAA,OAASA,SAAT,KAA0B,yCAA1B,CACA,OAASC,eAAT,KAAgC,kBAAhC,C,2CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAqG,IAAlGC,CAAAA,IAAkG,MAAlGA,IAAkG,CAA5FC,IAA4F,MAA5FA,IAA4F,CAAtFC,YAAsF,MAAtFA,YAAsF,CAAxEC,SAAwE,MAAxEA,SAAwE,CAA7DC,UAA6D,MAA7DA,UAA6D,CAAjDC,aAAiD,MAAjDA,aAAiD,CAAlCC,WAAkC,MAAlCA,WAAkC,CAArBC,cAAqB,MAArBA,cAAqB,CACnH,GAAMC,CAAAA,GAAG,2FAAG,qKACRC,OAAO,CAACC,GAAR,CAAY,cAAZ,EACMC,gBAFE,CAEiBN,aAAa,EAF9B,CAGFO,IAHE,CAGKf,SAAS,CAACM,SAAD,CAAYC,UAAZ,CAAwBO,gBAAxB,CAA0CT,YAA1C,CAAwDF,IAAxD,CAA8DC,IAA9D,CAHd,sBAKCY,CALD,EAMJC,UAAU,CAAC,UAAM,CACbZ,YAAY,CAAC,SAAAa,SAAS,wCAAUA,SAAV,wBAAsBH,IAAI,CAACC,CAAD,CAA1B,CAAgC,CAACf,eAAe,CAAC,MAAD,CAAhB,CAAhC,IAAV,CAAZ,CACH,CAFS,CAEP,CAFO,CAAV,CANI,EAKR,IAASe,CAAT,CAAaD,IAAI,CAACI,MAAlB,CAA0BH,CAAC,EAAI,CAA/B,CAAkCA,CAAC,EAAnC,CAAuC,OAA9BA,CAA8B,EAItC,CAEDC,UAAU,CAAC,UAAM,CACbP,cAAc,CAAC,KAAD,CAAd,CACH,CAFS,CAEP,CAFO,CAAV,CAXQ,sDAAH,kBAAHC,CAAAA,GAAG,2CAAT,CAgBA,mBACI,YAAK,SAAS,kBAAYF,WAAW,CAAG,UAAH,CAAgB,OAAvC,CAAd,CAAgE,OAAO,CAAEA,WAAW,CAAG,IAAH,CAAUE,GAA9F,iBADJ,CAKH,CAtBD,CAwBA,cAAeT,CAAAA,SAAf","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        console.log(\"I AM RUNNING\");\n        const updatedGridState = clearForReRun();\n        const path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n\n        for (let i = path.length; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path')] }));\n            }, 1);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, 1);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n"]},"metadata":{},"sourceType":"module"}