{"ast":null,"code":"import { getNeighbourNodes } from '../../utils/helper.js';\nimport { nodeTypeEnum } from '../../utils/constants.js';\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  const stack = [startCord];\n  const path = [];\n  const visited = {\n    [startCord]: 1\n  };\n\n  while (stack.length > 0) {\n    const currCord = stack[0];\n\n    if (currCord !== targetCord && currCord !== startCord) {\n      const nodeStateFunc = gridState[neighbour][1];\n      setTimeout(() => {\n        nodeStateFunc(prevState => [nodeTypeEnum.visiting, nodeTypeEnum.none]);\n      }, timeout);\n    }\n\n    if (currCord === targetCord) {\n      stack.pop();\n      stack.shift();\n      return stack;\n    }\n\n    if (currCord !== startCord) {\n      path.unshift(currCord);\n      visited[currCord] = 1;\n      const nodeStateFunc = gridState[currCord][1];\n      setTimeout(() => {\n        nodeStateFunc(prevState => [nodeTypeEnum.visited, nodeTypeEnum.none]);\n      }, timeout);\n    }\n\n    const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n    let unvisitedNeighbourFound = false;\n\n    for (const neighbour of neighbours) {\n      if (neighbour in visited) {\n        continue;\n      }\n\n      stack.unshift(neighbour);\n      unvisitedNeighbourFound = true;\n      break;\n    }\n\n    if (!unvisitedNeighbourFound) {\n      stack.splice(0, 1);\n    }\n  }\n\n  return [];\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js"],"names":["getNeighbourNodes","nodeTypeEnum","dfs","startCord","targetCord","gridState","setGridState","rows","cols","timeout","stack","path","visited","length","currCord","nodeStateFunc","neighbour","setTimeout","prevState","visiting","none","pop","shift","unshift","neighbours","unvisitedNeighbourFound","splice"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,uBAAlC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,MAAMC,GAAG,GAAG,CAACC,SAAD,EAAYC,UAAZ,EAAwBC,SAAxB,EAAmCC,YAAnC,EAAiDC,IAAjD,EAAuDC,IAAvD,EAA6DC,OAA7D,KAAyE;AACxF,QAAMC,KAAK,GAAG,CAACP,SAAD,CAAd;AACA,QAAMQ,IAAI,GAAG,EAAb;AACA,QAAMC,OAAO,GAAG;AAAE,KAACT,SAAD,GAAa;AAAf,GAAhB;;AAEA,SAAOO,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACrB,UAAMC,QAAQ,GAAGJ,KAAK,CAAC,CAAD,CAAtB;;AACA,QAAII,QAAQ,KAAKV,UAAb,IAA2BU,QAAQ,KAAKX,SAA5C,EAAuD;AACnD,YAAMY,aAAa,GAAGV,SAAS,CAACW,SAAD,CAAT,CAAqB,CAArB,CAAtB;AACAC,MAAAA,UAAU,CAAC,MAAM;AACbF,QAAAA,aAAa,CAACG,SAAS,IAAK,CAACjB,YAAY,CAACkB,QAAd,EAAwBlB,YAAY,CAACmB,IAArC,CAAf,CAAb;AACH,OAFS,EAEPX,OAFO,CAAV;AAGH;;AAED,QAAIK,QAAQ,KAAKV,UAAjB,EAA6B;AACzBM,MAAAA,KAAK,CAACW,GAAN;AACAX,MAAAA,KAAK,CAACY,KAAN;AACA,aAAOZ,KAAP;AACH;;AAED,QAAII,QAAQ,KAAKX,SAAjB,EAA4B;AACxBQ,MAAAA,IAAI,CAACY,OAAL,CAAaT,QAAb;AACAF,MAAAA,OAAO,CAACE,QAAD,CAAP,GAAoB,CAApB;AACA,YAAMC,aAAa,GAAGV,SAAS,CAACS,QAAD,CAAT,CAAoB,CAApB,CAAtB;AACAG,MAAAA,UAAU,CAAC,MAAM;AACbF,QAAAA,aAAa,CAACG,SAAS,IAAK,CAACjB,YAAY,CAACW,OAAd,EAAuBX,YAAY,CAACmB,IAApC,CAAf,CAAb;AACH,OAFS,EAEPX,OAFO,CAAV;AAGH;;AAED,UAAMe,UAAU,GAAGxB,iBAAiB,CAACc,QAAD,EAAWP,IAAX,EAAiBC,IAAjB,EAAuBH,SAAvB,CAApC;AACA,QAAIoB,uBAAuB,GAAG,KAA9B;;AACA,SAAK,MAAMT,SAAX,IAAwBQ,UAAxB,EAAoC;AAChC,UAAIR,SAAS,IAAIJ,OAAjB,EAA0B;AACtB;AACH;;AAEDF,MAAAA,KAAK,CAACa,OAAN,CAAcP,SAAd;AACAS,MAAAA,uBAAuB,GAAG,IAA1B;AACA;AACH;;AAED,QAAI,CAACA,uBAAL,EAA8B;AAC1Bf,MAAAA,KAAK,CAACgB,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACH;AACJ;;AAED,SAAO,EAAP;AACH,CA/CM","sourcesContent":["import { getNeighbourNodes } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            const nodeStateFunc = gridState[neighbour][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n            }, timeout);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            const nodeStateFunc = gridState[currCord][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n            }, timeout);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};"]},"metadata":{},"sourceType":"module"}