{"ast":null,"code":"import _slicedToArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import Grid from'./components/Grid.js';import Header from'./components/Header.js';import InfoBox from'./components/InfoBox.js';import{allPathAlgos,nodeTypeEnum}from'./utils/constants.js';import{useState,useEffect}from'react';import{isAlgoUnweighted}from'./utils/helper.js';import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState({}),_useState2=_slicedToArray(_useState,2),gridState=_useState2[0],setGridState=_useState2[1];var _useState3=useState('wall'),_useState4=_slicedToArray(_useState3,2),selectedObstacle=_useState4[0],setSelectedObstacle=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),infoBoxOpen=_useState6[0],setInfoBoxOpen=_useState6[1];var _useState7=useState(allPathAlgos[0]),_useState8=_slicedToArray(_useState7,2),selectedAlgo=_useState8[0],setSelectedAlgo=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),rows=_useState10[0],setRows=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),cols=_useState12[0],setCols=_useState12[1];var _useState13=useState('0:0'),_useState14=_slicedToArray(_useState13,2),startCord=_useState14[0],setStartCord=_useState14[1];var _useState15=useState('0:0'),_useState16=_slicedToArray(_useState15,2),targetCord=_useState16[0],setTargetCord=_useState16[1];var _useState17=useState(false),_useState18=_slicedToArray(_useState17,2),runningAlgo=_useState18[0],setRunningAlgo=_useState18[1];var _useState19=useState(false),_useState20=_slicedToArray(_useState19,2),weightedObsDisabled=_useState20[0],setWeightedObsDisabled=_useState20[1];var margin=30;var nodeSize=28;var navBarHeight=90;useEffect(function(){resetBoard();},[]);// useEffect(() => {\n//   window.addEventListener(\"resize\", resetBoard);\n//   return () => window.removeEventListener(\"resize\", resetBoard)\n// }, []);\nvar resetBoard=function resetBoard(){var adjustedWinHeight=window.innerHeight-(navBarHeight+margin*3);var adjustedWinWidth=window.innerWidth-2*margin;var rows=parseInt(adjustedWinHeight/(nodeSize+1));var cols=parseInt(adjustedWinWidth/(nodeSize+1));setRunningAlgo(false);setRows(rows);setCols(cols);setStartCord('0:0');setTargetCord(\"\".concat(rows-1,\":\").concat(cols-1));var gridMap={};for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var nodeState=[nodeTypeEnum.none];if(x===0&&y===0){nodeState.unshift(nodeTypeEnum.start);}else if(x===rows-1&&y===cols-1){nodeState.unshift(nodeTypeEnum.target);}gridMap[\"\".concat(x,\":\").concat(y)]=nodeState;}}setGridState(gridMap);};var clearPath=function clearPath(){var gridMap={};var change=false;for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var id=\"\".concat(x,\":\").concat(y);gridMap[id]=gridState[id];var currState=gridState[id][0];// check under start and target node for path\nif((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&(gridState[id][1]===nodeTypeEnum.path||gridState[id][1]===nodeTypeEnum.visited||gridState[id][1]===nodeTypeEnum.visiting)){gridMap[id].splice(1,1);change=true;continue;}if(currState===nodeTypeEnum.path||currState===nodeTypeEnum.visited||currState===nodeTypeEnum.visiting){gridMap[id]=gridMap[id].slice(1);change=true;}}}if(change){setGridState(function(prevState){return gridMap;});}return gridMap;};var clearObstacles=function clearObstacles(){var gridMap={};var change=false;for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var id=\"\".concat(x,\":\").concat(y);gridMap[id]=gridState[id];var currState=gridState[id][0];// check under start and target node for obstacle\nif((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&gridState[id][1]>=nodeTypeEnum.wall){gridMap[id].splice(1,1);change=true;continue;}if(currState===nodeTypeEnum.path||currState===nodeTypeEnum.visited||currState===nodeTypeEnum.visiting){currState=gridState[id][1];}if(currState>=nodeTypeEnum.wall){gridMap[id]=[nodeTypeEnum.none];change=true;}}}if(change){setGridState(function(prevState){return gridMap;});}};var clearWeightedObstacles=function clearWeightedObstacles(){var gridMap={};var change=false;for(var x=0;x<rows;x++){for(var y=0;y<cols;y++){var id=\"\".concat(x,\":\").concat(y);gridMap[id]=gridState[id];var currState=gridState[id][0];// check under start and target node for weighted obstacle\nif((currState===nodeTypeEnum.start||currState===nodeTypeEnum.target)&&gridState[id][1]>nodeTypeEnum.wall){gridMap[id].splice(1,1);change=true;continue;}if(currState===nodeTypeEnum.path||currState===nodeTypeEnum.visited||currState===nodeTypeEnum.visiting){currState=gridState[id][1];}if(currState>nodeTypeEnum.wall){gridMap[id]=[nodeTypeEnum.none];change=true;}}}if(change){setGridState(function(prevState){return gridMap;});}};var toggleInfoBox=function toggleInfoBox(){setInfoBoxOpen(function(prevState){return!prevState;});};var alteredSetSelectedAlgo=function alteredSetSelectedAlgo(algoName){var unweightedAlgo=isAlgoUnweighted(algoName);setWeightedObsDisabled(unweightedAlgo);setSelectedAlgo(algoName);if(unweightedAlgo){clearWeightedObstacles();}};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Header,{rows:rows,cols:cols,runningAlgo:runningAlgo,setRunningAlgo:setRunningAlgo,padding:margin,height:navBarHeight,setGridState:setGridState,startCord:startCord,targetCord:targetCord,clearObstacles:clearObstacles,clearPath:clearPath,setSelectedObstacle:setSelectedObstacle,weightedObsDisabled:weightedObsDisabled,setWeightedObsDisabled:setWeightedObsDisabled,clearWeightedObstacles:clearWeightedObstacles,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo,setSelectedAlgo:alteredSetSelectedAlgo}),/*#__PURE__*/_jsx(Grid,{rows:rows,cols:cols,padding:margin,nodeSize:nodeSize,gridState:gridState,setGridState:setGridState,selectedObstacle:selectedObstacle,setStartCord:setStartCord,setTargetCord:setTargetCord,runningAlgo:runningAlgo}),/*#__PURE__*/_jsx(InfoBox,{infoBoxOpen:infoBoxOpen,toggleInfoBox:toggleInfoBox,selectedAlgo:selectedAlgo})]});}export default App;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","InfoBox","allPathAlgos","nodeTypeEnum","useState","useEffect","isAlgoUnweighted","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","infoBoxOpen","setInfoBoxOpen","selectedAlgo","setSelectedAlgo","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","weightedObsDisabled","setWeightedObsDisabled","margin","nodeSize","navBarHeight","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","none","unshift","start","target","clearPath","change","id","currState","path","visited","visiting","splice","slice","prevState","clearObstacles","wall","clearWeightedObstacles","toggleInfoBox","alteredSetSelectedAlgo","algoName","unweightedAlgo"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] === nodeTypeEnum.path || gridState[id][1] === nodeTypeEnum.visited || gridState[id][1] === nodeTypeEnum.visiting)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] >= nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] > nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}