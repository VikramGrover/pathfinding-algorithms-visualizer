{"ast":null,"code":"import { nodeTypeEnum } from '../../utils/constants.js';\nimport { sleep, getRandomNum } from '../../utils/helper.js';\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  // make border around the screen\n  for (var x = 0; x < rows; x++) {\n    for (var y = 0; y < cols; y++) {\n      const currCord = `${x}:${y}`;\n      const nodeStateFunc = gridState[currCord][1];\n\n      if (x === 0 || x === rows - 1 || y === 0 || y === cols - 1) {\n        await sleep(timeout);\n        let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n\n        if (currCord === startCord) {\n          state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n        } else if (currCord === targetCord) {\n          state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n        }\n\n        nodeStateFunc(prevState => state);\n        setGridState(prevState => ({ ...prevState,\n          [currCord]: [state, prevState[currCord][1]]\n        }));\n      }\n    }\n  }\n\n  await divideScreen(startCord, targetCord, gridState, setGridState, 1, rows - 1, 1, cols - 1, timeout, rows, cols, -100);\n};\n\nconst divideScreen = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols, previousBisection) => {\n  const width = endCol - startCol;\n  const height = endRow - startRow;\n\n  if (width <= 2 && height <= 2) {\n    return;\n  }\n\n  if (width < height) {\n    // divide horizontally\n    let skip = getRandomNum(startCol, endCol);\n\n    while (skip === previousBisection) {\n      skip = getRandomNum(startCol, endCol);\n    }\n\n    const randRow = getRandomNum(startRow + 1, endRow - 1);\n\n    for (let i = startCol; i <= endCol; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${randRow}:${i}`;\n      console.log(startRow, endRow, currCord);\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    if (randRow - 1 > 0) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, randRow - 1, startCol, endCol, timeout, rows, cols, skip);\n    }\n\n    if (randRow + 1 < rows) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, randRow + 1, endRow, startCol, endCol, timeout, rows, cols, skip);\n    }\n  } else {\n    // divide vertically \n    let skip = getRandomNum(startRow, endRow);\n\n    while (skip === previousBisection) {\n      skip = getRandomNum(startRow, endRow);\n    }\n\n    const randCol = getRandomNum(startCol, endCol);\n    console.log(startCol, endCol, randCol);\n\n    for (let i = startRow; i <= endRow; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${i}:${randCol}`;\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    if (randCol - 1 > 0) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, randCol - 1, timeout, rows, cols, skip);\n    }\n\n    if (randCol + 1 < cols) {\n      await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, randCol + 1, endCol, timeout, rows, cols, skip);\n    }\n  }\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/recursiveDivision.js"],"names":["nodeTypeEnum","sleep","getRandomNum","recursiveDivision","startCord","targetCord","gridState","setGridState","rows","cols","timeout","x","y","currCord","nodeStateFunc","state","wall","none","start","target","prevState","divideScreen","startRow","endRow","startCol","endCol","previousBisection","width","height","skip","randRow","i","console","log","randCol"],"mappings":"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","sourcesContent":["import { nodeTypeEnum } from '../../utils/constants.js'\nimport { sleep, getRandomNum } from '../../utils/helper.js'\n\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    // make border around the screen\n    for (var x = 0; x < rows; x++) {\n        for (var y = 0; y < cols; y++) {\n            const currCord = `${x}:${y}`;\n            const nodeStateFunc = gridState[currCord][1];\n            if (x === 0 || x === (rows - 1) || y === 0 || y === (cols - 1)) {\n                await sleep(timeout);\n                let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n                if (currCord === startCord) {\n                    state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                else if (currCord === targetCord) {\n                    state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                nodeStateFunc(prevState => state);\n                setGridState(prevState => ({ ...prevState, [currCord]: [state, prevState[currCord][1]] }));\n            }\n        }\n    }\n\n    await divideScreen(startCord, targetCord, gridState, setGridState, 1, rows - 1, 1, cols - 1, timeout, rows, cols, -100);\n};\n\nconst divideScreen = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, rows, cols, previousBisection) => {\n    const width = endCol - startCol;\n    const height = endRow - startRow;\n\n    if (width <= 2 && height <= 2) {\n        return;\n    }\n\n    if (width < height) {\n        // divide horizontally\n        let skip = getRandomNum(startCol, endCol);\n        while (skip === previousBisection) {\n            skip = getRandomNum(startCol, endCol);\n        }\n\n        const randRow = getRandomNum(startRow + 1, endRow - 1);\n        for (let i = startCol; i <= endCol; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${randRow}:${i}`;\n            console.log(startRow, endRow, currCord);\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        if (randRow - 1 > 0) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, randRow - 1, startCol, endCol, timeout, rows, cols, skip);\n        }\n        if ((randRow + 1) < rows) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, randRow + 1, endRow, startCol, endCol, timeout, rows, cols, skip);\n        }\n    }\n    else {\n        // divide vertically \n        let skip = getRandomNum(startRow, endRow);\n        while (skip === previousBisection) {\n            skip = getRandomNum(startRow, endRow);\n        }\n\n        const randCol = getRandomNum(startCol, endCol);\n        console.log(startCol, endCol, randCol)\n        for (let i = startRow; i <= endRow; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${i}:${randCol}`;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        if (randCol - 1 > 0) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, randCol - 1, timeout, rows, cols, skip);\n        }\n        if (randCol + 1 < cols) {\n            await divideScreen(startCord, targetCord, gridState, setGridState, startRow, endRow, randCol + 1, endCol, timeout, rows, cols, skip);\n        }\n    }\n};"]},"metadata":{},"sourceType":"module"}