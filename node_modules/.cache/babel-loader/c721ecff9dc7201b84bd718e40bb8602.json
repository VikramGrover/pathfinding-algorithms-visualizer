{"ast":null,"code":"// pathfinding algorithm constants\nexport const DIJKSTRAS = \"Dijkstra's\";\nexport const ASTAR = \"A*\";\nexport const BFS = \"BFS\";\nexport const DFS = \"DFS\";\nexport const pathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nexport const unweightedPathAlgos = [DFS, BFS];\nexport const optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS]; // terrain algorithm constants\n\nexport const ALGO1 = \"ALGO1\";\nexport const ALGO2 = \"ALGO2\";\nconst nodeTypeEnum = {\n  'path': 0,\n  'visited': 1,\n  'visiting': 2,\n  'none': 3,\n  'target': 4,\n  'start': 5,\n  'remObstacle': 6,\n  'wall': 7,\n  'weighted100': 8,\n  'weighted80': 9,\n  'weighted60': 10,\n  'weighted40': 11,\n  'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\nexport { nodeTypeEnum };\nconst nodeColorClass = {\n  [nodeTypeEnum.none]: 'none',\n  [nodeTypeEnum.target]: 'target',\n  [nodeTypeEnum.wall]: 'wall',\n  [nodeTypeEnum.visiting]: 'visiting',\n  [nodeTypeEnum.start]: 'start',\n  [nodeTypeEnum.visited]: 'visited',\n  [nodeTypeEnum.path]: 'path',\n  [nodeTypeEnum.weighted100]: 'weighted100',\n  [nodeTypeEnum.weighted80]: 'weighted80',\n  [nodeTypeEnum.weighted60]: 'weighted60',\n  [nodeTypeEnum.weighted40]: 'weighted40',\n  [nodeTypeEnum.weighted20]: 'weighted20'\n};\nObject.freeze(nodeColorClass);\nexport { nodeColorClass };\nconst nodeWeight = {\n  [nodeTypeEnum.none]: 1,\n  [nodeTypeEnum.target]: 1,\n  [nodeTypeEnum.wall]: Infinity,\n  [nodeTypeEnum.start]: 1,\n  [nodeTypeEnum.weighted100]: 100,\n  [nodeTypeEnum.weighted80]: 80,\n  [nodeTypeEnum.weighted60]: 60,\n  [nodeTypeEnum.weighted40]: 40,\n  [nodeTypeEnum.weighted20]: 20\n};\nObject.freeze(nodeWeight);\nexport { nodeWeight };\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n  'Wall (∞)': 'wall',\n  'Weighted (100)': 'weighted100',\n  'Weighted (80)': 'weighted80',\n  'Weighted (60)': 'weighted60',\n  'Weighted (40)': 'weighted40',\n  'Weighted (20)': 'weighted20'\n};\nexport { obsEnum }; // export const getNodeWeight = (key) => {\n//     return nodeWeight[key];\n// };\n\nexport const getPathAlgos = () => {\n  return pathAlgos;\n};\nexport const getTerrainAlgos = () => {\n  return terrainAlgos;\n};\nexport const getObstacleTypes = () => {\n  return obstacleTypes;\n}; // export const getObstacleEnum = (key) => {\n//     return obsEnum[key];\n// };\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n  const row = parseInt(node.split(':')[0]);\n  const col = parseInt(node.split(':')[1]);\n  let res = [];\n\n  if (row - 1 >= 0 && gridState[`${row - 1}:${col}`][0] !== nodeTypeEnum.wall) {\n    res.push(`${row - 1}:${col}`);\n  }\n\n  if (col + 1 < cols && gridState[`${row}:${col + 1}`][0] !== nodeTypeEnum.wall) {\n    res.push(`${row}:${col + 1}`);\n  }\n\n  if (row + 1 < rows && gridState[`${row + 1}:${col}`][0] !== nodeTypeEnum.wall) {\n    res.push(`${row + 1}:${col}`);\n  }\n\n  if (col - 1 >= 0 && gridState[`${row}:${col - 1}`][0] !== nodeTypeEnum.wall) {\n    res.push(`${row}:${col - 1}`);\n  }\n\n  return res;\n};\nexport const createPath = (startCord, targetCord, prevNodes) => {\n  let cord = targetCord;\n  let path = [];\n\n  while (true) {\n    cord = prevNodes[cord];\n\n    if (cord === startCord) {\n      break;\n    }\n\n    path.push(cord);\n  }\n\n  return path;\n};\nexport const findMinPriorityNode = minPQ => {\n  let minPriority = Math.min(...Object.values(minPQ));\n\n  for (const key in minPQ) {\n    if (minPQ[key] === minPriority) {\n      return key;\n    }\n  }\n};\nexport const isAlgoUnweighted = algo => {\n  return unweightedPathAlgos.includes(algo);\n};\nexport const isAlgoOptimal = algo => {\n  return optimalPathAlgos.includes(algo);\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/util.js"],"names":["DIJKSTRAS","ASTAR","BFS","DFS","pathAlgos","unweightedPathAlgos","optimalPathAlgos","ALGO1","ALGO2","nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","visiting","start","visited","path","weighted100","weighted80","weighted60","weighted40","weighted20","nodeWeight","Infinity","terrainAlgos","obstacleTypes","obsEnum","getPathAlgos","getTerrainAlgos","getObstacleTypes","getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","push","createPath","startCord","targetCord","prevNodes","cord","findMinPriorityNode","minPQ","minPriority","Math","min","values","key","isAlgoUnweighted","algo","includes","isAlgoOptimal"],"mappings":"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","sourcesContent":["// pathfinding algorithm constants\nexport const DIJKSTRAS = \"Dijkstra's\";\nexport const ASTAR = \"A*\";\nexport const BFS = \"BFS\";\nexport const DFS = \"DFS\";\n\nexport const pathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nexport const unweightedPathAlgos = [DFS, BFS];\nexport const optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\n\n// terrain algorithm constants\nexport const ALGO1 = \"ALGO1\";\nexport const ALGO2 = \"ALGO2\";\n\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\n\nexport { nodeWeight };\n\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted100',\n    'Weighted (80)': 'weighted80',\n    'Weighted (60)': 'weighted60',\n    'Weighted (40)': 'weighted40',\n    'Weighted (20)': 'weighted20'\n}\nexport { obsEnum };\n// export const getNodeWeight = (key) => {\n//     return nodeWeight[key];\n// };\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\n// export const getObstacleEnum = (key) => {\n//     return obsEnum[key];\n// };\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n"]},"metadata":{},"sourceType":"module"}