{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const nodeSize = 35;\n  const topGridMargin = 200;\n  const sideGridMargin = 100;\n  const adjustedWinHeight = window.innerHeight - topGridMargin;\n  const adjustedWinWidth = window.innerWidth - sideGridMargin;\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n  let gridMap = {};\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeState = [getNodeTypeEnum('none')];\n\n      if (x === 0 && y === 0) {\n        nodeState.unshift(getNodeTypeEnum('start'));\n      } else if (x === rows - 1 && y === cols - 1) {\n        nodeState.unshift(getNodeTypeEnum('target'));\n      }\n\n      gridMap[`${x}:${y}`] = nodeState;\n    }\n  }\n\n  console.log(gridMap);\n  const [gridState, setGridState] = useState(gridMap);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      nodeSize: nodeSize\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"wWcqJ7/JTjm4G5fu/+dZEsP6w1g=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","getNodeTypeEnum","App","nodeSize","topGridMargin","sideGridMargin","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","rows","parseInt","cols","gridMap","x","y","nodeState","unshift","console","log","gridState","setGridState","useState"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,sBAAjB;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb,QAAMC,QAAQ,GAAG,EAAjB;AACA,QAAMC,aAAa,GAAG,GAAtB;AACA,QAAMC,cAAc,GAAG,GAAvB;AAEA,QAAMC,iBAAiB,GAAGC,MAAM,CAACC,WAAP,GAAqBJ,aAA/C;AACA,QAAMK,gBAAgB,GAAGF,MAAM,CAACG,UAAP,GAAoBL,cAA7C;AAEA,QAAMM,IAAI,GAAGC,QAAQ,CAACN,iBAAiB,GAAGH,QAArB,CAArB;AACA,QAAMU,IAAI,GAAGD,QAAQ,CAACH,gBAAgB,GAAGN,QAApB,CAArB;AAEA,MAAIW,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAApB,EAA0BI,CAAC,EAA3B,EAA+B;AAC7B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAApB,EAA0BG,CAAC,EAA3B,EAA+B;AAC7B,UAAIC,SAAS,GAAG,CAAChB,eAAe,CAAC,MAAD,CAAhB,CAAhB;;AACA,UAAIc,CAAC,KAAK,CAAN,IAAWC,CAAC,KAAK,CAArB,EAAwB;AACtBC,QAAAA,SAAS,CAACC,OAAV,CAAkBjB,eAAe,CAAC,OAAD,CAAjC;AACD,OAFD,MAGK,IAAIc,CAAC,KAAMJ,IAAI,GAAG,CAAd,IAAoBK,CAAC,KAAMH,IAAI,GAAG,CAAtC,EAA0C;AAC7CI,QAAAA,SAAS,CAACC,OAAV,CAAkBjB,eAAe,CAAC,QAAD,CAAjC;AACD;;AAEDa,MAAAA,OAAO,CAAE,GAAEC,CAAE,IAAGC,CAAE,EAAX,CAAP,GAAuBC,SAAvB;AACD;AACF;;AACDE,EAAAA,OAAO,CAACC,GAAR,CAAYN,OAAZ;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BC,QAAQ,CAACT,OAAD,CAA1C;AAEA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,IAAD;AAAM,MAAA,IAAI,EAAEH,IAAZ;AAAkB,MAAA,IAAI,EAAEE,IAAxB;AAA8B,MAAA,QAAQ,EAAEV;AAAxC;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA,kBADF;AAMD;;GAlCQD,G;;KAAAA,G;AAoCT,eAAeA,GAAf","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nfunction App() {\n  const nodeSize = 35;\n  const topGridMargin = 200;\n  const sideGridMargin = 100;\n\n  const adjustedWinHeight = window.innerHeight - topGridMargin;\n  const adjustedWinWidth = window.innerWidth - sideGridMargin;\n\n  const rows = parseInt(adjustedWinHeight / nodeSize);\n  const cols = parseInt(adjustedWinWidth / nodeSize);\n\n  let gridMap = {};\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeState = [getNodeTypeEnum('none')];\n      if (x === 0 && y === 0) {\n        nodeState.unshift(getNodeTypeEnum('start'));\n      }\n      else if (x === (rows - 1) && y === (cols - 1)) {\n        nodeState.unshift(getNodeTypeEnum('target'));\n      }\n\n      gridMap[`${x}:${y}`] = nodeState;\n    }\n  }\n  console.log(gridMap)\n  const [gridState, setGridState] = useState(gridMap);\n\n  return (\n    <>\n      <Header />\n      <Grid rows={rows} cols={cols} nodeSize={nodeSize} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}