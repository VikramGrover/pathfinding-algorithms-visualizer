{"ast":null,"code":"import _regeneratorRuntime from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _asyncToGenerator from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{dijkstras}from'../algorithms/path_finding/dijkstras.js';import{dfs}from'../algorithms/path_finding/dfs.js';import{bfs}from'../algorithms/path_finding/bfs.js';import{aStar}from'../algorithms/path_finding/aStar.js';import{getNodeTypeEnum}from'../utils/util.js';import{jsx as _jsx}from\"react/jsx-runtime\";var Visualize=function Visualize(_ref){var rows=_ref.rows,cols=_ref.cols,selectedAlgo=_ref.selectedAlgo,setGridState=_ref.setGridState,startCord=_ref.startCord,targetCord=_ref.targetCord,clearForReRun=_ref.clearForReRun,runningAlgo=_ref.runningAlgo,setRunningAlgo=_ref.setRunningAlgo;var run=/*#__PURE__*/function(){var _ref2=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var updatedGridState,path,timeout,_loop,i;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(startCord===targetCord)){_context.next=2;break;}return _context.abrupt(\"return\");case 2:updatedGridState=clearForReRun();setRunningAlgo(true);console.log(\"STARTING: \",selectedAlgo);path=[];timeout=1;_context.t0=selectedAlgo;_context.next=_context.t0===\"Dijkstra's\"?10:_context.t0===\"DFS\"?12:_context.t0===\"BFS\"?14:_context.t0===\"A*\"?16:18;break;case 10:path=dijkstras(startCord,targetCord,updatedGridState,setGridState,rows,cols,timeout);return _context.abrupt(\"break\",19);case 12:path=dfs(startCord,targetCord,updatedGridState,setGridState,rows,cols,timeout);return _context.abrupt(\"break\",19);case 14:path=bfs(startCord,targetCord,updatedGridState,setGridState,rows,cols,timeout);return _context.abrupt(\"break\",19);case 16:path=aStar(startCord,targetCord,updatedGridState,setGridState,rows,cols,timeout);return _context.abrupt(\"break\",19);case 18:return _context.abrupt(\"break\",19);case 19:console.log(\"ENDED: \",selectedAlgo);_loop=function _loop(i){setTimeout(function(){setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},path[i],[getNodeTypeEnum('path')].concat(_toConsumableArray(updatedGridState[path[i]]))));});},timeout);};for(i=path.length-1;i>=0;i--){_loop(i);}setTimeout(function(){setRunningAlgo(false);},timeout);case 23:case\"end\":return _context.stop();}}},_callee);}));return function run(){return _ref2.apply(this,arguments);};}();return/*#__PURE__*/_jsx(\"div\",{className:\"button \".concat(runningAlgo?'disabled':'green'),onClick:runningAlgo?null:run,children:\"Run\"});};export default Visualize;","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Visualize.js"],"names":["dijkstras","dfs","bfs","aStar","getNodeTypeEnum","Visualize","rows","cols","selectedAlgo","setGridState","startCord","targetCord","clearForReRun","runningAlgo","setRunningAlgo","run","updatedGridState","console","log","path","timeout","i","setTimeout","prevState","length"],"mappings":"u7BAAA,OAASA,SAAT,KAA0B,yCAA1B,CACA,OAASC,GAAT,KAAoB,mCAApB,CACA,OAASC,GAAT,KAAoB,mCAApB,CACA,OAASC,KAAT,KAAsB,qCAAtB,CACA,OAASC,eAAT,KAAgC,kBAAhC,C,2CAEA,GAAMC,CAAAA,SAAS,CAAG,QAAZA,CAAAA,SAAY,MAAmH,IAAhHC,CAAAA,IAAgH,MAAhHA,IAAgH,CAA1GC,IAA0G,MAA1GA,IAA0G,CAApGC,YAAoG,MAApGA,YAAoG,CAAtFC,YAAsF,MAAtFA,YAAsF,CAAxEC,SAAwE,MAAxEA,SAAwE,CAA7DC,UAA6D,MAA7DA,UAA6D,CAAjDC,aAAiD,MAAjDA,aAAiD,CAAlCC,WAAkC,MAAlCA,WAAkC,CAArBC,cAAqB,MAArBA,cAAqB,CACjI,GAAMC,CAAAA,GAAG,2FAAG,kLACJL,SAAS,GAAKC,UADV,kEAKFK,gBALE,CAKiBJ,aAAa,EAL9B,CAMRE,cAAc,CAAC,IAAD,CAAd,CACAG,OAAO,CAACC,GAAR,CAAY,YAAZ,CAA0BV,YAA1B,EAEIW,IATI,CASG,EATH,CAUJC,OAVI,CAUM,CAVN,aAWAZ,YAXA,6BAYC,YAZD,kBAeC,KAfD,kBAkBC,KAlBD,kBAqBC,IArBD,qBAaAW,IAAI,CAAGnB,SAAS,CAACU,SAAD,CAAYC,UAAZ,CAAwBK,gBAAxB,CAA0CP,YAA1C,CAAwDH,IAAxD,CAA8DC,IAA9D,CAAoEa,OAApE,CAAhB,CAbA,2CAgBAD,IAAI,CAAGlB,GAAG,CAACS,SAAD,CAAYC,UAAZ,CAAwBK,gBAAxB,CAA0CP,YAA1C,CAAwDH,IAAxD,CAA8DC,IAA9D,CAAoEa,OAApE,CAAV,CAhBA,2CAmBAD,IAAI,CAAGjB,GAAG,CAACQ,SAAD,CAAYC,UAAZ,CAAwBK,gBAAxB,CAA0CP,YAA1C,CAAwDH,IAAxD,CAA8DC,IAA9D,CAAoEa,OAApE,CAAV,CAnBA,2CAsBAD,IAAI,CAAGhB,KAAK,CAACO,SAAD,CAAYC,UAAZ,CAAwBK,gBAAxB,CAA0CP,YAA1C,CAAwDH,IAAxD,CAA8DC,IAA9D,CAAoEa,OAApE,CAAZ,CAtBA,sFA4BRH,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAuBV,YAAvB,EA5BQ,qBA8BCa,CA9BD,EA+BJC,UAAU,CAAC,UAAM,CACbb,YAAY,CAAC,SAAAc,SAAS,wCAAUA,SAAV,wBAAsBJ,IAAI,CAACE,CAAD,CAA1B,EAAiCjB,eAAe,CAAC,MAAD,CAAhD,4BAA6DY,gBAAgB,CAACG,IAAI,CAACE,CAAD,CAAL,CAA7E,MAAV,CAAZ,CACH,CAFS,CAEPD,OAFO,CAAV,CA/BI,EA8BR,IAASC,CAAT,CAAaF,IAAI,CAACK,MAAL,CAAc,CAA3B,CAA8BH,CAAC,EAAI,CAAnC,CAAsCA,CAAC,EAAvC,CAA2C,OAAlCA,CAAkC,EAI1C,CAEDC,UAAU,CAAC,UAAM,CACbR,cAAc,CAAC,KAAD,CAAd,CACH,CAFS,CAEPM,OAFO,CAAV,CApCQ,uDAAH,kBAAHL,CAAAA,GAAG,2CAAT,CAyCA,mBACI,YAAK,SAAS,kBAAYF,WAAW,CAAG,UAAH,CAAgB,OAAvC,CAAd,CAAgE,OAAO,CAAEA,WAAW,CAAG,IAAH,CAAUE,GAA9F,iBADJ,CAKH,CA/CD,CAiDA,cAAeV,CAAAA,SAAf","sourcesContent":["import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        let timeout = 1;\n        switch (selectedAlgo) {\n            case \"Dijkstra's\":\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case \"DFS\":\n                path = dfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case \"BFS\":\n                path = bfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case \"A*\":\n                path = aStar(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            default:\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path'), ...updatedGridState[path[i]]] }));\n            }, timeout);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, timeout);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n"]},"metadata":{},"sourceType":"module"}