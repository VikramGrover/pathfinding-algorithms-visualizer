{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { useEffect, useState } from 'react';\nimport { EMPTY_NODE_BORDER_COLOR, nodeColors, nodeTypeEnum } from '../utils/constants.js';\nimport { getNodeColor } from '../utils/helper.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection,\n  setStartCord,\n  setTargetCord,\n  runningAlgo,\n  selectedObstacle,\n  startingState\n}) => {\n  _s();\n\n  const [nodeState, setNodeState] = useState(startingState);\n  const [nodeStyle, setNodeStyle] = useState({});\n  useEffect(() => {\n    setGridState(prevState => ({ ...prevState,\n      [nodeId]: [startingState, setNodeState]\n    }));\n  }, []);\n  useEffect(() => {\n    const nodeColor = getNodeColor(nodeState);\n    const nodeStyle = {\n      width: size,\n      height: size,\n      backgroundColor: nodeColor,\n      border: `1px solid ${nodeState[0] === nodeTypeEnum.none ? EMPTY_NODE_BORDER_COLOR : nodeColor}`\n    };\n  });\n\n  if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n    nodeStyle.cursor = 'grabbing';\n  }\n\n  const mouseDowned = () => {\n    if (nodeState[0] <= nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n      setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState]\n      }));\n      return;\n    } else if (nodeState[0] >= nodeTypeEnum.wall) {\n      setNodeState(prevState => prevState.slice(1));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeState.slice(1), setNodeState]\n      }));\n      setDraggingSelection(nodeTypeEnum.remObstacle);\n      return;\n    } else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeState.slice(1), setNodeState]\n      }));\n    }\n\n    setDraggingSelection(nodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n      setNodeState(prevState => prevState.slice(1));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeState.slice(1), setNodeState]\n      }));\n    } else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n      setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState]\n      }));\n    } else if (draggingSelection === nodeTypeEnum.start) {\n      setNodeState(prevState => [draggingSelection, ...prevState]);\n    } else if (draggingSelection === nodeTypeEnum.target) {\n      setNodeState(prevState => [draggingSelection, ...prevState]);\n    }\n  };\n\n  const mouseLeft = () => {\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n      setNodeState(prevState => prevState.slice(1));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection === nodeTypeEnum.start) {\n      setStartCord(nodeId);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeState, setNodeState]\n      }));\n    } else if (draggingSelection === nodeTypeEnum.target) {\n      setTargetCord(nodeId);\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [nodeState, setNodeState]\n      }));\n    }\n\n    if (draggingSelection !== nodeTypeEnum.none) {\n      setDraggingSelection(nodeTypeEnum.none);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeStyle,\n    className: `node ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`,\n    onMouseDown: runningAlgo ? null : mouseDowned,\n    onMouseUp: runningAlgo ? null : mouseUped,\n    onMouseEnter: runningAlgo ? null : mouseEntered,\n    onMouseLeave: runningAlgo ? null : mouseLeft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"XORXDPK53JRyC4Ic+Rs+W8ETYHw=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["React","useEffect","useState","EMPTY_NODE_BORDER_COLOR","nodeColors","nodeTypeEnum","getNodeColor","Node","nodeId","size","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","startingState","nodeState","setNodeState","nodeStyle","setNodeStyle","prevState","nodeColor","width","height","backgroundColor","border","none","start","target","cursor","mouseDowned","wall","slice","remObstacle","mouseEntered","mouseLeft","mouseUped"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { EMPTY_NODE_BORDER_COLOR, nodeColors, nodeTypeEnum } from '../utils/constants.js'\nimport { getNodeColor } from '../utils/helper.js'\n\nconst Node = ({ nodeId, size, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n    const [nodeStyle, setNodeStyle] = useState({});\n    useEffect(() => {\n        setGridState(prevState => ({ ...prevState, [nodeId]: [startingState, setNodeState] }));\n    }, []);\n\n    useEffect(() => {\n        const nodeColor = getNodeColor(nodeState);\n\n        const nodeStyle = {\n            width: size,\n            height: size,\n            backgroundColor: nodeColor,\n            border: `1px solid ${nodeState[0] === nodeTypeEnum.none ? EMPTY_NODE_BORDER_COLOR : nodeColor}`\n        };\n    });\n\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n        nodeStyle.cursor = 'grabbing';\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n        else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n};\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}