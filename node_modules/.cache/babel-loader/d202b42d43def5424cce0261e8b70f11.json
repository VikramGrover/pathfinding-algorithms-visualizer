{"ast":null,"code":"/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n(function (global) {\n  var module = global.noise = {};\n\n  function Grad(x, y, z) {\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  Grad.prototype.dot2 = function (x, y) {\n    return this.x * x + this.y * y;\n  };\n\n  Grad.prototype.dot3 = function (x, y, z) {\n    return this.x * x + this.y * y + this.z * z;\n  };\n\n  var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0), new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1), new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n  var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180]; // To remove the need for index wrapping, double the permutation table length\n\n  var perm = new Array(512);\n  var gradP = new Array(512); // This isn't a very good seeding function, but it works ok. It supports 2^16\n  // different seed values. Write something better if you need more seeds.\n\n  module.seed = function (seed) {\n    if (seed > 0 && seed < 1) {\n      // Scale the seed out\n      seed *= 65536;\n    }\n\n    seed = Math.floor(seed);\n\n    if (seed < 256) {\n      seed |= seed << 8;\n    }\n\n    for (var i = 0; i < 256; i++) {\n      var v;\n\n      if (i & 1) {\n        v = p[i] ^ seed & 255;\n      } else {\n        v = p[i] ^ seed >> 8 & 255;\n      }\n\n      perm[i] = perm[i + 256] = v;\n      gradP[i] = gradP[i + 256] = grad3[v % 12];\n    }\n  };\n\n  module.seed(0);\n  /*\n  for(var i=0; i<256; i++) {\n    perm[i] = perm[i + 256] = p[i];\n    gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n  }*/\n  // Skewing and unskewing factors for 2, 3, and 4 dimensions\n\n  var F2 = 0.5 * (Math.sqrt(3) - 1);\n  var G2 = (3 - Math.sqrt(3)) / 6;\n  var F3 = 1 / 3;\n  var G3 = 1 / 6; // 2D simplex noise\n\n  module.simplex2 = function (xin, yin) {\n    var n0, n1, n2; // Noise contributions from the three corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin) * F2; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var t = (i + j) * G2;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t; // For the 2D case, the simplex shape is an equilateral triangle.\n    // Determine which simplex we are in.\n\n    var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\n    if (x0 > y0) {\n      // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n      i1 = 1;\n      j1 = 0;\n    } else {\n      // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n      i1 = 0;\n      j1 = 1;\n    } // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n    // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n    // c = (3-sqrt(3))/6\n\n\n    var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\n    var y1 = y0 - j1 + G2;\n    var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n\n    var y2 = y0 - 1 + 2 * G2; // Work out the hashed gradient indices of the three simplex corners\n\n    i &= 255;\n    j &= 255;\n    var gi0 = gradP[i + perm[j]];\n    var gi1 = gradP[i + i1 + perm[j + j1]];\n    var gi2 = gradP[i + 1 + perm[j + 1]]; // Calculate the contribution from the three corners\n\n    var t0 = 0.5 - x0 * x0 - y0 * y0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot2(x0, y0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.5 - x1 * x1 - y1 * y1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot2(x1, y1);\n    }\n\n    var t2 = 0.5 - x2 * x2 - y2 * y2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot2(x2, y2);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 70 * (n0 + n1 + n2);\n  }; // 3D simplex noise\n\n\n  module.simplex3 = function (xin, yin, zin) {\n    var n0, n1, n2, n3; // Noise contributions from the four corners\n    // Skew the input space to determine which simplex cell we're in\n\n    var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n\n    var i = Math.floor(xin + s);\n    var j = Math.floor(yin + s);\n    var k = Math.floor(zin + s);\n    var t = (i + j + k) * G3;\n    var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n\n    var y0 = yin - j + t;\n    var z0 = zin - k + t; // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n    // Determine which simplex we are in.\n\n    var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\n    var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\n    if (x0 >= y0) {\n      if (y0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      } else if (x0 >= z0) {\n        i1 = 1;\n        j1 = 0;\n        k1 = 0;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 1;\n        j2 = 0;\n        k2 = 1;\n      }\n    } else {\n      if (y0 < z0) {\n        i1 = 0;\n        j1 = 0;\n        k1 = 1;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else if (x0 < z0) {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 0;\n        j2 = 1;\n        k2 = 1;\n      } else {\n        i1 = 0;\n        j1 = 1;\n        k1 = 0;\n        i2 = 1;\n        j2 = 1;\n        k2 = 0;\n      }\n    } // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n    // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n    // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n    // c = 1/6.\n\n\n    var x1 = x0 - i1 + G3; // Offsets for second corner\n\n    var y1 = y0 - j1 + G3;\n    var z1 = z0 - k1 + G3;\n    var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n\n    var y2 = y0 - j2 + 2 * G3;\n    var z2 = z0 - k2 + 2 * G3;\n    var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n\n    var y3 = y0 - 1 + 3 * G3;\n    var z3 = z0 - 1 + 3 * G3; // Work out the hashed gradient indices of the four simplex corners\n\n    i &= 255;\n    j &= 255;\n    k &= 255;\n    var gi0 = gradP[i + perm[j + perm[k]]];\n    var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n    var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n    var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]]; // Calculate the contribution from the four corners\n\n    var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\n    if (t0 < 0) {\n      n0 = 0;\n    } else {\n      t0 *= t0;\n      n0 = t0 * t0 * gi0.dot3(x0, y0, z0); // (x,y) of grad3 used for 2D gradient\n    }\n\n    var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\n    if (t1 < 0) {\n      n1 = 0;\n    } else {\n      t1 *= t1;\n      n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n    }\n\n    var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\n    if (t2 < 0) {\n      n2 = 0;\n    } else {\n      t2 *= t2;\n      n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n    }\n\n    var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\n    if (t3 < 0) {\n      n3 = 0;\n    } else {\n      t3 *= t3;\n      n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n    } // Add contributions from each corner to get the final noise value.\n    // The result is scaled to return values in the interval [-1,1].\n\n\n    return 32 * (n0 + n1 + n2 + n3);\n  }; // ##### Perlin noise stuff\n\n\n  function fade(t) {\n    return t * t * t * (t * (t * 6 - 15) + 10);\n  }\n\n  function lerp(a, b, t) {\n    return (1 - t) * a + t * b;\n  } // 2D Perlin Noise\n\n\n  module.perlin2 = function (x, y) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y); // Get relative xy coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255; // Calculate noise contributions from each of the four corners\n\n    var n00 = gradP[X + perm[Y]].dot2(x, y);\n    var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n    var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n    var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1); // Compute the fade curve value for x\n\n    var u = fade(x); // Interpolate the four results\n\n    return lerp(lerp(n00, n10, u), lerp(n01, n11, u), fade(y));\n  }; // 3D Perlin Noise\n\n\n  module.perlin3 = function (x, y, z) {\n    // Find unit grid cell containing point\n    var X = Math.floor(x),\n        Y = Math.floor(y),\n        Z = Math.floor(z); // Get relative xyz coordinates of point within that cell\n\n    x = x - X;\n    y = y - Y;\n    z = z - Z; // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n\n    X = X & 255;\n    Y = Y & 255;\n    Z = Z & 255; // Calculate noise contributions from each of the eight corners\n\n    var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n    var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n    var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n    var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n    var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n    var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n    var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n    var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1); // Compute the fade curve value for x, y, z\n\n    var u = fade(x);\n    var v = fade(y);\n    var w = fade(z); // Interpolate\n\n    return lerp(lerp(lerp(n000, n100, u), lerp(n001, n101, u), w), lerp(lerp(n010, n110, u), lerp(n011, n111, u), w), v);\n  };\n})(this);","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/utils/perlin.js"],"names":["global","module","noise","Grad","x","y","z","prototype","dot2","dot3","grad3","p","perm","Array","gradP","seed","Math","floor","i","v","F2","sqrt","G2","F3","G3","simplex2","xin","yin","n0","n1","n2","s","j","t","x0","y0","i1","j1","x1","y1","x2","y2","gi0","gi1","gi2","t0","t1","t2","simplex3","zin","n3","k","z0","k1","i2","j2","k2","z1","z2","x3","y3","z3","gi3","t3","fade","lerp","a","b","perlin2","X","Y","n00","n01","n10","n11","u","perlin3","Z","n000","n001","n010","n011","n100","n101","n110","n111","w"],"mappings":"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","sourcesContent":["/*\n * A speed-improved perlin and simplex noise algorithms for 2D.\n *\n * Based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n * Converted to Javascript by Joseph Gentle.\n *\n * Version 2012-03-09\n *\n * This code was placed in the public domain by its original author,\n * Stefan Gustavson. You may use it as you see fit, but\n * attribution is appreciated.\n *\n */\n\n(function (global) {\n    var module = global.noise = {};\n\n    function Grad(x, y, z) {\n        this.x = x; this.y = y; this.z = z;\n    }\n\n    Grad.prototype.dot2 = function (x, y) {\n        return this.x * x + this.y * y;\n    };\n\n    Grad.prototype.dot3 = function (x, y, z) {\n        return this.x * x + this.y * y + this.z * z;\n    };\n\n    var grad3 = [new Grad(1, 1, 0), new Grad(-1, 1, 0), new Grad(1, -1, 0), new Grad(-1, -1, 0),\n    new Grad(1, 0, 1), new Grad(-1, 0, 1), new Grad(1, 0, -1), new Grad(-1, 0, -1),\n    new Grad(0, 1, 1), new Grad(0, -1, 1), new Grad(0, 1, -1), new Grad(0, -1, -1)];\n\n    var p = [151, 160, 137, 91, 90, 15,\n        131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,\n        190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,\n        88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,\n        77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,\n        102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,\n        135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,\n        5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,\n        223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,\n        129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,\n        251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,\n        49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,\n        138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n    // To remove the need for index wrapping, double the permutation table length\n    var perm = new Array(512);\n    var gradP = new Array(512);\n\n    // This isn't a very good seeding function, but it works ok. It supports 2^16\n    // different seed values. Write something better if you need more seeds.\n    module.seed = function (seed) {\n        if (seed > 0 && seed < 1) {\n            // Scale the seed out\n            seed *= 65536;\n        }\n\n        seed = Math.floor(seed);\n        if (seed < 256) {\n            seed |= seed << 8;\n        }\n\n        for (var i = 0; i < 256; i++) {\n            var v;\n            if (i & 1) {\n                v = p[i] ^ (seed & 255);\n            } else {\n                v = p[i] ^ ((seed >> 8) & 255);\n            }\n\n            perm[i] = perm[i + 256] = v;\n            gradP[i] = gradP[i + 256] = grad3[v % 12];\n        }\n    };\n\n    module.seed(0);\n\n    /*\n    for(var i=0; i<256; i++) {\n      perm[i] = perm[i + 256] = p[i];\n      gradP[i] = gradP[i + 256] = grad3[perm[i] % 12];\n    }*/\n\n    // Skewing and unskewing factors for 2, 3, and 4 dimensions\n    var F2 = 0.5 * (Math.sqrt(3) - 1);\n    var G2 = (3 - Math.sqrt(3)) / 6;\n\n    var F3 = 1 / 3;\n    var G3 = 1 / 6;\n\n    // 2D simplex noise\n    module.simplex2 = function (xin, yin) {\n        var n0, n1, n2; // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin + yin) * F2; // Hairy factor for 2D\n        var i = Math.floor(xin + s);\n        var j = Math.floor(yin + s);\n        var t = (i + j) * G2;\n        var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n        var y0 = yin - j + t;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        var i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1 = 1; j1 = 0;\n        } else {    // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n            i1 = 0; j1 = 1;\n        }\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        var x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        var y1 = y0 - j1 + G2;\n        var x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n        var y2 = y0 - 1 + 2 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        i &= 255;\n        j &= 255;\n        var gi0 = gradP[i + perm[j]];\n        var gi1 = gradP[i + i1 + perm[j + j1]];\n        var gi2 = gradP[i + 1 + perm[j + 1]];\n        // Calculate the contribution from the three corners\n        var t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 < 0) {\n            n0 = 0;\n        } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot2(x0, y0);  // (x,y) of grad3 used for 2D gradient\n        }\n        var t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 < 0) {\n            n1 = 0;\n        } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot2(x1, y1);\n        }\n        var t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 < 0) {\n            n2 = 0;\n        } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot2(x2, y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n    };\n\n    // 3D simplex noise\n    module.simplex3 = function (xin, yin, zin) {\n        var n0, n1, n2, n3; // Noise contributions from the four corners\n\n        // Skew the input space to determine which simplex cell we're in\n        var s = (xin + yin + zin) * F3; // Hairy factor for 2D\n        var i = Math.floor(xin + s);\n        var j = Math.floor(yin + s);\n        var k = Math.floor(zin + s);\n\n        var t = (i + j + k) * G3;\n        var x0 = xin - i + t; // The x,y distances from the cell origin, unskewed.\n        var y0 = yin - j + t;\n        var z0 = zin - k + t;\n\n        // For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n        // Determine which simplex we are in.\n        var i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n        var i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n        if (x0 >= y0) {\n            if (y0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\n            else if (x0 >= z0) { i1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1; }\n            else { i1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1; }\n        } else {\n            if (y0 < z0) { i1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1; }\n            else if (x0 < z0) { i1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1; }\n            else { i1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0; }\n        }\n        // A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n        // a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n        // a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n        // c = 1/6.\n        var x1 = x0 - i1 + G3; // Offsets for second corner\n        var y1 = y0 - j1 + G3;\n        var z1 = z0 - k1 + G3;\n\n        var x2 = x0 - i2 + 2 * G3; // Offsets for third corner\n        var y2 = y0 - j2 + 2 * G3;\n        var z2 = z0 - k2 + 2 * G3;\n\n        var x3 = x0 - 1 + 3 * G3; // Offsets for fourth corner\n        var y3 = y0 - 1 + 3 * G3;\n        var z3 = z0 - 1 + 3 * G3;\n\n        // Work out the hashed gradient indices of the four simplex corners\n        i &= 255;\n        j &= 255;\n        k &= 255;\n        var gi0 = gradP[i + perm[j + perm[k]]];\n        var gi1 = gradP[i + i1 + perm[j + j1 + perm[k + k1]]];\n        var gi2 = gradP[i + i2 + perm[j + j2 + perm[k + k2]]];\n        var gi3 = gradP[i + 1 + perm[j + 1 + perm[k + 1]]];\n\n        // Calculate the contribution from the four corners\n        var t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n        if (t0 < 0) {\n            n0 = 0;\n        } else {\n            t0 *= t0;\n            n0 = t0 * t0 * gi0.dot3(x0, y0, z0);  // (x,y) of grad3 used for 2D gradient\n        }\n        var t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n        if (t1 < 0) {\n            n1 = 0;\n        } else {\n            t1 *= t1;\n            n1 = t1 * t1 * gi1.dot3(x1, y1, z1);\n        }\n        var t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n        if (t2 < 0) {\n            n2 = 0;\n        } else {\n            t2 *= t2;\n            n2 = t2 * t2 * gi2.dot3(x2, y2, z2);\n        }\n        var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n        if (t3 < 0) {\n            n3 = 0;\n        } else {\n            t3 *= t3;\n            n3 = t3 * t3 * gi3.dot3(x3, y3, z3);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 32 * (n0 + n1 + n2 + n3);\n\n    };\n\n    // ##### Perlin noise stuff\n\n    function fade(t) {\n        return t * t * t * (t * (t * 6 - 15) + 10);\n    }\n\n    function lerp(a, b, t) {\n        return (1 - t) * a + t * b;\n    }\n\n    // 2D Perlin Noise\n    module.perlin2 = function (x, y) {\n        // Find unit grid cell containing point\n        var X = Math.floor(x), Y = Math.floor(y);\n        // Get relative xy coordinates of point within that cell\n        x = x - X; y = y - Y;\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255;\n\n        // Calculate noise contributions from each of the four corners\n        var n00 = gradP[X + perm[Y]].dot2(x, y);\n        var n01 = gradP[X + perm[Y + 1]].dot2(x, y - 1);\n        var n10 = gradP[X + 1 + perm[Y]].dot2(x - 1, y);\n        var n11 = gradP[X + 1 + perm[Y + 1]].dot2(x - 1, y - 1);\n\n        // Compute the fade curve value for x\n        var u = fade(x);\n\n        // Interpolate the four results\n        return lerp(\n            lerp(n00, n10, u),\n            lerp(n01, n11, u),\n            fade(y));\n    };\n\n    // 3D Perlin Noise\n    module.perlin3 = function (x, y, z) {\n        // Find unit grid cell containing point\n        var X = Math.floor(x), Y = Math.floor(y), Z = Math.floor(z);\n        // Get relative xyz coordinates of point within that cell\n        x = x - X; y = y - Y; z = z - Z;\n        // Wrap the integer cells at 255 (smaller integer period can be introduced here)\n        X = X & 255; Y = Y & 255; Z = Z & 255;\n\n        // Calculate noise contributions from each of the eight corners\n        var n000 = gradP[X + perm[Y + perm[Z]]].dot3(x, y, z);\n        var n001 = gradP[X + perm[Y + perm[Z + 1]]].dot3(x, y, z - 1);\n        var n010 = gradP[X + perm[Y + 1 + perm[Z]]].dot3(x, y - 1, z);\n        var n011 = gradP[X + perm[Y + 1 + perm[Z + 1]]].dot3(x, y - 1, z - 1);\n        var n100 = gradP[X + 1 + perm[Y + perm[Z]]].dot3(x - 1, y, z);\n        var n101 = gradP[X + 1 + perm[Y + perm[Z + 1]]].dot3(x - 1, y, z - 1);\n        var n110 = gradP[X + 1 + perm[Y + 1 + perm[Z]]].dot3(x - 1, y - 1, z);\n        var n111 = gradP[X + 1 + perm[Y + 1 + perm[Z + 1]]].dot3(x - 1, y - 1, z - 1);\n\n        // Compute the fade curve value for x, y, z\n        var u = fade(x);\n        var v = fade(y);\n        var w = fade(z);\n\n        // Interpolate\n        return lerp(\n            lerp(\n                lerp(n000, n100, u),\n                lerp(n001, n101, u), w),\n            lerp(\n                lerp(n010, n110, u),\n                lerp(n011, n111, u), w),\n            v);\n    };\n})(this);"]},"metadata":{},"sourceType":"module"}