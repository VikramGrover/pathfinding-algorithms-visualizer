{"ast":null,"code":"import { getNeighbourNodes, sleep } from '../../utils/helper.js';\nimport { nodeTypeEnum } from '../../utils/constants.js';\nexport const dfs = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n  const stack = [startCord];\n  const path = [];\n  const visited = {\n    [startCord]: 1\n  };\n\n  while (stack.length > 0) {\n    const currCord = stack[0];\n\n    if (currCord !== targetCord && currCord !== startCord) {\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.visiting, nodeTypeEnum.none]);\n    }\n\n    if (currCord === targetCord) {\n      stack.pop();\n      stack.shift();\n      return stack;\n    }\n\n    if (currCord !== startCord) {\n      path.unshift(currCord);\n      visited[currCord] = 1;\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.visited, nodeTypeEnum.none]);\n    }\n\n    const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n    let unvisitedNeighbourFound = false;\n\n    for (const neighbour of neighbours) {\n      if (neighbour in visited) {\n        continue;\n      }\n\n      stack.unshift(neighbour);\n      unvisitedNeighbourFound = true;\n      break;\n    }\n\n    if (!unvisitedNeighbourFound) {\n      stack.splice(0, 1);\n    }\n\n    await sleep(timeout);\n  }\n\n  return [];\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js"],"names":["getNeighbourNodes","sleep","nodeTypeEnum","dfs","startCord","targetCord","gridState","rows","cols","timeout","stack","path","visited","length","currCord","nodeStateFunc","prevState","visiting","none","pop","shift","unshift","neighbours","unvisitedNeighbourFound","neighbour","splice"],"mappings":"AAAA,SAASA,iBAAT,EAA4BC,KAA5B,QAAyC,uBAAzC;AACA,SAASC,YAAT,QAA6B,0BAA7B;AAEA,OAAO,MAAMC,GAAG,GAAG,OAAOC,SAAP,EAAkBC,UAAlB,EAA8BC,SAA9B,EAAyCC,IAAzC,EAA+CC,IAA/C,EAAqDC,OAArD,KAAiE;AAChF,QAAMC,KAAK,GAAG,CAACN,SAAD,CAAd;AACA,QAAMO,IAAI,GAAG,EAAb;AACA,QAAMC,OAAO,GAAG;AAAE,KAACR,SAAD,GAAa;AAAf,GAAhB;;AAEA,SAAOM,KAAK,CAACG,MAAN,GAAe,CAAtB,EAAyB;AACrB,UAAMC,QAAQ,GAAGJ,KAAK,CAAC,CAAD,CAAtB;;AACA,QAAII,QAAQ,KAAKT,UAAb,IAA2BS,QAAQ,KAAKV,SAA5C,EAAuD;AACnD,YAAMW,aAAa,GAAGT,SAAS,CAACQ,QAAD,CAAT,CAAoB,CAApB,CAAtB;AACAC,MAAAA,aAAa,CAACC,SAAS,IAAK,CAACd,YAAY,CAACe,QAAd,EAAwBf,YAAY,CAACgB,IAArC,CAAf,CAAb;AACH;;AAED,QAAIJ,QAAQ,KAAKT,UAAjB,EAA6B;AACzBK,MAAAA,KAAK,CAACS,GAAN;AACAT,MAAAA,KAAK,CAACU,KAAN;AACA,aAAOV,KAAP;AACH;;AAED,QAAII,QAAQ,KAAKV,SAAjB,EAA4B;AACxBO,MAAAA,IAAI,CAACU,OAAL,CAAaP,QAAb;AACAF,MAAAA,OAAO,CAACE,QAAD,CAAP,GAAoB,CAApB;AACA,YAAMC,aAAa,GAAGT,SAAS,CAACQ,QAAD,CAAT,CAAoB,CAApB,CAAtB;AACAC,MAAAA,aAAa,CAACC,SAAS,IAAK,CAACd,YAAY,CAACU,OAAd,EAAuBV,YAAY,CAACgB,IAApC,CAAf,CAAb;AACH;;AAED,UAAMI,UAAU,GAAGtB,iBAAiB,CAACc,QAAD,EAAWP,IAAX,EAAiBC,IAAjB,EAAuBF,SAAvB,CAApC;AACA,QAAIiB,uBAAuB,GAAG,KAA9B;;AACA,SAAK,MAAMC,SAAX,IAAwBF,UAAxB,EAAoC;AAChC,UAAIE,SAAS,IAAIZ,OAAjB,EAA0B;AACtB;AACH;;AAEDF,MAAAA,KAAK,CAACW,OAAN,CAAcG,SAAd;AACAD,MAAAA,uBAAuB,GAAG,IAA1B;AACA;AACH;;AAED,QAAI,CAACA,uBAAL,EAA8B;AAC1Bb,MAAAA,KAAK,CAACe,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACH;;AAED,UAAMxB,KAAK,CAACQ,OAAD,CAAX;AACH;;AAED,SAAO,EAAP;AACH,CA7CM","sourcesContent":["import { getNeighbourNodes, sleep } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};"]},"metadata":{},"sourceType":"module"}