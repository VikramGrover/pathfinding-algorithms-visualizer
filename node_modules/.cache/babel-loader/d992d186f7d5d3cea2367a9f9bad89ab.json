{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport Node from './Node.js';\nimport { useState } from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Grid = ({\n  rows,\n  cols,\n  nodeSize,\n  gridState,\n  setGridState,\n  selectedObstacle\n}) => {\n  _s();\n\n  const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n  const getNodeState = nodeId => {\n    return gridState[nodeId];\n  };\n\n  const setNodeState = (nodeId, value) => {\n    console.log(key, value);\n    setGridState({ ...gridState,\n      [nodeId]: value\n    });\n  }; // fill nodes in the grid\n\n\n  const nodes = [];\n\n  for (let x = 0; x < rows; x++) {\n    for (let y = 0; y < cols; y++) {\n      let nodeId = `${x}:${y}`;\n      nodes.push( /*#__PURE__*/_jsxDEV(Node, {\n        nodeId: nodeId,\n        size: nodeSize,\n        getNodeState: getNodeState,\n        setNodeState: setNodeState,\n        draggingSelection: draggingSelection,\n        setDraggingSelection: setDraggingSelection\n      }, nodeId, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 24\n      }, this));\n    }\n  }\n\n  const gridStyle = {\n    width: cols * nodeSize + cols,\n    height: rows * nodeSize + rows\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid\",\n    style: gridStyle,\n    children: nodes\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Grid, \"aXoTsMh6M1aulyyPncGqlvGCZ2o=\");\n\n_c = Grid;\nexport default Grid;\n\nvar _c;\n\n$RefreshReg$(_c, \"Grid\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Grid.js"],"names":["React","Node","useState","getNodeTypeEnum","Grid","rows","cols","nodeSize","gridState","setGridState","selectedObstacle","draggingSelection","setDraggingSelection","getNodeState","nodeId","setNodeState","value","console","log","key","nodes","x","y","push","gridStyle","width","height"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,eAAT,QAAgC,kBAAhC;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA,QAAd;AAAwBC,EAAAA,SAAxB;AAAmCC,EAAAA,YAAnC;AAAiDC,EAAAA;AAAjD,CAAD,KAAyE;AAAA;;AAClF,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CV,QAAQ,CAACC,eAAe,CAAC,MAAD,CAAhB,CAA1D;;AAEA,QAAMU,YAAY,GAAIC,MAAD,IAAY;AAC7B,WAAON,SAAS,CAACM,MAAD,CAAhB;AACH,GAFD;;AAIA,QAAMC,YAAY,GAAG,CAACD,MAAD,EAASE,KAAT,KAAmB;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ,EAAiBH,KAAjB;AACAP,IAAAA,YAAY,CAAC,EAAE,GAAGD,SAAL;AAAgB,OAACM,MAAD,GAAUE;AAA1B,KAAD,CAAZ;AACH,GAHD,CAPkF,CAYlF;;;AACA,QAAMI,KAAK,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,IAApB,EAA0BgB,CAAC,EAA3B,EAA+B;AAC3B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,IAApB,EAA0BgB,CAAC,EAA3B,EAA+B;AAC3B,UAAIR,MAAM,GAAI,GAAEO,CAAE,IAAGC,CAAE,EAAvB;AAEAF,MAAAA,KAAK,CAACG,IAAN,eAAW,QAAC,IAAD;AAAM,QAAA,MAAM,EAAET,MAAd;AAAsB,QAAA,IAAI,EAAEP,QAA5B;AAAsC,QAAA,YAAY,EAAEM,YAApD;AAAkE,QAAA,YAAY,EAAEE,YAAhF;AAA8F,QAAA,iBAAiB,EAAEJ,iBAAjH;AAAoI,QAAA,oBAAoB,EAAEC;AAA1J,SAAqLE,MAArL;AAAA;AAAA;AAAA;AAAA,cAAX;AACH;AACJ;;AAED,QAAMU,SAAS,GAAG;AACdC,IAAAA,KAAK,EAAGnB,IAAI,GAAGC,QAAR,GAAoBD,IADb;AAEdoB,IAAAA,MAAM,EAAGrB,IAAI,GAAGE,QAAR,GAAoBF;AAFd,GAAlB;AAKA,sBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAsB,IAAA,KAAK,EAAEmB,SAA7B;AAAA,cACMJ;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CAhCD;;GAAMhB,I;;KAAAA,I;AAkCN,eAAeA,IAAf","sourcesContent":["import React from 'react'\nimport Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, nodeSize, gridState, setGridState, selectedObstacle }) => {\n    const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n    const getNodeState = (nodeId) => {\n        return gridState[nodeId];\n    };\n\n    const setNodeState = (nodeId, value) => {\n        console.log(key, value);\n        setGridState({ ...gridState, [nodeId]: value });\n    };\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId} size={nodeSize} getNodeState={getNodeState} setNodeState={setNodeState} draggingSelection={draggingSelection} setDraggingSelection={setDraggingSelection} key={nodeId} />);\n        }\n    }\n\n    const gridStyle = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    return (\n        <div className='grid' style={gridStyle}>\n            { nodes}\n        </div >\n    )\n}\n\nexport default Grid\n"]},"metadata":{},"sourceType":"module"}