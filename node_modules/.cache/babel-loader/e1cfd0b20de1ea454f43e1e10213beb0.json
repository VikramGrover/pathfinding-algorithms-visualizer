{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  getNodeState,\n  setNodeState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    if (getNodeState(nodeId)[0] === getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('obstacle'));\n      setNodeState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...getNodeState(nodeId)]\n      });\n      return;\n    } else if (getNodeState(nodeId)[0] === getNodeTypeEnum('obstacle')) {\n      setNodeState({\n        [nodeId]: getNodeState(nodeId).slice(1)\n      });\n      return;\n    }\n\n    setDraggingSelection(getNodeState(nodeId)[0]);\n    console.log('set starting state');\n  };\n\n  const mouseEntered = () => {\n    console.log('current dragging selection: ', draggingSelection);\n    const currNodeState = getNodeState(nodeId);\n\n    if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n      setNodeState({\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...currNodeState]\n      });\n    } else if (draggingSelection === getNodeTypeEnum('start')) {\n      console.log(nodeId);\n      setNodeState({\n        [nodeId]: [getNodeTypeEnum('start'), ...currNodeState]\n      });\n      console.log(\"I AM HERE 3\");\n    } else if (draggingSelection === getNodeTypeEnum('target')) {\n      setNodeState({\n        [nodeId]: [getNodeTypeEnum('target'), ...currNodeState]\n      });\n    }\n  };\n\n  const mouseLeft = () => {\n    if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n      setNodeState({\n        [nodeId]: getNodeState(nodeId).slice(1)\n      });\n      console.log('removed start state');\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection !== getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('none'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    children: [getNodeState(nodeId)[0] === getNodeTypeEnum('start') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Start Node\",\n      style: imgDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 70\n    }, this), getNodeState(nodeId)[0] === getNodeTypeEnum('target') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Target Node\",\n      style: imgDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 71\n    }, this), getNodeState(nodeId)[0] === getNodeTypeEnum('obstacle') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Obstacle\",\n      style: imgDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 73\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: { ...nodeDim,\n        position: 'absolute',\n        top: 0,\n        left: 0\n      },\n      onMouseDown: mouseDowned,\n      onMouseUp: mouseUped,\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","Node","nodeId","size","getNodeState","setNodeState","draggingSelection","setDraggingSelection","nodeDim","width","height","imgDim","mouseDowned","slice","console","log","mouseEntered","currNodeState","mouseLeft","mouseUped","position","top","left"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,eAAP,MAA4B,wBAA5B;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,IAAV;AAAgBC,EAAAA,YAAhB;AAA8BC,EAAAA,YAA9B;AAA4CC,EAAAA,iBAA5C;AAA+DC,EAAAA;AAA/D,CAAD,KAA2F;AACpG,QAAMC,OAAO,GAAG;AACZC,IAAAA,KAAK,EAAEN,IADK;AAEZO,IAAAA,MAAM,EAAEP;AAFI,GAAhB;AAKA,QAAMQ,MAAM,GAAG;AACXF,IAAAA,KAAK,EAAEN,IAAI,GAAG,GADH;AAEXO,IAAAA,MAAM,EAAEP,IAAI,GAAG;AAFJ,GAAf;;AAKA,QAAMS,WAAW,GAAG,MAAM;AACtB,QAAIR,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,MAA4BL,eAAe,CAAC,MAAD,CAA/C,EAAyD;AACrDU,MAAAA,oBAAoB,CAACV,eAAe,CAAC,UAAD,CAAhB,CAApB;AACAQ,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAU,CAACL,eAAe,CAAC,UAAD,CAAhB,EAA8B,GAAGO,YAAY,CAACF,MAAD,CAA7C;AAAZ,OAAD,CAAZ;AACA;AACH,KAJD,MAKK,IAAIE,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,MAA4BL,eAAe,CAAC,UAAD,CAA/C,EAA6D;AAC9DQ,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAUE,YAAY,CAACF,MAAD,CAAZ,CAAqBW,KAArB,CAA2B,CAA3B;AAAZ,OAAD,CAAZ;AACA;AACH;;AAEDN,IAAAA,oBAAoB,CAACH,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,CAAD,CAApB;AACAY,IAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH,GAbD;;AAeA,QAAMC,YAAY,GAAG,MAAM;AAEvBF,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA4CT,iBAA5C;AACA,UAAMW,aAAa,GAAGb,YAAY,CAACF,MAAD,CAAlC;;AACA,QAAII,iBAAiB,KAAKT,eAAe,CAAC,UAAD,CAArC,IAAqDoB,aAAa,CAAC,CAAD,CAAb,KAAqBpB,eAAe,CAAC,MAAD,CAA7F,EAAuG;AACnGQ,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAU,CAACL,eAAe,CAAC,UAAD,CAAhB,EAA8B,GAAGoB,aAAjC;AAAZ,OAAD,CAAZ;AACH,KAFD,MAGK,IAAIX,iBAAiB,KAAKT,eAAe,CAAC,OAAD,CAAzC,EAAoD;AACrDiB,MAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACAG,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAU,CAACL,eAAe,CAAC,OAAD,CAAhB,EAA2B,GAAGoB,aAA9B;AAAZ,OAAD,CAAZ;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACH,KAJI,MAKA,IAAIT,iBAAiB,KAAKT,eAAe,CAAC,QAAD,CAAzC,EAAqD;AACtDQ,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAU,CAACL,eAAe,CAAC,QAAD,CAAhB,EAA4B,GAAGoB,aAA/B;AAAZ,OAAD,CAAZ;AACH;AACJ,GAfD;;AAiBA,QAAMC,SAAS,GAAG,MAAM;AACpB,QAAIZ,iBAAiB,KAAKT,eAAe,CAAC,OAAD,CAArC,IAAkDS,iBAAiB,KAAKT,eAAe,CAAC,QAAD,CAA3F,EAAuG;AACnGQ,MAAAA,YAAY,CAAC;AAAE,SAACH,MAAD,GAAUE,YAAY,CAACF,MAAD,CAAZ,CAAqBW,KAArB,CAA2B,CAA3B;AAAZ,OAAD,CAAZ;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA;AACH;AACJ,GAND;;AAQA,QAAMI,SAAS,GAAG,MAAM;AACpB,QAAIb,iBAAiB,KAAKT,eAAe,CAAC,MAAD,CAAzC,EAAmD;AAC/CU,MAAAA,oBAAoB,CAACV,eAAe,CAAC,MAAD,CAAhB,CAApB;AACH;AACJ,GAJD;;AAMA,sBACI;AAAK,IAAA,KAAK,EAAEW,OAAZ;AAAqB,IAAA,SAAS,EAAC,MAA/B;AAAA,eACKJ,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,MAA4BL,eAAe,CAAC,OAAD,CAA3C,iBAAwD;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAC,YAA9B;AAA2C,MAAA,KAAK,EAAEc,MAAlD;AAA0D,MAAA,GAAG,EAAEb;AAA/D;AAAA;AAAA;AAAA;AAAA,YAD7D,EAEKM,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,MAA4BL,eAAe,CAAC,QAAD,CAA3C,iBAAyD;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAC,aAA9B;AAA4C,MAAA,KAAK,EAAEc,MAAnD;AAA2D,MAAA,GAAG,EAAEZ;AAAhE;AAAA;AAAA;AAAA;AAAA,YAF9D,EAGKK,YAAY,CAACF,MAAD,CAAZ,CAAqB,CAArB,MAA4BL,eAAe,CAAC,UAAD,CAA3C,iBAA2D;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,GAAG,EAAC,UAA9B;AAAyC,MAAA,KAAK,EAAEc,MAAhD;AAAwD,MAAA,GAAG,EAAEX;AAA7D;AAAA;AAAA;AAAA;AAAA,YAHhE,eAII;AAAK,MAAA,KAAK,EAAE,EAAE,GAAGQ,OAAL;AAAcY,QAAAA,QAAQ,EAAE,UAAxB;AAAoCC,QAAAA,GAAG,EAAE,CAAzC;AAA4CC,QAAAA,IAAI,EAAE;AAAlD,OAAZ;AAAmE,MAAA,WAAW,EAAEV,WAAhF;AAA6F,MAAA,SAAS,EAAEO,SAAxG;AAAmH,MAAA,YAAY,EAAEH,YAAjI;AAA+I,MAAA,YAAY,EAAEE;AAA7J;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH,CAjED;;KAAMjB,I;AAmEN,eAAeA,IAAf","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\n\nconst Node = ({ nodeId, size, getNodeState, setNodeState, draggingSelection, setDraggingSelection }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        if (getNodeState(nodeId)[0] === getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            setNodeState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...getNodeState(nodeId)] });\n            return;\n        }\n        else if (getNodeState(nodeId)[0] === getNodeTypeEnum('obstacle')) {\n            setNodeState({ [nodeId]: getNodeState(nodeId).slice(1) });\n            return;\n        }\n\n        setDraggingSelection(getNodeState(nodeId)[0]);\n        console.log('set starting state');\n    };\n\n    const mouseEntered = () => {\n\n        console.log('current dragging selection: ', draggingSelection);\n        const currNodeState = getNodeState(nodeId);\n        if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n            setNodeState({ [nodeId]: [getNodeTypeEnum('obstacle'), ...currNodeState] });\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            console.log(nodeId);\n            setNodeState({ [nodeId]: [getNodeTypeEnum('start'), ...currNodeState] });\n            console.log(\"I AM HERE 3\");\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setNodeState({ [nodeId]: [getNodeTypeEnum('target'), ...currNodeState] });\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setNodeState({ [nodeId]: getNodeState(nodeId).slice(1) });\n            console.log('removed start state');\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" >\n            {getNodeState(nodeId)[0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {getNodeState(nodeId)[0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {getNodeState(nodeId)[0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />}\n            <div style={{ ...nodeDim, position: 'absolute', top: 0, left: 0 }} onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}