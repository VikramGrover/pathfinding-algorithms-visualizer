{"ast":null,"code":"import { nodeTypeEnum } from '../../utils/constants.js';\nimport { sleep } from '../../utils/helper.js';\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n  // make border around the screen\n  for (var x = 0; x < rows; x++) {\n    for (var y = 0; y < cols; y++) {\n      const currCord = `${x}:${y}`;\n      const nodeStateFunc = gridState[currCord][1];\n\n      if (x === 0 || x === rows - 1 || y === 0 || y === cols - 1) {\n        await sleep(timeout);\n        let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n\n        if (currCord === startCord) {\n          state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n        } else if (currCord === targetCord) {\n          state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n        }\n\n        nodeStateFunc(prevState => state);\n        setGridState(prevState => ({ ...prevState,\n          [currCord]: [state, prevState[currCord][1]]\n        }));\n      }\n    }\n  }\n\n  await divideScreen(startCord, targetCord, gridState, setGridState, 1, rows - 1, 1, cols - 1, timeout, 1);\n};\n\nconst divideScreen = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, direction) => {\n  if (endRow - startRow <= 2 || endCol - startCol <= 2) {\n    return;\n  }\n\n  if (direction === 1) {\n    // divide horizontally\n    const skip = Math.floor(Math.random() * endCol + startCol);\n    const halfRow = startRow + Math.floor((endRow - startRow) / 2);\n\n    for (let i = startCol; i < endCol; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${halfRow}:${i}`;\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    await divideScreen(startCord, targetCord, gridState, startRow, halfRow - 1, startCol, endCol, timeout, 0);\n    await divideScreen(startCord, targetCord, gridState, halfRow + 1, endRow, startCol, endCol, timeout, 0);\n  } else {\n    // divide vertically \n    const skip = Math.floor(Math.random() * endRow + startRow);\n    const halfCol = startCol + Math.floor((endCol - startCol) / 2);\n\n    for (let i = startRow; i < endRow; i++) {\n      if (i === skip) {\n        continue;\n      }\n\n      const currCord = `${i}:${halfCol}`;\n      const nodeStateFunc = gridState[currCord][1];\n      nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n      setGridState(prevState => ({ ...prevState,\n        [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]]\n      }));\n      await sleep(timeout);\n    }\n\n    await divideScreen(startCord, targetCord, gridState, startRow, endRow, startCol, halfCol - 1, timeout, 1);\n    await divideScreen(startCord, targetCord, gridState, startRow, endRow, halfCol + 1, endCol, timeout, 1);\n  }\n};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/terrain/recursiveDivision.js"],"names":["nodeTypeEnum","sleep","recursiveDivision","startCord","targetCord","gridState","setGridState","rows","cols","timeout","x","y","currCord","nodeStateFunc","state","wall","none","start","target","prevState","divideScreen","startRow","endRow","startCol","endCol","direction","skip","Math","floor","random","halfRow","i","halfCol"],"mappings":"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","sourcesContent":["import { nodeTypeEnum } from '../../utils/constants.js'\nimport { sleep } from '../../utils/helper.js'\n\nexport const recursiveDivision = async (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    // make border around the screen\n    for (var x = 0; x < rows; x++) {\n        for (var y = 0; y < cols; y++) {\n            const currCord = `${x}:${y}`;\n            const nodeStateFunc = gridState[currCord][1];\n            if (x === 0 || x === (rows - 1) || y === 0 || y === (cols - 1)) {\n                await sleep(timeout);\n                let state = [nodeTypeEnum.wall, nodeTypeEnum.none];\n                if (currCord === startCord) {\n                    state = [nodeTypeEnum.start, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                else if (currCord === targetCord) {\n                    state = [nodeTypeEnum.target, nodeTypeEnum.wall, nodeTypeEnum.none];\n                }\n                nodeStateFunc(prevState => state);\n                setGridState(prevState => ({ ...prevState, [currCord]: [state, prevState[currCord][1]] }));\n            }\n        }\n    }\n\n    await divideScreen(startCord, targetCord, gridState, setGridState, 1, rows - 1, 1, cols - 1, timeout, 1);\n};\n\nconst divideScreen = async (startCord, targetCord, gridState, setGridState, startRow, endRow, startCol, endCol, timeout, direction) => {\n    if (((endRow - startRow) <= 2 || (endCol - startCol) <= 2)) {\n        return;\n    }\n\n    if (direction === 1) {\n        // divide horizontally\n        const skip = Math.floor((Math.random() * endCol) + startCol);\n        const halfRow = startRow + Math.floor((endRow - startRow) / 2);\n        for (let i = startCol; i < endCol; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${halfRow}:${i}`;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        await divideScreen(startCord, targetCord, gridState, startRow, halfRow - 1, startCol, endCol, timeout, 0);\n        await divideScreen(startCord, targetCord, gridState, halfRow + 1, endRow, startCol, endCol, timeout, 0);\n    }\n    else {\n        // divide vertically \n        const skip = Math.floor((Math.random() * endRow) + startRow);\n        const halfCol = startCol + Math.floor((endCol - startCol) / 2);\n        for (let i = startRow; i < endRow; i++) {\n            if (i === skip) {\n                continue;\n            }\n            const currCord = `${i}:${halfCol}`;\n            const nodeStateFunc = gridState[currCord][1];\n            nodeStateFunc(prevState => [nodeTypeEnum.wall, nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [currCord]: [[nodeTypeEnum.wall, nodeTypeEnum.none], prevState[currCord][1]] }));\n            await sleep(timeout);\n        }\n\n        await divideScreen(startCord, targetCord, gridState, startRow, endRow, startCol, halfCol - 1, timeout, 1);\n        await divideScreen(startCord, targetCord, gridState, startRow, endRow, halfCol + 1, endCol, timeout, 1);\n    }\n};"]},"metadata":{},"sourceType":"module"}