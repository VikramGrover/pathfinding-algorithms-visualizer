{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeColor, getNodeTypeEnum } from '../utils/util.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  nodeId,\n  size,\n  nodeState,\n  setGridState,\n  draggingSelection,\n  setDraggingSelection\n}) => {\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    const currNodeState = nodeState;\n\n    if (currNodeState[0] === getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('obstacle'));\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]]\n      }));\n      return;\n    } else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n      return;\n    }\n\n    setDraggingSelection(currNodeState[0]);\n  };\n\n  const mouseEntered = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]]\n      }));\n    } else if (draggingSelection === getNodeTypeEnum('start')) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]]\n      }));\n    } else if (draggingSelection === getNodeTypeEnum('target')) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]]\n      }));\n    }\n  };\n\n  const mouseLeft = () => {\n    let currNodeState = nodeState;\n\n    if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n      setGridState(prevState => ({ ...prevState,\n        [nodeId]: prevState[nodeId].slice(1)\n      }));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (draggingSelection !== getNodeTypeEnum('none')) {\n      setDraggingSelection(getNodeTypeEnum('none'));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: { ...nodeDim,\n      backgroundColor: getNodeColor(nodeState[0])\n    },\n    className: \"node\",\n    onMouseDown: mouseDowned,\n    onMouseUp: mouseUped,\n    onMouseEnter: mouseEntered,\n    onMouseLeave: mouseLeft\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n};\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/components/Node.js"],"names":["useState","React","getNodeColor","getNodeTypeEnum","Node","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","nodeDim","width","height","imgDim","mouseDowned","currNodeState","prevState","slice","mouseEntered","mouseLeft","mouseUped","backgroundColor"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeColor, getNodeTypeEnum } from '../utils/util.js'\n\nconst Node = ({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        const currNodeState = nodeState;\n\n        if (currNodeState[0] === getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]] }));\n            return;\n        }\n        else if (currNodeState[0] === getNodeTypeEnum('obstacle')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n\n        setDraggingSelection(currNodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('obstacle') && currNodeState[0] === getNodeTypeEnum('none')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), ...prevState[nodeId]] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n        }\n    };\n\n    const mouseLeft = () => {\n        let currNodeState = nodeState;\n\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim, backgroundColor: getNodeColor(nodeState[0]) }} className='node' onMouseDown={mouseDowned} onMouseUp={mouseUped} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} >\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}