{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  size,\n  nodeType,\n  selectingStart,\n  setSelectingStart\n}) => {\n  _s();\n\n  const [type, setType] = useState(nodeType);\n  let nodeDim = {\n    width: size,\n    height: size\n  };\n\n  const getBackgroundColor = () => {\n    if (type === getNodeTypeEnum('start')) {\n      return 'green';\n    }\n\n    if (type === getNodeTypeEnum('target')) {\n      return 'red';\n    }\n\n    if (type === getNodeTypeEnum('empty')) {\n      return 'transparent';\n    }\n  };\n\n  const mouseDowned = () => {\n    if (type === getNodeTypeEnum('start')) {\n      setSelectingStart(true);\n      return;\n    }\n  };\n\n  const mouseEntered = () => {\n    if (selectingStart) {\n      setType(getNodeTypeEnum('start'));\n      return;\n    }\n  };\n\n  const mouseLeft = () => {\n    if (selectingStart) {\n      setType(getNodeTypeEnum('empty'));\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (selectingStart) {\n      setSelectingStart(false);\n      return;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    onMouseDown: mouseDowned,\n    onMouseEnter: mouseEntered,\n    onMouseLeave: mouseLeft,\n    onMouseUp: mouseUped,\n    children: [type === getNodeTypeEnum(\"start\") && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"end-node\",\n      style: nodeDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 51\n    }, this), type === getNodeTypeEnum(\"target\") && /*#__PURE__*/_jsxDEV(\"img\", {\n      style: nodeDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 52\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"mIj7fRdy8+sIwpfblfinej72QBI=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","Node","size","nodeType","selectingStart","setSelectingStart","type","setType","nodeDim","width","height","getBackgroundColor","mouseDowned","mouseEntered","mouseLeft","mouseUped"],"mappings":";;;AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,aAAP,MAA0B,sBAA1B;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,cAAlB;AAAkCC,EAAAA;AAAlC,CAAD,KAA2D;AAAA;;AACpE,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAACO,QAAD,CAAhC;AACA,MAAIK,OAAO,GAAG;AACVC,IAAAA,KAAK,EAAEP,IADG;AAEVQ,IAAAA,MAAM,EAAER;AAFE,GAAd;;AAKA,QAAMS,kBAAkB,GAAG,MAAM;AAC7B,QAAIL,IAAI,KAAKR,eAAe,CAAC,OAAD,CAA5B,EAAuC;AACnC,aAAO,OAAP;AACH;;AACD,QAAIQ,IAAI,KAAKR,eAAe,CAAC,QAAD,CAA5B,EAAwC;AACpC,aAAO,KAAP;AACH;;AACD,QAAIQ,IAAI,KAAKR,eAAe,CAAC,OAAD,CAA5B,EAAuC;AACnC,aAAO,aAAP;AACH;AACJ,GAVD;;AAYA,QAAMc,WAAW,GAAG,MAAM;AACtB,QAAIN,IAAI,KAAKR,eAAe,CAAC,OAAD,CAA5B,EAAuC;AACnCO,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACA;AACH;AACJ,GALD;;AAOA,QAAMQ,YAAY,GAAG,MAAM;AACvB,QAAIT,cAAJ,EAAoB;AAChBG,MAAAA,OAAO,CAACT,eAAe,CAAC,OAAD,CAAhB,CAAP;AACA;AACH;AACJ,GALD;;AAOA,QAAMgB,SAAS,GAAG,MAAM;AACpB,QAAIV,cAAJ,EAAoB;AAChBG,MAAAA,OAAO,CAACT,eAAe,CAAC,OAAD,CAAhB,CAAP;AACA;AACH;AACJ,GALD;;AAOA,QAAMiB,SAAS,GAAG,MAAM;AACpB,QAAIX,cAAJ,EAAoB;AAChBC,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA;AACH;AACJ,GALD;;AAOA,sBACI;AAAK,IAAA,KAAK,EAAEG,OAAZ;AAAqB,IAAA,SAAS,EAAC,MAA/B;AAAsC,IAAA,WAAW,EAAEI,WAAnD;AAAgE,IAAA,YAAY,EAAEC,YAA9E;AAA4F,IAAA,YAAY,EAAEC,SAA1G;AAAqH,IAAA,SAAS,EAAEC,SAAhI;AAAA,eACKT,IAAI,KAAKR,eAAe,CAAC,OAAD,CAAxB,iBAAqC;AAAK,MAAA,SAAS,EAAC,UAAf;AAA0B,MAAA,KAAK,EAAEU,OAAjC;AAA0C,MAAA,GAAG,EAAET;AAA/C;AAAA;AAAA;AAAA;AAAA,YAD1C,EAEKO,IAAI,KAAKR,eAAe,CAAC,QAAD,CAAxB,iBAAsC;AAAK,MAAA,KAAK,EAAEU,OAAZ;AAAqB,MAAA,GAAG,EAAER;AAA1B;AAAA;AAAA;AAAA;AAAA,YAF3C;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CArDD;;GAAMC,I;;KAAAA,I;AAuDN,eAAeA,IAAf","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\n\nconst Node = ({ size, nodeType, selectingStart, setSelectingStart }) => {\n    const [type, setType] = useState(nodeType);\n    let nodeDim = {\n        width: size,\n        height: size,\n    };\n\n    const getBackgroundColor = () => {\n        if (type === getNodeTypeEnum('start')) {\n            return 'green';\n        }\n        if (type === getNodeTypeEnum('target')) {\n            return 'red';\n        }\n        if (type === getNodeTypeEnum('empty')) {\n            return 'transparent';\n        }\n    };\n\n    const mouseDowned = () => {\n        if (type === getNodeTypeEnum('start')) {\n            setSelectingStart(true);\n            return;\n        }\n    };\n\n    const mouseEntered = () => {\n        if (selectingStart) {\n            setType(getNodeTypeEnum('start'));\n            return;\n        }\n    };\n\n    const mouseLeft = () => {\n        if (selectingStart) {\n            setType(getNodeTypeEnum('empty'));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (selectingStart) {\n            setSelectingStart(false);\n            return;\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" onMouseDown={mouseDowned} onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} onMouseUp={mouseUped}>\n            {type === getNodeTypeEnum(\"start\") && <img className='end-node' style={nodeDim} src={startNodeImg} />}\n            {type === getNodeTypeEnum(\"target\") && <img style={nodeDim} src={targetNodeImg} />}\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}