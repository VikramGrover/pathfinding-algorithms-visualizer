{"ast":null,"code":"import _createForOfIteratorHelper from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";import _defineProperty from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";import _toConsumableArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{getNodeTypeEnum,getNodeWeight,shuffleArray}from'../../utils/util.js';export var dfs=function dfs(startCord,targetCord,gridState,setGridState,rows,cols){var stack=[startCord];var visitedArr=[];var visited={};var _loop=function _loop(){var _stack$splice=stack.splice(0,1),_stack$splice2=_slicedToArray(_stack$splice,1),currCord=_stack$splice2[0];if(currCord===targetCord){return{v:visitedArr};}if(currCord!==startCord){visitedArr.unshift(currCord);visited[currCord]=1;setTimeout(function(){setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},currCord,[getNodeTypeEnum('visited')].concat(_toConsumableArray(prevState[currCord].slice(1)))));});},1);}var neighbours=getNeighbourNodes(currCord,rows,cols,gridState);var _iterator=_createForOfIteratorHelper(neighbours),_step;try{var _loop2=function _loop2(){var neighbour=_step.value;if(neighbour in visited){return\"continue\";}if(neighbour!==startCord&&neighbour!==targetCord){setTimeout(function(){setGridState(function(prevState){return _objectSpread(_objectSpread({},prevState),{},_defineProperty({},neighbour,[getNodeTypeEnum('visiting'),getNodeTypeEnum('none')]));});},1);}stack.unshift(neighbour);};for(_iterator.s();!(_step=_iterator.n()).done;){var _ret2=_loop2();if(_ret2===\"continue\")continue;}}catch(err){_iterator.e(err);}finally{_iterator.f();}};while(stack.length>0){var _ret=_loop();if(typeof _ret===\"object\")return _ret.v;}return[];};var getNeighbourNodes=function getNeighbourNodes(node,rows,cols,gridState){var row=parseInt(node.split(':')[0]);var col=parseInt(node.split(':')[1]);var res=[];if(col+1<cols&&gridState[\"\".concat(row,\":\").concat(col+1)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row,\":\").concat(col+1));}if(row-1>=0&&gridState[\"\".concat(row-1,\":\").concat(col)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row-1,\":\").concat(col));}if(row+1<rows&&gridState[\"\".concat(row+1,\":\").concat(col)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row+1,\":\").concat(col));}if(col-1>=0&&gridState[\"\".concat(row,\":\").concat(col-1)][0]!==getNodeTypeEnum('wall')){res.push(\"\".concat(row,\":\").concat(col-1));}return res;};","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/algorithms/path_finding/dfs.js"],"names":["getNodeTypeEnum","getNodeWeight","shuffleArray","dfs","startCord","targetCord","gridState","setGridState","rows","cols","stack","visitedArr","visited","splice","currCord","unshift","setTimeout","prevState","slice","neighbours","getNeighbourNodes","neighbour","length","node","row","parseInt","split","col","res","push"],"mappings":"k9BAAA,OAASA,eAAT,CAA0BC,aAA1B,CAAyCC,YAAzC,KAA6D,qBAA7D,CAEA,MAAO,IAAMC,CAAAA,GAAG,CAAG,QAANA,CAAAA,GAAM,CAACC,SAAD,CAAYC,UAAZ,CAAwBC,SAAxB,CAAmCC,YAAnC,CAAiDC,IAAjD,CAAuDC,IAAvD,CAAgE,CAC/E,GAAMC,CAAAA,KAAK,CAAG,CAACN,SAAD,CAAd,CACA,GAAMO,CAAAA,UAAU,CAAG,EAAnB,CACA,GAAMC,CAAAA,OAAO,CAAG,EAAhB,CAH+E,6CAMxDF,KAAK,CAACG,MAAN,CAAa,CAAb,CAAgB,CAAhB,CANwD,gDAMpEC,QANoE,mBAQ3E,GAAIA,QAAQ,GAAKT,UAAjB,CAA6B,CACzB,SAAOM,UAAP,EACH,CAED,GAAIG,QAAQ,GAAKV,SAAjB,CAA4B,CACxBO,UAAU,CAACI,OAAX,CAAmBD,QAAnB,EACAF,OAAO,CAACE,QAAD,CAAP,CAAoB,CAApB,CACAE,UAAU,CAAC,UAAM,CACbT,YAAY,CAAC,SAAAU,SAAS,wCAAUA,SAAV,wBAAsBH,QAAtB,EAAkCd,eAAe,CAAC,SAAD,CAAjD,4BAAiEiB,SAAS,CAACH,QAAD,CAAT,CAAoBI,KAApB,CAA0B,CAA1B,CAAjE,MAAV,CAAZ,CACH,CAFS,CAEP,CAFO,CAAV,CAGH,CAED,GAAMC,CAAAA,UAAU,CAAGC,iBAAiB,CAACN,QAAD,CAAWN,IAAX,CAAiBC,IAAjB,CAAuBH,SAAvB,CAApC,CApB2E,yCAqBnDa,UArBmD,4CAqBhEE,CAAAA,SArBgE,aAsBvE,GAAIA,SAAS,GAAIT,CAAAA,OAAjB,CAA0B,CACtB,iBACH,CAED,GAAIS,SAAS,GAAKjB,SAAd,EAA2BiB,SAAS,GAAKhB,UAA7C,CAAyD,CACrDW,UAAU,CAAC,UAAM,CACbT,YAAY,CAAC,SAAAU,SAAS,wCAAUA,SAAV,wBAAsBI,SAAtB,CAAkC,CAACrB,eAAe,CAAC,UAAD,CAAhB,CAA8BA,eAAe,CAAC,MAAD,CAA7C,CAAlC,IAAV,CAAZ,CACH,CAFS,CAEP,CAFO,CAAV,CAGH,CACDU,KAAK,CAACK,OAAN,CAAcM,SAAd,EA/BuE,EAqB3E,+CAAoC,0CAE5B,SASP,CAhC0E,uDAK/E,MAAOX,KAAK,CAACY,MAAN,CAAe,CAAtB,CAAyB,0DA4BxB,CAED,MAAO,EAAP,CACH,CApCM,CAsCP,GAAMF,CAAAA,iBAAiB,CAAG,QAApBA,CAAAA,iBAAoB,CAACG,IAAD,CAAOf,IAAP,CAAaC,IAAb,CAAmBH,SAAnB,CAAiC,CACvD,GAAMkB,CAAAA,GAAG,CAAGC,QAAQ,CAACF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAApB,CACA,GAAMC,CAAAA,GAAG,CAAGF,QAAQ,CAACF,IAAI,CAACG,KAAL,CAAW,GAAX,EAAgB,CAAhB,CAAD,CAApB,CAEA,GAAIE,CAAAA,GAAG,CAAG,EAAV,CACA,GAAKD,GAAG,CAAG,CAAN,CAAUlB,IAAX,EAAqBH,SAAS,WAAIkB,GAAJ,aAAWG,GAAG,CAAG,CAAjB,EAAT,CAA+B,CAA/B,IAAsC3B,eAAe,CAAC,MAAD,CAA9E,CAAyF,CACrF4B,GAAG,CAACC,IAAJ,WAAYL,GAAZ,aAAmBG,GAAG,CAAG,CAAzB,GACH,CACD,GAAKH,GAAG,CAAG,CAAN,EAAW,CAAZ,EAAmBlB,SAAS,WAAIkB,GAAG,CAAG,CAAV,aAAeG,GAAf,EAAT,CAA+B,CAA/B,IAAsC3B,eAAe,CAAC,MAAD,CAA5E,CAAuF,CACnF4B,GAAG,CAACC,IAAJ,WAAYL,GAAG,CAAG,CAAlB,aAAuBG,GAAvB,GACH,CACD,GAAKH,GAAG,CAAG,CAAP,CAAYhB,IAAZ,EAAqBF,SAAS,WAAIkB,GAAG,CAAG,CAAV,aAAeG,GAAf,EAAT,CAA+B,CAA/B,IAAsC3B,eAAe,CAAC,MAAD,CAA9E,CAAyF,CACrF4B,GAAG,CAACC,IAAJ,WAAYL,GAAG,CAAG,CAAlB,aAAuBG,GAAvB,GACH,CACD,GAAKA,GAAG,CAAG,CAAN,EAAW,CAAZ,EAAmBrB,SAAS,WAAIkB,GAAJ,aAAWG,GAAG,CAAG,CAAjB,EAAT,CAA+B,CAA/B,IAAsC3B,eAAe,CAAC,MAAD,CAA5E,CAAuF,CACnF4B,GAAG,CAACC,IAAJ,WAAYL,GAAZ,aAAmBG,GAAG,CAAG,CAAzB,GACH,CAED,MAAOC,CAAAA,GAAP,CACH,CAnBD","sourcesContent":["import { getNodeTypeEnum, getNodeWeight, shuffleArray } from '../../utils/util.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    const stack = [startCord];\n    const visitedArr = [];\n    const visited = {};\n\n    while (stack.length > 0) {\n        const [currCord] = stack.splice(0, 1);\n\n        if (currCord === targetCord) {\n            return visitedArr;\n        }\n\n        if (currCord !== startCord) {\n            visitedArr.unshift(currCord);\n            visited[currCord] = 1;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), ...prevState[currCord].slice(1)] }));\n            }, 1);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (neighbour !== startCord && neighbour !== targetCord) {\n                setTimeout(() => {\n                    setGridState(prevState => ({ ...prevState, [neighbour]: [getNodeTypeEnum('visiting'), getNodeTypeEnum('none')] }));\n                }, 1);\n            }\n            stack.unshift(neighbour);\n        }\n    }\n\n    return [];\n};\n\nconst getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};"]},"metadata":{},"sourceType":"module"}