{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js\",\n    _s = $RefreshSig$();\n\nimport Grid from './components/Grid.js';\nimport Header from './components/Header.js';\nimport InfoBox from './components/InfoBox.js';\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js';\nimport { useState, useEffect } from 'react';\nimport { isAlgoUnweighted } from './utils/helper.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    resetBoard();\n  }, []); // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + margin * 3);\n    const adjustedWinWidth = window.innerWidth - 2 * margin;\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n    let gridMap = {};\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        } else if (x === rows - 1 && y === cols - 1) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0]; // check under start and target node for path\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] === nodeTypeEnum.path || gridState[id][1] === nodeTypeEnum.visited || gridState[id][1] === nodeTypeEnum.visiting)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => gridMap);\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][0][1];\n        let currState = nodeState[0]; // check under start and target node for obstacle\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && nodeState[1] >= nodeTypeEnum.wall) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => [nodeState, prev[1]]);\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [[nodeTypeEnum.none], prev[1]]);\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0]; // check under start and target node for weighted obstacle\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && gridState[id][1] > nodeTypeEnum.wall) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => gridMap);\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = algoName => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n\n    if (unweightedAlgo) {\n      clearWeightedObstacles();\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      rows: rows,\n      cols: cols,\n      runningAlgo: runningAlgo,\n      setRunningAlgo: setRunningAlgo,\n      padding: margin,\n      height: navBarHeight,\n      setGridState: setGridState,\n      startCord: startCord,\n      targetCord: targetCord,\n      clearObstacles: clearObstacles,\n      clearPath: clearPath,\n      setSelectedObstacle: setSelectedObstacle,\n      weightedObsDisabled: weightedObsDisabled,\n      toggleInfoBox: toggleInfoBox,\n      selectedAlgo: selectedAlgo,\n      setSelectedAlgo: alteredSetSelectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      rows: rows,\n      cols: cols,\n      padding: margin,\n      nodeSize: nodeSize,\n      setGridState: setGridState,\n      selectedObstacle: selectedObstacle,\n      setStartCord: setStartCord,\n      setTargetCord: setTargetCord,\n      runningAlgo: runningAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InfoBox, {\n      infoBoxOpen: infoBoxOpen,\n      toggleInfoBox: toggleInfoBox,\n      selectedAlgo: selectedAlgo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"uwj3W9yGJMDzxYQSB032Ie9Iy7M=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/pathfinding-algorithms-visualizer/src/App.js"],"names":["Grid","Header","InfoBox","allPathAlgos","nodeTypeEnum","useState","useEffect","isAlgoUnweighted","App","gridState","setGridState","selectedObstacle","setSelectedObstacle","infoBoxOpen","setInfoBoxOpen","selectedAlgo","setSelectedAlgo","rows","setRows","cols","setCols","startCord","setStartCord","targetCord","setTargetCord","runningAlgo","setRunningAlgo","weightedObsDisabled","setWeightedObsDisabled","margin","nodeSize","navBarHeight","console","log","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","parseInt","gridMap","x","y","nodeState","none","unshift","start","target","clearPath","change","id","currState","path","visited","visiting","splice","slice","prevState","clearObstacles","nodeStateFunc","wall","prev","clearWeightedObstacles","toggleInfoBox","alteredSetSelectedAlgo","algoName","unweightedAlgo"],"mappings":"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","sourcesContent":["import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] === nodeTypeEnum.path || gridState[id][1] === nodeTypeEnum.visited || gridState[id][1] === nodeTypeEnum.visiting)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][0][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] >= nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => [nodeState, prev[1]]);\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [[nodeTypeEnum.none], prev[1]]);\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] > nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}