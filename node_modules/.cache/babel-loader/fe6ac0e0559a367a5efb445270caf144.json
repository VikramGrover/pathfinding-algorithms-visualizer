{"ast":null,"code":"var _jsxFileName = \"/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport React from 'react';\nimport { getNodeTypeEnum } from '../utils/util.js';\nimport startNodeImg from '../images/start.png';\nimport targetNodeImg from '../images/target.png';\nimport obstacleNodeImg from '../images/obstacle.png';\nimport HoverTarget from './HoverTarget.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Node = ({\n  size,\n  nodeType,\n  selectingStart,\n  setSelectingStart,\n  selectingTarget,\n  setSelectingTarget,\n  selectingObstacle,\n  setSelectingObstacle\n}) => {\n  _s();\n\n  const [type, setType] = useState(nodeType);\n  const nodeDim = {\n    width: size,\n    height: size\n  };\n  const imgDim = {\n    width: size * 0.8,\n    height: size * 0.8\n  };\n\n  const mouseDowned = () => {\n    if (type[0] === getNodeTypeEnum('start')) {\n      setSelectingStart(true);\n      return;\n    }\n\n    if (type[0] === getNodeTypeEnum('target')) {\n      setSelectingTarget(true);\n      return;\n    }\n\n    if (type[0] === getNodeTypeEnum('none')) {\n      setSelectingObstacle(true);\n      setType([getNodeTypeEnum('obstacle'), ...type]);\n      return;\n    }\n\n    if (type[0] === getNodeTypeEnum('obstacle')) {\n      setType(type.slice(1));\n      return;\n    }\n  };\n\n  const mouseEntered = () => {\n    if (type[0] === getNodeTypeEnum('obstacle')) {\n      console.log(\"MOUSE ENTERED\");\n    }\n\n    if (selectingStart) {\n      setType([getNodeTypeEnum('start'), ...type]);\n      return;\n    }\n\n    if (selectingTarget) {\n      setType([getNodeTypeEnum('target'), ...type]);\n      return;\n    }\n\n    if (selectingObstacle && type[0] === getNodeTypeEnum('none')) {\n      setType([getNodeTypeEnum('obstacle'), ...type]);\n      return;\n    }\n  };\n\n  const mouseLeft = () => {\n    if (selectingStart || selectingTarget) {\n      setType(type.slice(1));\n\n      if (type[1] === getNodeTypeEnum('obstacle')) {\n        console.log(\"MOUSE LEFT\");\n      }\n\n      return;\n    }\n  };\n\n  const mouseUped = () => {\n    if (selectingStart) {\n      setSelectingStart(false);\n      return;\n    }\n\n    if (selectingTarget) {\n      setSelectingTarget(false);\n      return;\n    }\n\n    if (selectingObstacle) {\n      setSelectingObstacle(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: nodeDim,\n    className: \"node\",\n    onMouseDown: mouseDowned,\n    onMouseUp: mouseUped,\n    children: [\" //onMouseEnter=\", mouseEntered, \" onMouseLeave=\", mouseLeft, \">\", /*#__PURE__*/_jsxDEV(HoverTarget, {\n      onMouseEnter: mouseEntered,\n      onMouseLeave: mouseLeft\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this), type[0] === getNodeTypeEnum('start') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Start Node\",\n      style: imgDim,\n      src: startNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 54\n    }, this), type[0] === getNodeTypeEnum('target') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Target Node\",\n      style: imgDim,\n      src: targetNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 55\n    }, this), type[0] === getNodeTypeEnum('obstacle') && /*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"img-node\",\n      alt: \"Obstacle\",\n      style: imgDim,\n      src: obstacleNodeImg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 57\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Node, \"mIj7fRdy8+sIwpfblfinej72QBI=\");\n\n_c = Node;\nexport default Node;\n\nvar _c;\n\n$RefreshReg$(_c, \"Node\");","map":{"version":3,"sources":["/Users/vikramgrover/Documents/coding/path-finding-visualizer/src/components/Node.js"],"names":["useState","React","getNodeTypeEnum","startNodeImg","targetNodeImg","obstacleNodeImg","HoverTarget","Node","size","nodeType","selectingStart","setSelectingStart","selectingTarget","setSelectingTarget","selectingObstacle","setSelectingObstacle","type","setType","nodeDim","width","height","imgDim","mouseDowned","slice","mouseEntered","console","log","mouseLeft","mouseUped"],"mappings":"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","sourcesContent":["import { useState } from 'react'\nimport React from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\nimport startNodeImg from '../images/start.png'\nimport targetNodeImg from '../images/target.png'\nimport obstacleNodeImg from '../images/obstacle.png'\nimport HoverTarget from './HoverTarget.js'\n\nconst Node = ({ size, nodeType, selectingStart, setSelectingStart, selectingTarget, setSelectingTarget, selectingObstacle, setSelectingObstacle }) => {\n    const [type, setType] = useState(nodeType);\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const imgDim = {\n        width: size * 0.8,\n        height: size * 0.8\n    };\n\n    const mouseDowned = () => {\n        if (type[0] === getNodeTypeEnum('start')) {\n            setSelectingStart(true);\n            return;\n        }\n\n        if (type[0] === getNodeTypeEnum('target')) {\n            setSelectingTarget(true);\n            return;\n        }\n\n        if (type[0] === getNodeTypeEnum('none')) {\n            setSelectingObstacle(true);\n            setType([getNodeTypeEnum('obstacle'), ...type]);\n            return;\n        }\n\n        if (type[0] === getNodeTypeEnum('obstacle')) {\n            setType(type.slice(1))\n            return;\n        }\n    };\n\n    const mouseEntered = () => {\n        if (type[0] === getNodeTypeEnum('obstacle')) {\n            console.log(\"MOUSE ENTERED\");\n        }\n\n        if (selectingStart) {\n            setType([getNodeTypeEnum('start'), ...type]);\n            return;\n        }\n\n        if (selectingTarget) {\n            setType([getNodeTypeEnum('target'), ...type]);\n            return;\n        }\n\n        if (selectingObstacle && type[0] === getNodeTypeEnum('none')) {\n            setType([getNodeTypeEnum('obstacle'), ...type]);\n            return;\n        }\n    };\n\n    const mouseLeft = () => {\n        if (selectingStart || selectingTarget) {\n            setType(type.slice(1));\n            if (type[1] === getNodeTypeEnum('obstacle')) {\n                console.log(\"MOUSE LEFT\");\n            }\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (selectingStart) {\n            setSelectingStart(false);\n            return;\n        }\n\n        if (selectingTarget) {\n            setSelectingTarget(false);\n            return;\n        }\n\n        if (selectingObstacle) {\n            setSelectingObstacle(false);\n        }\n    };\n\n    return (\n        <div style={nodeDim} className=\"node\" onMouseDown={mouseDowned} onMouseUp={mouseUped}> //onMouseEnter={mouseEntered} onMouseLeave={mouseLeft}>\n            <HoverTarget onMouseEnter={mouseEntered} onMouseLeave={mouseLeft} />\n            {type[0] === getNodeTypeEnum('start') && <img className='img-node' alt='Start Node' style={imgDim} src={startNodeImg} />}\n            {type[0] === getNodeTypeEnum('target') && <img className='img-node' alt='Target Node' style={imgDim} src={targetNodeImg} />}\n            {type[0] === getNodeTypeEnum('obstacle') && <img className='img-node' alt='Obstacle' style={imgDim} src={obstacleNodeImg} />}\n        </div>\n    )\n}\n\nexport default Node\n"]},"metadata":{},"sourceType":"module"}