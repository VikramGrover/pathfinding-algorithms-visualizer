{"version":3,"sources":["utils/constants.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","utils/helper.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/dfs.js","algorithms/path_finding/bfs.js","algorithms/path_finding/aStar.js","components/Visualize.js","images/down_arrow.svg","images/weight.svg","images/weight_unfilled.svg","images/optimal.svg","images/optimal_unfilled.svg","components/CustomDropdown.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["DIJKSTRAS","ASTAR","BFS","DFS","pathAlgos","Object","freeze","unweightedPathAlgos","optimalPathAlgos","terrainAlgos","nodeTypeEnum","nodeColorClass","none","target","wall","visiting","start","visited","path","weighted100","weighted80","weighted60","weighted40","weighted20","nodeWeight","Infinity","obstacleTypes","obsEnum","Node","React","memo","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeDim","width","height","style","className","onMouseDown","prevState","slice","remObstacle","onMouseUp","onMouseEnter","onMouseLeave","Grid","rows","cols","padding","nodeSize","gridState","useState","nodes","x","y","push","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","getNeighbourNodes","node","row","parseInt","split","col","res","createPath","startCord","targetCord","prevNodes","cord","findMinPriorityNode","minPQ","minPriority","Math","min","values","key","isAlgoUnweighted","algo","includes","dijkstras","timeout","totalCosts","minKey","setTimeout","neighbours","neighbour","currPath","keys","length","dfs","stack","currCord","pop","shift","unshift","unvisitedNeighbourFound","splice","bfs","queue","aStar","openSet","G","H","F","currNode","currGScore","h","currNodeCord","currRow","currCol","targetRow","targetCol","abs","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","console","log","i","CustomDropdown","setSelection","items","disabled","dropDownWidth","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","isAlgoSelector","useEffect","dropdownItems","id","src","weightUnfilled","title","alt","weight","optimal","optimalUnfilled","downArrow","ChooseAlgorithm","setWeightedObsDisabled","clearWeightedObstacles","setSelectedAlgo","algoName","unweightedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","weightedObsDisabled","obstacleName","Header","paddingBottom","App","setRows","setCols","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","change","currState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oPACMA,EAAY,aACZC,EAAQ,KACRC,EAAM,MACNC,EAAM,MAINC,EAAY,CAACJ,EAAWC,EAAOC,EAAKC,GAC1CE,OAAOC,OAAOF,GACd,IAAMG,EAAsB,CAACJ,EAAKD,GAClCG,OAAOC,OAAOC,GACd,IAAMC,EAAmB,CAACR,EAAWC,EAAOC,GAC5CG,OAAOC,OAAOE,GAKd,IAEMC,EAAe,CAFP,SACA,UAEdJ,OAAOC,OAAOG,GAKd,IAAMC,EAAe,CACjB,KAAQ,EACR,QAAW,EACX,SAAY,EACZ,KAAQ,EACR,OAAU,EACV,MAAS,EACT,YAAe,EACf,KAAQ,EACR,YAAe,EACf,WAAc,EACd,WAAc,GACd,WAAc,GACd,WAAc,IAElBL,OAAOC,OAAOI,GAId,IAAMC,GAAc,mBACfD,EAAaE,KAAO,QADL,cAEfF,EAAaG,OAAS,UAFP,cAGfH,EAAaI,KAAO,QAHL,cAIfJ,EAAaK,SAAW,YAJT,cAKfL,EAAaM,MAAQ,SALN,cAMfN,EAAaO,QAAU,WANR,cAOfP,EAAaQ,KAAO,QAPL,cAQfR,EAAaS,YAAc,eARZ,cASfT,EAAaU,WAAa,cATX,cAUfV,EAAaW,WAAa,cAVX,cAWfX,EAAaY,WAAa,cAXX,cAYfZ,EAAaa,WAAa,cAZX,GAcpBlB,OAAOC,OAAOK,GAId,IAAMa,GAAU,mBACXd,EAAaE,KAAO,GADT,cAEXF,EAAaG,OAAS,GAFX,cAGXH,EAAaI,KAAOW,KAHT,cAIXf,EAAaM,MAAQ,GAJV,cAKXN,EAAaS,YAAc,KALhB,cAMXT,EAAaU,WAAa,IANf,cAOXV,EAAaW,WAAa,IAPf,cAQXX,EAAaY,WAAa,IARf,cASXZ,EAAaa,WAAa,IATf,GAWhBlB,OAAOC,OAAOkB,GAId,IAAME,EAAgB,CAAC,gBAAY,iBAAkB,gBAAiB,gBAAiB,gBAAiB,iBAClGC,GAAO,mBACRD,EAAc,GAAKf,EAAeD,EAAaI,OADvC,cAERY,EAAc,GAAKf,EAAeD,EAAaS,cAFvC,cAGRO,EAAc,GAAKf,EAAeD,EAAaU,aAHvC,cAIRM,EAAc,GAAKf,EAAeD,EAAaW,aAJvC,cAKRK,EAAc,GAAKf,EAAeD,EAAaY,aALvC,cAMRI,EAAc,GAAKf,EAAeD,EAAaa,aANvC,GAQblB,OAAOC,OAAOqB,G,WC3BCC,EAzDFC,IAAMC,MAAK,YAAqJ,IAAlJC,EAAiJ,EAAjJA,OAAQC,EAAyI,EAAzIA,KAAMC,EAAmI,EAAnIA,UAAWC,EAAwH,EAAxHA,aAAcC,EAA0G,EAA1GA,kBAAmBC,EAAuF,EAAvFA,qBAAsBC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,iBAC3IC,EAAU,CACZC,MAAOV,EACPW,OAAQX,GAgDZ,OACI,qBAAKY,MAAK,eAAOH,GAAWI,UAAS,eAAUlC,EAAesB,EAAU,KAAOa,YAAaP,EAAc,KA9C1F,WAChB,OAAIN,EAAU,IAAMvB,EAAaE,MAC7BwB,EAAqB1B,EAAa8B,SAClCN,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAS,CAACrB,EAAa8B,GAAmB9B,EAAaE,YAG9FqB,EAAU,IAAMvB,EAAaI,MAClCoB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,aAC7EZ,EAAqB1B,EAAauC,mBAItCb,EAAqBH,EAAU,KAkC+FiB,UAAWX,EAAc,KAPzI,WACVJ,IAAsBzB,EAAaE,MACnCwB,EAAqB1B,EAAaE,OAKmIuC,aAAcZ,EAAc,KA/BpL,WACbJ,IAAsBzB,EAAauC,aAAehB,EAAU,IAAMvB,EAAaI,KAC/EoB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,QAExEb,IAAsBzB,EAAa8B,IAAqBP,EAAU,IAAMvB,EAAaE,KAC1FsB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAS,CAACrB,EAAa8B,GAAmB9B,EAAaE,WAE9FuB,IAAsBzB,EAAaM,OACxCkB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAtB,CAAgCI,GAAhC,mBAAsDY,EAAUhB,UACtFM,EAAaN,IAERI,IAAsBzB,EAAaG,SACxCqB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAtB,CAAgCI,GAAhC,mBAAsDY,EAAUhB,UACtFO,EAAcP,KAkBwMqB,aAAcb,EAAc,KAdxO,WACVJ,IAAsBzB,EAAaM,OAASmB,IAAsBzB,EAAaG,QAC/EqB,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,cCH1EK,EApCF,SAAC,GAKV,IALsI,IAA1HC,EAAyH,EAAzHA,KAAMC,EAAmH,EAAnHA,KAAMC,EAA6G,EAA7GA,QAASC,EAAoG,EAApGA,SAAUC,EAA0F,EAA1FA,UAAWxB,EAA+E,EAA/EA,aAAcM,EAAiE,EAAjEA,iBAAkBH,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,EACnFoB,mBAASjD,EAAaE,MAD6D,mBAC9HuB,EAD8H,KAC3GC,EAD2G,KAI/HwB,EAAQ,GACLC,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3B,IAAI/B,EAAM,UAAM8B,EAAN,YAAWC,GAErBF,EAAMG,KAAK,cAAC,EAAD,CAAMhC,OAAQA,EACrBC,KAAMyB,EAAUxB,UAAWyB,EAAU3B,GAASG,aAAcA,EAC5DC,kBAAmBA,EACnBC,qBAAsBA,EACtBC,aAAcA,EAAcC,cAAeA,EAAeC,YAAaA,EAAaC,iBAAkBA,GAAuBT,IAIzI,IAAMiC,EAAiB,CACnBtB,MAAQa,EAAOE,EAAYF,EAC3BZ,OAASW,EAAOG,EAAYH,GAG1BW,EAAiB,CACnBC,YAAaV,EACbW,aAAcX,GAGlB,OACI,qBAAKZ,MAAOqB,EAAZ,SACI,qBAAKpB,UAAU,OAAOD,MAAOoB,EAA7B,SACKJ,OC1BFQ,EARD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgB9B,EAAkB,EAAlBA,YAC7B,OACI,qBAAKM,UAAS,iBAAYN,EAAc,WAAa,OAAS+B,QAAS/B,EAAc,KAAO8B,EAA5F,8BCQOE,EARD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWjC,EAAkB,EAAlBA,YACxB,OACI,qBAAKM,UAAS,iBAAYN,EAAc,WAAa,UAAY+B,QAAS/B,EAAc,KAAOiC,EAA/F,yB,gCCFKC,EAAoB,SAACC,EAAMpB,EAAMC,EAAMG,GAChD,IAAMiB,EAAMC,SAASF,EAAKG,MAAM,KAAK,IAC/BC,EAAMF,SAASF,EAAKG,MAAM,KAAK,IAEjCE,EAAM,GAcV,OAbKJ,EAAM,GAAK,GAAOjB,EAAU,GAAD,OAAIiB,EAAM,EAAV,YAAeG,IAAO,KAAOpE,EAAaI,MACtEiE,EAAIhB,KAAJ,UAAYY,EAAM,EAAlB,YAAuBG,IAEtBA,EAAM,EAAIvB,GAAUG,EAAU,GAAD,OAAIiB,EAAJ,YAAWG,EAAM,IAAK,KAAOpE,EAAaI,MACxEiE,EAAIhB,KAAJ,UAAYY,EAAZ,YAAmBG,EAAM,IAExBH,EAAM,EAAKrB,GAASI,EAAU,GAAD,OAAIiB,EAAM,EAAV,YAAeG,IAAO,KAAOpE,EAAaI,MACxEiE,EAAIhB,KAAJ,UAAYY,EAAM,EAAlB,YAAuBG,IAEtBA,EAAM,GAAK,GAAOpB,EAAU,GAAD,OAAIiB,EAAJ,YAAWG,EAAM,IAAK,KAAOpE,EAAaI,MACtEiE,EAAIhB,KAAJ,UAAYY,EAAZ,YAAmBG,EAAM,IAGtBC,GAGEC,EAAa,SAACC,EAAWC,EAAYC,GAI9C,IAHA,IAAIC,EAAOF,EACPhE,EAAO,IAGPkE,EAAOD,EAAUC,MAEJH,GAIb/D,EAAK6C,KAAKqB,GAGd,OAAOlE,GAGEmE,EAAsB,SAACC,GAChC,IAAIC,EAAcC,KAAKC,IAAL,MAAAD,KAAI,YAAQnF,OAAOqF,OAAOJ,KAE5C,IAAK,IAAMK,KAAOL,EACd,GAAIA,EAAMK,KAASJ,EACf,OAAOI,GAKNC,EAAmB,SAACC,GAC7B,OAAOtF,EAAoBuF,SAASD,IChD3BE,EAAY,SAACd,EAAWC,EAAYxB,EAAWxB,EAAcoB,EAAMC,EAAMyC,GAClF,IAAIC,EAAa,GACbd,EAAY,GACZG,EAAQ,GACRrE,EAAU,GAEdgF,EAAWhB,GAAa,EACxBK,EAAML,GAAa,EAEnB,IAAK,IAAIpB,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3B,IAAIsB,EAAI,UAAMvB,EAAN,YAAWC,GAEfsB,IAASH,IACTgB,EAAWb,GAAQ3D,KAK/B,IAnB8F,iBAoB1F,IAAMyE,EAASb,EAAoBC,GAInC,UAHOA,EAAMY,GACbjF,EAAQiF,GAAU,EAEdA,IAAWjB,GAAaiB,IAAWhB,EACnCiB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBmD,EAAtB,CAAgCxF,EAAaO,SAA7C,mBAAyD8B,EAAUmD,GAAQlD,MAAM,YACxGgD,QAEF,GAAIE,IAAWhB,EAChB,MAAM,CAAN,EAAOF,EAAWC,EAAWC,EAAYC,IAG7C,IAjC0F,EAiCpFiB,EAAa3B,EAAkByB,EAAQ5C,EAAMC,EAAMG,GAjCiC,cAkClE0C,GAlCkE,yBAkC/EC,EAlC+E,QAmChFC,EAAWL,EAAWC,GAAU1E,EAAWkC,EAAU2C,GAAW,IAEtE,GAAIA,KAAapF,EACb,kBAGEoF,KAAaf,GAAUgB,EAAWL,EAAWI,MAAiBA,KAAaf,MAC7EW,EAAWI,GAAaC,EACxBnB,EAAUkB,GAAaH,EACvBZ,EAAMe,GAAaC,EACfD,IAAcnB,GACdiB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBsD,EAAtB,CAAmC3F,EAAaK,UAAhD,mBAA6DgC,EAAUsD,YAC9FL,KAdf,2BAAoC,IAlCsD,gCAmBvF3F,OAAOkG,KAAKjB,GAAOkB,OAAS,GAAG,CAAC,IAAD,wCAmCtC,MAAO,ICtDEC,EAAM,SAACxB,EAAWC,EAAYxB,EAAWxB,EAAcoB,EAAMC,EAAMyC,GAK5E,IAJA,IAAMU,EAAQ,CAACzB,GACT/D,EAAO,GACPD,EAAO,eAAMgE,EAAY,GAHyD,aAMpF,IAAM0B,EAAWD,EAAM,GAOvB,GANIC,IAAazB,GAAcyB,IAAa1B,GACxCkB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsB4D,EAAW,CAACjG,EAAaK,SAAUL,EAAaE,aAC7FoF,GAGHW,IAAazB,EAGb,OAFAwB,EAAME,MACNF,EAAMG,QACA,CAAN,EAAOH,GAGPC,IAAa1B,IACb/D,EAAK4F,QAAQH,GACb1F,EAAQ0F,GAAY,EACpBR,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsB4D,EAAW,CAACjG,EAAaO,QAASP,EAAaE,aAC5FoF,IAGP,IA3BoF,EA2B9EI,EAAa3B,EAAkBkC,EAAUrD,EAAMC,EAAMG,GACvDqD,GAA0B,EA5BsD,cA6B5DX,GA7B4D,IA6BpF,2BAAoC,CAAC,IAA1BC,EAAyB,QAChC,KAAIA,KAAapF,GAAjB,CAIAyF,EAAMI,QAAQT,GACdU,GAA0B,EAC1B,QApCgF,8BAuC/EA,GACDL,EAAMM,OAAO,EAAG,IAnCjBN,EAAMF,OAAS,GAAG,CAAC,IAAD,wCAuCzB,MAAO,IC5CES,EAAM,SAAChC,EAAWC,EAAYxB,EAAWxB,EAAcoB,EAAMC,EAAMyC,GAK5E,IAJA,IAAIkB,EAAQ,CAACjC,GACThE,EAAO,eAAMgE,EAAY,GACzBE,EAAY,GAHwE,aAMpF,IAAMwB,EAAWO,EAAMN,MACnBD,IAAa1B,GAAa0B,IAAazB,GACvCiB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsB4D,EAAW,CAACjG,EAAaO,QAASP,EAAaE,aAC5FoF,GAEP,IAZoF,EAY9EI,EAAa3B,EAAkBkC,EAAUrD,EAAMC,EAAMG,GAZyB,cAc5D0C,GAd4D,yBAczEC,EAdyE,QAehF,OAAIA,KAAapF,EACb,YAGJkE,EAAUkB,GAAaM,EACvBO,EAAMJ,QAAQT,GACdpF,EAAQoF,GAAa,EAEjBA,IAAcnB,EACR,CAAN,KAAOF,EAAWC,EAAWC,EAAYC,UAG7CgB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBsD,EAAY,CAAC3F,EAAaK,SAAUL,EAAaE,aAC9FoF,KAfP,2BAAoC,CAAC,IAAD,yDAdgD,gCAKjFkB,EAAMV,OAAS,GAAG,CAAC,IAAD,wCA4BzB,MAAO,ICjCEW,EAAQ,SAAClC,EAAWC,EAAYxB,EAAWxB,EAAcoB,EAAMC,EAAMyC,GAQ9E,IAPA,IAAIoB,EAAO,eAAMnC,EAAY,GACzBoC,EAAC,eAAMpC,EAAY,GACnBqC,EAAC,eAAMrC,EAAY,GACnBsC,EAAC,eAAMtC,EAAY,GACnBE,EAAY,GAGPtB,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3B,IAAIsB,EAAI,UAAMvB,EAAN,YAAWC,GAEfsB,IAASH,IACTsC,EAAEnC,GAAQiC,EAAEjC,GAAQkC,EAAElC,GAAQ3D,KAK1C,IAlB0F,iBAmBtF,IAAM+F,EAAWnC,EAAoB+B,GAGrC,UAFOA,EAAQI,GAEXA,IAAavC,GAAauC,IAAatC,EACvCiB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsByE,EAAtB,CAAkC9G,EAAaO,SAA/C,mBAA2D8B,EAAUyE,GAAUxE,MAAM,YAC5GgD,QAEF,GAAIwB,IAAatC,EAElB,MAAM,CAAN,EAAOF,EAAWC,EAAWC,EAAYC,IAG7C,IAhCsF,EAgChFiB,EAAa3B,EAAkB+C,EAAUlE,EAAMC,EAAMG,GAhC2B,cAiC9D0C,GAjC8D,yBAiC3EC,EAjC2E,QAkC5EoB,EAAaJ,EAAEG,GAAYhG,EAAWkC,EAAU2C,GAAW,IAE7DoB,EAAaJ,EAAEhB,KACXA,IAAcpB,GAAaoB,IAAcnB,GACzCiB,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBsD,EAAtB,CAAmC3F,EAAaK,UAAhD,mBAA6DgC,EAAUsD,YAC9FL,GAIPqB,EAAEhB,GAAaoB,EACfH,EAAEjB,GAAaqB,EAAErB,EAAWnB,GAC5BqC,EAAElB,GAAagB,EAAEhB,GAAaiB,EAAEjB,GAChClB,EAAUkB,GAAamB,EACvBJ,EAAQf,GAAakB,EAAElB,KAf/B,2BAAqC,IAjCiD,gCAkBnFhG,OAAOkG,KAAKa,GAASZ,OAAS,GAAG,CAAC,IAAD,wCAmCxC,MAAO,IAKLkB,EAAI,SAACC,EAAczC,GACrB,GAAIyC,IAAiBzC,EACjB,OAAO,EAGX,IAAM0C,EAAUhD,SAAS+C,EAAa9C,MAAM,KAAK,IAC3CgD,EAAUjD,SAAS+C,EAAa9C,MAAM,KAAK,IAC3CiD,EAAYlD,SAASM,EAAWL,MAAM,KAAK,IAC3CkD,EAAYnD,SAASM,EAAWL,MAAM,KAAK,IAEjD,OAAOW,KAAKwC,IAAIJ,EAAUE,GAAatC,KAAKwC,IAAIH,EAAUE,IChB/CE,EAjDG,SAAC,GAAmH,IAAjH3E,EAAgH,EAAhHA,KAAMC,EAA0G,EAA1GA,KAAM2E,EAAoG,EAApGA,aAAchG,EAAsF,EAAtFA,aAAc+C,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,WAAYiD,EAAiD,EAAjDA,cAAe5F,EAAkC,EAAlCA,YAAa6F,EAAqB,EAArBA,eACtGC,EAAG,uCAAG,oCAAAC,EAAA,yDACJrD,IAAcC,EADV,iDAKFqD,EAAmBJ,IACzBC,GAAe,GACfI,QAAQC,IAAI,aAAcP,GAEtBhH,EAAO,GACP8E,EAAU,EAVN,KAWAkC,EAXA,cAYClI,EAZD,UAeCG,EAfD,UAkBCD,EAlBD,UAqBCD,EArBD,2BAaAiB,EAAO6E,EAAUd,EAAWC,EAAYqD,EAAkBrG,EAAcoB,EAAMC,EAAMyC,GAbpF,oCAgBA9E,EAAOuF,EAAIxB,EAAWC,EAAYqD,EAAkBrG,EAAcoB,EAAMC,EAAMyC,GAhB9E,oCAmBA9E,EAAO+F,EAAIhC,EAAWC,EAAYqD,EAAkBrG,EAAcoB,EAAMC,EAAMyC,GAnB9E,oCAsBA9E,EAAOiG,EAAMlC,EAAWC,EAAYqD,EAAkBrG,EAAcoB,EAAMC,EAAMyC,GAtBhF,iEA8BR,IAFAwC,QAAQC,IAAI,UAAWP,GA5Bf,WA8BCQ,GACLvC,YAAW,WACPjE,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsB7B,EAAKwH,GAA3B,CAAiChI,EAAaQ,MAA9C,mBAAuDqH,EAAiBrH,EAAKwH,aACpG1C,IAHE0C,EAAIxH,EAAKsF,OAAS,EAAGkC,GAAK,EAAGA,IAAM,EAAnCA,GAMTvC,YAAW,WACPiC,GAAe,KAChBpC,GAtCK,4CAAH,qDAyCT,OACI,qBAAKnD,UAAS,iBAAYN,EAAc,WAAa,SAAW+B,QAAS/B,EAAc,KAAO8F,EAA9F,kBCjDO,MAA0B,uCCA1B,MAA0B,mCCA1B,MAA0B,4CCA1B,MAA0B,oCCA1B,MAA0B,6CC+D1BM,EAtDQ,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,aAAcC,EAAqC,EAArCA,MAAOC,EAA8B,EAA9BA,SAAUC,EAAoB,EAApBA,cAAoB,EACjCpF,oBAAS,GADwB,mBAClEqF,EADkE,KACpDC,EADoD,OAEnCtF,mBAASkF,EAAM,IAFoB,mBAElEK,EAFkE,KAErDC,EAFqD,OAGrCxF,mBAAS,GAH4B,mBAGlEyF,EAHkE,KAGtDC,EAHsD,KAInEC,EAAkBlJ,IAAcyI,EAEtCU,qBAAU,WACFT,IACAK,EAAeN,EAAM,IACrBQ,EAAc,GACdJ,GAAgB,GAChBL,EAAaC,EAAM,OAExB,CAACC,IAkBJ,IAhBA,IAWMlG,EAAQ,CACVF,MAAOqG,GAGLS,EAAgB,GA9BmD,WA+BhEd,GXcgB,IAAC7C,EWbtB2D,EAAczF,KAAK,sBAAKnB,MAAOA,EAAOC,UAAS,6BAAwB6F,IAAMU,GAAc,WAA5C,YAA0DV,IAAMG,EAAMrC,OAAS,GAAK,QAAUlC,QAAS,WAbpI,IAACmF,IAayJf,EAZ5KO,GAAgB,SAAAlG,GAAS,OAAKA,KAC9BoG,EAAeN,EAAMY,IACrBJ,EAAcI,GACdb,EAAaC,EAAMY,KASA,UACdZ,EAAMH,GACNY,IAAoB1D,EAAiBiD,EAAMH,IAAuL,qBAAK7F,UAAU,sBAAsB6G,IAAKC,EAAgBC,MAAK,UAAKf,EAAMH,GAAX,8CAA2DmB,IAAG,UAAKhB,EAAMH,GAAX,gDAA9S,qBAAK7F,UAAU,sBAAsB6G,IAAKI,EAAQF,MAAK,UAAKf,EAAMH,GAAX,0CAAuDmB,IAAG,UAAKhB,EAAMH,GAAX,6CAClKY,IXUiBzD,EWVgBgD,EAAMH,GXWzClI,EAAiBsF,SAASD,GWXqB,qBAAKhD,UAAU,sBAAsB6G,IAAKK,EAASH,MAAK,UAAKf,EAAMH,GAAX,8BAA2CmB,IAAG,UAAKhB,EAAMH,GAAX,gCAAoD,qBAAK7F,UAAU,sBAAsB6G,IAAKM,EAAiBJ,MAAK,UAAKf,EAAMH,GAAX,sCAAmDmB,IAAG,UAAKhB,EAAMH,GAAX,2CAH3IA,KADlLA,EAAI,EAAGA,EAAIG,EAAMrC,OAAQkC,IAAM,EAA/BA,GAQT,OACI,sBAAK7F,UAAU,WAAf,UACI,sBAAKD,MAAOA,EAAOC,UAAS,0BAAqBmG,GAAgB,OAArC,YAA+CF,GAAY,YAAcxE,QAASwE,EAAW,KA1BlH,WACXG,GAAgB,SAAAlG,GAAS,OAAKA,MAyB1B,UACKmG,GACCJ,GAAY,qBAAKjG,UAAU,aAAa6G,IAAKO,EAAWJ,IAAI,QAEjEb,GACG,qBAAKnG,UAAU,gBAAf,SACK2G,QC9BNU,EApBS,SAAC,GAAoK,IAAlK5G,EAAiK,EAAjKA,KAAMC,EAA2J,EAA3JA,KAAMrB,EAAqJ,EAArJA,aAAc+C,EAAuI,EAAvIA,UAAWC,EAA4H,EAA5HA,WAAYiD,EAAgH,EAAhHA,cAAe5F,EAAiG,EAAjGA,YAAa6F,EAAoF,EAApFA,eAAgB+B,EAAoE,EAApEA,uBAAwBC,EAA4C,EAA5CA,uBAAwBrB,EAAoB,EAApBA,cAAoB,EAChJpF,mBAASvD,EAAU,IAD6H,mBACjL8H,EADiL,KACnKmC,EADmK,KAYxL,OACI,sBAAKxH,UAAS,cAAd,UACI,cAAC,EAAD,CAAgB+F,aAXO,SAAC0B,GAC5B,IAAMC,EAAiB3E,EAAiB0E,GACxCH,EAAuBI,GACvBF,EAAgBC,GACZC,GACAH,KAMsDvB,MAAOzI,EAAW0I,UAAU,EAAOC,cAAeA,IACxG,cAAC,EAAD,CAAWzF,KAAMA,EAAMC,KAAMA,EAAM2E,aAAcA,EAAchG,aAAcA,EAAc+C,UAAWA,EAAWC,WAAYA,EAAYiD,cAAeA,EAAe5F,YAAaA,EAAa6F,eAAgBA,QCL9MoC,EAXO,SAAC,GAAoH,IAAlHlH,EAAiH,EAAjHA,KAAMC,EAA2G,EAA3GA,KAAMrB,EAAqG,EAArGA,aAAc+C,EAAuF,EAAvFA,UAAWC,EAA4E,EAA5EA,WAAYiD,EAAgE,EAAhEA,cAAe5F,EAAiD,EAAjDA,YAAa6F,EAAoC,EAApCA,eAAgBW,EAAoB,EAApBA,cAAoB,EAChFpF,mBAASlD,EAAa,IAD0D,mBAC/HgK,EAD+H,KAC1GC,EAD0G,KAGtI,OACI,sBAAK7H,UAAS,iBAAd,UACI,cAAC,EAAD,CAAgB+F,aAAc8B,EAAwB7B,MAAOpI,EAAcqI,UAAU,EAAOC,cAAeA,IAC3G,cAAC,EAAD,CAAWzF,KAAMA,EAAMC,KAAMA,EAAM2E,aAAcuC,EAAqBvI,aAAcA,EAAc+C,UAAWA,EAAWC,WAAYA,EAAYiD,cAAeA,EAAe5F,YAAaA,EAAa6F,eAAgBA,QCKrNuC,GAbQ,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,oBAAqBC,EAAyC,EAAzCA,oBAAqB9B,EAAoB,EAApBA,cAMhE,OACI,qBAAKlG,UAAS,kBAAd,SACI,cAAC,EAAD,CAAgB+F,aAPJ,SAACkC,GACjBtC,QAAQC,IAAI,iBAAkB9G,EAAQmJ,IACtCF,EAAoBjJ,EAAQmJ,KAKmBjC,MAAOnH,EAAeoH,SAAU+B,EAAqB9B,cAAeA,OCa5GgC,GAlBA,SAAC,GAA4N,IAA1NzH,EAAyN,EAAzNA,KAAMC,EAAmN,EAAnNA,KAAMhB,EAA6M,EAA7MA,YAAa6F,EAAgM,EAAhMA,eAAgB5E,EAAgL,EAAhLA,QAASb,EAAuK,EAAvKA,OAAQT,EAA+J,EAA/JA,aAAc+C,EAAiJ,EAAjJA,UAAWC,EAAsI,EAAtIA,WAAYb,EAA0H,EAA1HA,eAAgBG,EAA0G,EAA1GA,UAAWoG,EAA+F,EAA/FA,oBAAqBC,EAA0E,EAA1EA,oBAAqBV,EAAqD,EAArDA,uBAAwBC,EAA6B,EAA7BA,uBACpMxH,EAAQ,CACVY,QAASA,EACTwH,cAAexH,EAAU,EACzBb,OAAQA,GAGZ,OACI,sBAAKC,MAAOA,EAAOC,UAAU,SAA7B,UACI,cAAC,EAAD,CAAOwB,eAAgBA,EAAgB9B,YAAaA,IACpD,cAAC,EAAD,CAAOiC,UAAWA,EAAWjC,YAAaA,IAC1C,cAAC,EAAD,CAAiBe,KAAMA,EAAMC,KAAMA,EAAMrB,aAAcA,EAAc+C,UAAWA,EAAWC,WAAYA,EAAYiD,cAAe3D,EAAWjC,YAAaA,EAAa6F,eAAgBA,EAAgB+B,uBAAwBA,EAAwBC,uBAAwBA,EAAwBrB,cAAe,MACtT,cAAC,EAAD,CAAezF,KAAMA,EAAMC,KAAMA,EAAMrB,aAAcA,EAAc+C,UAAWA,EAAWC,WAAYA,EAAYiD,cAAe3D,EAAWjC,YAAaA,EAAa6F,eAAgBA,EAAgBW,cAAe,MACpN,cAAC,GAAD,CAAgB6B,oBAAqBA,EAAqBC,oBAAqBA,EAAqB9B,cAAe,UCgJhHkC,OA9Jf,WAAgB,IAAD,EACqBtH,mBAAS,IAD9B,mBACND,EADM,KACKxB,EADL,OAEmCyB,mBAAS,QAF5C,mBAENnB,EAFM,KAEYoI,EAFZ,OAGWjH,mBAAS,GAHpB,mBAGNL,EAHM,KAGA4H,EAHA,OAIWvH,mBAAS,GAJpB,mBAINJ,EAJM,KAIA4H,EAJA,OAKqBxH,mBAAS,OAL9B,mBAKNsB,EALM,KAKK5C,EALL,OAMuBsB,mBAAS,OANhC,mBAMNuB,EANM,KAMM5C,EANN,OAOyBqB,oBAAS,GAPlC,mBAONpB,EAPM,KAOO6F,EAPP,OAQyCzE,oBAAS,GARlD,mBAQNkH,EARM,KAQeV,EARf,KAabZ,qBAAU,WACR6B,MACC,IAOH,IAAMA,EAAa,WACjB,IAAMC,EAAoBC,OAAOC,YAAP,IACpBC,EAAmBF,OAAOG,WAAc,GAExCnI,EAAOsB,SAASyG,EAAiB,IACjC9H,EAAOqB,SAAS4G,EAAgB,IAEtCpD,GAAe,GACf8C,EAAQ5H,GACR6H,EAAQ5H,GACRlB,EAAa,OACbC,EAAc,GAAD,OAAIgB,EAAO,EAAX,YAAgBC,EAAO,IAGpC,IADA,IAAImI,EAAU,GACL7H,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAI7B,EAAY,CAACvB,EAAaE,MACpB,IAANiD,GAAiB,IAANC,EACb7B,EAAU6E,QAAQpG,EAAaM,OAExB6C,IAAOP,EAAO,GAAMQ,IAAOP,EAAO,GACzCtB,EAAU6E,QAAQpG,EAAaG,QAGjC6K,EAAQ,GAAD,OAAI7H,EAAJ,YAASC,IAAO7B,EAI3BC,EAAawJ,IAoGf,OACE,qCACE,cAAC,GAAD,CAAQpI,KAAMA,EAAMC,KAAMA,EAAMhB,YAAaA,EAAa6F,eAAgBA,EAAgB5E,QA/I/E,GA+IgGb,OA7I1F,GA6IgHT,aAAcA,EAAc+C,UAAWA,EAAWC,WAAYA,EAAYb,eApExL,WAIrB,IAHA,IAAIqH,EAAU,GACVC,GAAS,EAEJ9H,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAI2F,EAAE,UAAM5F,EAAN,YAAWC,GACjB4H,EAAQjC,GAAM/F,EAAU+F,GACxB,IAAImC,EAAYlI,EAAU+F,GAAI,IAGzBmC,IAAclL,EAAaM,OAAS4K,IAAclL,EAAaG,SAAY6C,EAAU+F,GAAI,IAAM/I,EAAaI,MAC/G4K,EAAQjC,GAAIzC,OAAO,EAAG,GACtB2E,GAAS,IAIPC,IAAclL,EAAaQ,MAAQ0K,IAAclL,EAAaO,SAAW2K,IAAclL,EAAaK,WACtG6K,EAAYlI,EAAU+F,GAAI,IAGxBmC,GAAalL,EAAaI,OAC5B4K,EAAQjC,GAAM,CAAC/I,EAAaE,MAC5B+K,GAAS,IAKXA,GACFzJ,GAAa,SAAAa,GAAS,OAAK2I,MAuCgNlH,UAnG7N,WAIhB,IAHA,IAAIkH,EAAU,GACVC,GAAS,EAEJ9H,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAI2F,EAAE,UAAM5F,EAAN,YAAWC,GACjB4H,EAAQjC,GAAM/F,EAAU+F,GACxB,IAAImC,EAAYlI,EAAU+F,GAAI,GAGzBmC,IAAclL,EAAaM,OAAS4K,IAAclL,EAAaG,QAAY6C,EAAU+F,GAAI,KAAO/I,EAAaQ,MAAQwC,EAAU+F,GAAI,KAAO/I,EAAaO,SAAWyC,EAAU+F,GAAI,KAAO/I,EAAaK,SAMrM6K,IAAclL,EAAaQ,MAAQ0K,IAAclL,EAAaO,SAAW2K,IAAclL,EAAaK,WACtG2K,EAAQjC,GAAMiC,EAAQjC,GAAIzG,MAAM,GAChC2I,GAAS,IAPTD,EAAQjC,GAAIzC,OAAO,EAAG,GACtB2E,GAAS,GAef,OAJIA,GACFzJ,GAAa,SAAAa,GAAS,OAAK2I,KAGtBA,GAuE4Pd,oBAAqBA,EAAqBC,oBAAqBA,EAAqBV,uBAAwBA,EAAwBC,uBAnC1W,WAI7B,IAHA,IAAIsB,EAAU,GACVC,GAAS,EAEJ9H,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAI2F,EAAE,UAAM5F,EAAN,YAAWC,GACjB4H,EAAQjC,GAAM/F,EAAU+F,GACxB,IAAImC,EAAYlI,EAAU+F,GAAI,IAGzBmC,IAAclL,EAAaM,OAAS4K,IAAclL,EAAaG,SAAY6C,EAAU+F,GAAI,GAAK/I,EAAaI,MAC9G4K,EAAQjC,GAAIzC,OAAO,EAAG,GACtB2E,GAAS,IAIPC,IAAclL,EAAaQ,MAAQ0K,IAAclL,EAAaO,SAAW2K,IAAclL,EAAaK,WACtG6K,EAAYlI,EAAU+F,GAAI,IAGxBmC,EAAYlL,EAAaI,OAC3B4K,EAAQjC,GAAM,CAAC/I,EAAaE,MAC5B+K,GAAS,IAKXA,GACFzJ,GAAa,SAAAa,GAAS,OAAK2I,QAO3B,cAAC,EAAD,CAAMpI,KAAMA,EAAMC,KAAMA,EAAMC,QAhJnB,GAgJoCC,SA/IlC,GA+IsDC,UAAWA,EAAWxB,aAAcA,EAAcM,iBAAkBA,EAAkBH,aAAcA,EAAcC,cAAeA,EAAeC,YAAaA,QClJvNsJ,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1Bb,O","file":"static/js/main.4f435776.chunk.js","sourcesContent":["// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = \"A*\";\nconst BFS = \"BFS\";\nconst DFS = \"DFS\";\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS };\n\nconst pathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS];\nObject.freeze(pathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { pathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\n\nexport { ALGO1, ALGO2, terrainAlgos };\n\n// NODE TYPES ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n}\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };","import React from 'react'\nimport { nodeColorClass, nodeTypeEnum } from '../utils/constants.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [draggingSelection, ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${nodeColorClass[nodeState[0]]}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { nodeTypeEnum, unweightedPathAlgos, optimalPathAlgos } from './constants.js'\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [nodeTypeEnum.visited, ...prevState[minKey].slice(1)] }));\n            }, timeout);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + nodeWeight[gridState[neighbour][0]];\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n            }\n        }\n    }\n\n    return [];\n};","import { getNeighbourNodes } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visiting, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visited, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};","import { getNeighbourNodes, createPath } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        if (currCord !== startCord && currCord !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [nodeTypeEnum.visited, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, nodeTypeEnum.none] }));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const aStar = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let G = { [startCord]: 0 }; // G(n) => tell us the current shortest distance from start node to node n\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = G(n) + H(n)\n    let prevNodes = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = G[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currNode]: [nodeTypeEnum.visited, ...prevState[currNode].slice(1)] }));\n            }, timeout);\n        }\n        else if (currNode === targetCord) {\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currGScore = G[currNode] + nodeWeight[gridState[neighbour][0]];\n\n            if (currGScore < G[neighbour]) {\n                if (neighbour !== startCord && neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [nodeTypeEnum.visiting, ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                G[neighbour] = currGScore;\n                H[neighbour] = h(neighbour, targetCord);\n                F[neighbour] = G[neighbour] + H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\nimport { DIJKSTRAS, DFS, BFS, ASTAR, nodeTypeEnum } from '../utils/constants.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        let timeout = 1;\n        switch (selectedAlgo) {\n            case DIJKSTRAS:\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case DFS:\n                path = dfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case BFS:\n                path = bfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case ASTAR:\n                path = aStar(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            default:\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [nodeTypeEnum.path, ...updatedGridState[path[i]]] }));\n            }, timeout);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, timeout);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","export default __webpack_public_path__ + \"static/media/weight.e51e9729.svg\";","export default __webpack_public_path__ + \"static/media/weight_unfilled.cc3c5f2f.svg\";","export default __webpack_public_path__ + \"static/media/optimal.5649a19a.svg\";","export default __webpack_public_path__ + \"static/media/optimal_unfilled.e461ee2c.svg\";","import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js'\nimport { pathAlgos } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (pathAlgos === items);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { isAlgoUnweighted } from '../utils/helper.js'\nimport { pathAlgos } from '../utils/constants.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, setWeightedObsDisabled, clearWeightedObstacles, dropDownWidth }) => {\n    const [selectedAlgo, setSelectedAlgo] = useState(pathAlgos[0]);\n\n    const alteredSetSelectedAlgo = (algoName) => {\n        const unweightedAlgo = isAlgoUnweighted(algoName);\n        setWeightedObsDisabled(unweightedAlgo);\n        setSelectedAlgo(algoName);\n        if (unweightedAlgo) {\n            clearWeightedObstacles();\n        }\n    };\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={alteredSetSelectedAlgo} items={pathAlgos} disabled={false} dropDownWidth={dropDownWidth} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { terrainAlgos } from '../utils/constants.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(terrainAlgos[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={terrainAlgos} disabled={false} dropDownWidth={dropDownWidth} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { obstacleTypes, obsEnum } from '../utils/constants.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle, weightedObsDisabled, dropDownWidth }) => {\n    const setObstacle = (obstacleName) => {\n        console.log(\"selected obs: \", obsEnum[obstacleName]);\n        setSelectedObstacle(obsEnum[obstacleName]);\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={obstacleTypes} disabled={weightedObsDisabled} dropDownWidth={dropDownWidth} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, setWeightedObsDisabled, clearWeightedObstacles }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} dropDownWidth={200} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={150} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={150} />\n        </div>\n    )\n}\n\nexport default Header\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [nodeTypeEnum.none];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(nodeTypeEnum.start);\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(nodeTypeEnum.target);\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] === nodeTypeEnum.path || gridState[id][1] === nodeTypeEnum.visited || gridState[id][1] === nodeTypeEnum.visiting)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] >= nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (gridState[id][1] > nodeTypeEnum.wall)) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === nodeTypeEnum.path || currState === nodeTypeEnum.visited || currState === nodeTypeEnum.visiting) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          gridMap[id] = [nodeTypeEnum.none];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}