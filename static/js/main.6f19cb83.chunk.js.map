{"version":3,"sources":["utils/util.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/dfs.js","algorithms/path_finding/bfs.js","components/Visualize.js","images/down_arrow.svg","images/weight.svg","images/weight_unfilled.svg","images/optimal.svg","images/optimal_unfilled.svg","components/CustomDropdown.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","visiting","start","visited","path","nodeWeight","Infinity","pathAlgos","unweightedPathAlgos","optimalPathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getPathAlgos","getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","push","createPath","startCord","targetCord","prevNodes","cord","isAlgoUnweighted","algo","includes","Node","React","memo","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeDim","width","height","style","className","onMouseDown","prevState","slice","onMouseUp","onMouseEnter","onMouseLeave","Grid","padding","nodeSize","useState","nodes","x","y","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","dijkstras","timeout","totalCosts","minPQ","minKey","findMinPriorityNode","setTimeout","neighbours","neighbour","currPath","keys","length","minPriority","Math","min","values","dfs","stack","currCord","pop","shift","unshift","unvisitedNeighbourFound","splice","bfs","queue","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","console","log","i","CustomDropdown","setSelection","items","disabled","dropDownWidth","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","isAlgoSelector","useEffect","dropdownItems","id","src","weightUnfilled","title","weight","optimal","optimalUnfilled","downArrow","ChooseAlgorithm","setWeightedObsDisabled","clearWeightedObstacles","setSelectedAlgo","algoName","unweightedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","weightedObsDisabled","obstacleName","Header","paddingBottom","App","setRows","setCols","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","change","currState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f19cb83.chunk.js","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'visiting': 6,\n    'wall': 7,\n    'weighted-100': 8,\n    'weighted-80': 9,\n    'weighted-60': 10,\n    'weighted-40': 11,\n    'weighted-20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst unweightedPathAlgos = [\"DFS\", \"BFS\"];\nconst optimalPathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\"]\n\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n","import React from 'react'\nimport { getNodeColorClass, getNodeTypeEnum } from '../utils/util.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        if (nodeState[0] === getNodeTypeEnum('none') || nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited')) {\n            setDraggingSelection(getNodeTypeEnum(selectedObstacle));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n            return;\n        }\n        else if (nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(getNodeTypeEnum('remObstacle'));\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === getNodeTypeEnum('remObstacle') && nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === getNodeTypeEnum(selectedObstacle) && (nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited') || nodeState[0] === getNodeTypeEnum('none'))) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${getNodeColorClass(nodeState[0])}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { getNodeTypeEnum, getNodeWeight, getNeighbourNodes, createPath } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [getNodeTypeEnum('visited'), ...prevState[minKey].slice(1)] }));\n            }, timeout);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    setTimeout(() => {\n                        setGridState(prevState => ({ ...prevState, [neighbour]: [getNodeTypeEnum('visiting'), ...prevState[neighbour]] }));\n                    }, timeout);\n                }\n            }\n        }\n    }\n\n    return [];\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};","import { getNodeTypeEnum, getNeighbourNodes } from '../../utils/util.js'\n\nexport const dfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visiting'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};","import { getNodeTypeEnum, getNeighbourNodes, createPath } from '../../utils/util.js'\n\nexport const bfs = (startCord, targetCord, gridState, setGridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        if (currCord !== startCord && currCord !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [currCord]: [getNodeTypeEnum('visited'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [neighbour]: [getNodeTypeEnum('visiting'), getNodeTypeEnum('none')] }));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        let timeout = 1;\n        switch (selectedAlgo) {\n            case \"Dijkstra's\":\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case \"DFS\":\n                timeout = 1000;\n                path = dfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            case \"BFS\":\n                path = bfs(startCord, targetCord, updatedGridState, setGridState, rows, cols, timeout);\n                break;\n            default:\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path'), ...updatedGridState[path[i]]] }));\n            }, timeout);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, timeout);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","export default __webpack_public_path__ + \"static/media/weight.e51e9729.svg\";","export default __webpack_public_path__ + \"static/media/weight_unfilled.cc3c5f2f.svg\";","export default __webpack_public_path__ + \"static/media/optimal.5649a19a.svg\";","export default __webpack_public_path__ + \"static/media/optimal_unfilled.e461ee2c.svg\";","import { useState, useEffect } from 'react'\nimport { getPathAlgos, isAlgoUnweighted, isAlgoOptimal } from '../utils/util.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const isAlgoSelector = (getPathAlgos() === items);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`}></img>)}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow}></img>}\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos, isAlgoUnweighted } from '../utils/util.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, setWeightedObsDisabled, clearWeightedObstacles, dropDownWidth }) => {\n    const [selectedAlgo, setSelectedAlgo] = useState(getPathAlgos()[0]);\n\n    const alteredSetSelectedAlgo = (algoName) => {\n        const unweightedAlgo = isAlgoUnweighted(algoName);\n        setWeightedObsDisabled(unweightedAlgo);\n        setSelectedAlgo(algoName);\n        if (unweightedAlgo) {\n            clearWeightedObstacles();\n        }\n    };\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={alteredSetSelectedAlgo} items={getPathAlgos()} disabled={false} dropDownWidth={dropDownWidth} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos, getTerrainAlgos } from '../utils/util.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={getTerrainAlgos()} disabled={false} dropDownWidth={dropDownWidth} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { getObstacleTypes, getObstacleEnum } from '../utils/util.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle, weightedObsDisabled, dropDownWidth }) => {\n    const setObstacle = (obstacleName) => {\n        setSelectedObstacle(getObstacleEnum(obstacleName));\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={getObstacleTypes()} disabled={weightedObsDisabled} dropDownWidth={dropDownWidth} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, setWeightedObsDisabled, clearWeightedObstacles }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} dropDownWidth={200} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={150} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={150} />\n        </div>\n    )\n}\n\nexport default Header\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for path\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] === getNodeTypeEnum('path') || gridState[id][1] === getNodeTypeEnum('visited') || gridState[id][1] === getNodeTypeEnum('visiting'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for obstacle\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] >= getNodeTypeEnum('wall'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === getNodeTypeEnum('start') || currState === getNodeTypeEnum('target')) && (gridState[id][1] > getNodeTypeEnum('wall'))) {\n          gridMap[id].splice(1, 1);\n          change = true;\n          continue;\n        }\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('visiting')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState > getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} setWeightedObsDisabled={setWeightedObsDisabled} clearWeightedObstacles={clearWeightedObstacles} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}