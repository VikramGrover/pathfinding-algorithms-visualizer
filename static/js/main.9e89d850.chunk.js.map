{"version":3,"sources":["utils/helper.js","algorithms/path_finding/dijkstras.js","algorithms/path_finding/aStar.js","algorithms/path_finding/bestFirst.js","utils/constants.js","algorithms/path_finding/bfs.js","algorithms/path_finding/dfs.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","components/Visualize.js","images/down_arrow.svg","images/weight.svg","images/weight_unfilled.svg","images/optimal.svg","images/optimal_unfilled.svg","components/CustomDropdown.js","components/ShowInfo.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","images/close.svg","components/InfoBox.js","App.js","reportWebVitals.js","index.js"],"names":["getNeighbourNodes","node","rows","cols","gridState","row","parseInt","split","col","res","nodeTypeEnum","wall","push","createPath","startCord","targetCord","prevNodes","cord","path","findMinPriorityNode","minPQ","minPriority","Math","min","Object","values","key","isAlgoUnweighted","algo","unweightedPathAlgos","includes","sleep","ms","Promise","resolve","setTimeout","dijkstras","timeout","a","visited","totalCosts","x","y","Infinity","keys","length","minKey","nodeStateFunc","prevState","slice","neighbours","neighbour","currPath","nodeWeight","visiting","h","currNodeCord","currRow","currCol","targetRow","targetCol","abs","DIJKSTRAS","ASTAR","BFS","DFS","BEST_FIRST","algoFunctions","openSet","G","H","F","currNode","currGScore","queue","currCord","pop","none","unshift","stack","shift","unvisitedNeighbourFound","splice","console","log","freeze","algoSleepTimes","allPathAlgos","optimalPathAlgos","terrainAlgos","pathfindingAlgoInfo","nodeColorClass","target","start","weighted100","weighted80","weighted60","weighted40","weighted20","nodeColors","obstacleTypes","obsEnum","Node","nodeId","size","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","startingState","useState","nodeState","setNodeState","useEffect","nodeColor","colorA","colorB","amount","match","map","c","rA","gA","bA","rB","gB","bB","round","toString","padStart","getNodeColor","nodeStyle","width","height","backgroundColor","border","cursor","style","className","remObstacle","onMouseDown","onMouseUp","onMouseEnter","onMouseLeave","Grid","React","memo","padding","nodeSize","nodes","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","i","CustomDropdown","setSelection","items","disabled","dropDownWidth","isAlgoSelector","isObstacleSelector","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","dropdownItems","id","src","weightUnfilled","title","alt","weight","optimal","optimalUnfilled","downArrow","display","ShowInfo","toggleInfoBox","ChooseAlgorithm","setSelectedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","weightedObsDisabled","obstacleName","Header","paddingBottom","InfoBox","infoBoxOpen","dragging","setDragging","boxCord","setBoxCord","disableDragging","e","left","top","onMouseMove","movementX","movementY","closeIcon","description","optimality","App","setInfoBoxOpen","setRows","setCols","setWeightedObsDisabled","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","currRows","currCols","currState","prev","algoName","unweightedAlgo","clearWeightedObstacles","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e89d850.chunk.js","sourcesContent":["import { nodeTypeEnum, unweightedPathAlgos, optimalPathAlgos, nodeColors } from './constants.js'\n\nexport const getNodeColor = (nodeState) => {\n    if ((nodeState[0] === nodeTypeEnum.visited || nodeState[0] === nodeTypeEnum.visiting) && nodeState[1] > nodeTypeEnum.wall) {\n        let colorA = nodeColors[nodeState[0]];\n        const colorB = nodeColors[nodeState[1]];\n        let amount = 0.78;\n\n        if (nodeState[0] === nodeTypeEnum.visiting) {\n            colorA = nodeColors[nodeTypeEnum.visited];\n        }\n        // we need to mix colors\n        const [rA, gA, bA] = colorA.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n        const [rB, gB, bB] = colorB.match(/\\w\\w/g).map((c) => parseInt(c, 16));\n        const r = Math.round(rA + (rB - rA) * amount).toString(16).padStart(2, '0');\n        const g = Math.round(gA + (gB - gA) * amount).toString(16).padStart(2, '0');\n        const b = Math.round(bA + (bB - bA) * amount).toString(16).padStart(2, '0');\n        return '#' + r + g + b;\n    }\n\n    return nodeColors[nodeState[0]];\n};\n\nexport const getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0][0] !== nodeTypeEnum.wall)) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    return res;\n};\n\nexport const createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nexport const findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};\n\nexport const isAlgoUnweighted = (algo) => {\n    return unweightedPathAlgos.includes(algo);\n};\n\nexport const isAlgoOptimal = (algo) => {\n    return optimalPathAlgos.includes(algo);\n};\n\nexport const sleep = (ms) => {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}","import { getNeighbourNodes, createPath, findMinPriorityNode, sleep } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dijkstras = async (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            const nodeStateFunc = gridState[minKey][1];\n            // setTimeout(() => {\n            nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n            // }, timeout);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + nodeWeight[gridState[neighbour][0][0]];\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n                if (neighbour !== targetCord) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    // setTimeout(() => {\n                    nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                    // }, timeout);\n                }\n            }\n        }\n\n        await sleep(timeout);\n    }\n\n    return [];\n};","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const aStar = (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let G = { [startCord]: 0 }; // G(n) => tell us the current shortest distance from start node to node n\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = G(n) + H(n)\n    let visited = {};\n    let prevNodes = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = G[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            const nodeStateFunc = gridState[currNode][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n            }, timeout);\n        }\n        else if (currNode === targetCord) {\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currGScore = G[currNode] + nodeWeight[gridState[neighbour][0][0]];\n\n            if (currGScore < G[neighbour]) {\n                if (neighbour !== startCord && neighbour !== targetCord && !(neighbour in visited)) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    setTimeout(() => {\n                        nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                    }, timeout);\n                }\n                visited[neighbour] = 1;\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                G[neighbour] = currGScore;\n                H[neighbour] = h(neighbour, targetCord);\n                F[neighbour] = G[neighbour] + H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { getNeighbourNodes, createPath, findMinPriorityNode } from '../../utils/helper.js'\nimport { nodeWeight, nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bestFirst = (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let openSet = { [startCord]: 0 };\n    let H = { [startCord]: 0 }; // H(n) => tells us the estimated distance from node n to target node\n    let F = { [startCord]: 0 }; // F(n) = H(n)\n    let prevNodes = {};\n    let visited = {};\n\n    // intialize all the scores to infinity for all node !== start node\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                F[cord] = H[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(openSet).length > 0) {\n        const currNode = findMinPriorityNode(openSet);\n        delete openSet[currNode];\n\n        if (currNode !== startCord && currNode !== targetCord) {\n            const nodeStateFunc = gridState[currNode][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, ...prevState.slice(1)]));\n            }, timeout);\n        }\n        else if (currNode === targetCord) {\n            console.log(\"DONNEE\");\n            // we have reached target, return path\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(currNode, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            if (!(neighbour in visited)) {\n                visited[neighbour] = 1;\n\n                if (neighbour !== startCord && neighbour !== targetCord) {\n                    const nodeStateFunc = gridState[neighbour][1];\n                    setTimeout(() => {\n                        nodeStateFunc(prevState => ([nodeTypeEnum.visiting, ...prevState]));\n                    }, timeout);\n                }\n                // newly calculated G score of neighbour is lower than the one in the table\n                // update all the scores\n                H[neighbour] = h(neighbour, targetCord) + nodeWeight[gridState[neighbour][0][0]];\n                F[neighbour] = H[neighbour];\n                prevNodes[neighbour] = currNode;\n                openSet[neighbour] = F[neighbour];\n            }\n        }\n    }\n\n    return [];\n};\n\n// this implements our H score heuristic\n// current heuristic: take the absolute sum of the difference in node N's co-ordinates and target's co-ordinates. Hence, the greater the distance between N and target, the greater the H score for node N\nconst h = (currNodeCord, targetCord) => {\n    if (currNodeCord === targetCord) {\n        return 0;\n    }\n\n    const currRow = parseInt(currNodeCord.split(':')[0]);\n    const currCol = parseInt(currNodeCord.split(':')[1]);\n    const targetRow = parseInt(targetCord.split(':')[0]);\n    const targetCol = parseInt(targetCord.split(':')[1]);\n\n    return Math.abs(currRow - targetRow) + Math.abs(currCol - targetCol);\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { dfs } from '../algorithms/path_finding/dfs.js'\nimport { bfs } from '../algorithms/path_finding/bfs.js'\nimport { aStar } from '../algorithms/path_finding/aStar.js'\nimport { bestFirst } from '../algorithms/path_finding/bestFirst.js';\n\n// PATHFINDING ALGORITHM CONSTANTS -------------------------------------------\nconst DIJKSTRAS = \"Dijkstra's\";\nconst ASTAR = 'A* (A-Star)';\nconst BFS = 'Breadth-first Search';\nconst DFS = 'Depth-first Search';\nconst BEST_FIRST = 'Best-first Search';\n\nconst algoFunctions = {\n    [DIJKSTRAS]: dijkstras,\n    [ASTAR]: aStar,\n    [BFS]: bfs,\n    [DFS]: dfs,\n    [BEST_FIRST]: bestFirst\n}\nObject.freeze(algoFunctions);\n\nconst algoSleepTimes = {\n    [DIJKSTRAS]: 2,\n    [ASTAR]: 2,\n    [BFS]: 5,\n    [DFS]: 15,\n    [BEST_FIRST]: 15\n}\nObject.freeze(algoSleepTimes);\n\nexport { DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST, algoFunctions, algoSleepTimes };\n\nconst allPathAlgos = [DIJKSTRAS, ASTAR, BFS, DFS, BEST_FIRST];\nObject.freeze(allPathAlgos);\nconst unweightedPathAlgos = [DFS, BFS];\nObject.freeze(unweightedPathAlgos);\nconst optimalPathAlgos = [DIJKSTRAS, ASTAR, BFS];\nObject.freeze(optimalPathAlgos);\n\nexport { allPathAlgos, unweightedPathAlgos, optimalPathAlgos };\n\n// TERRAIN ALGORTHIM CONSTANTS -------------------------------------------\nconst ALGO1 = \"ALGO 1\";\nconst ALGO2 = \"ALGO 2\";\nconst terrainAlgos = [ALGO1, ALGO2];\nObject.freeze(terrainAlgos);\n\nexport { ALGO1, ALGO2, terrainAlgos };\n\nconst pathfindingAlgoInfo = {\n    [DIJKSTRAS]: {\n        'description': <p>Dijkstra's algorithm to find the shortest path between a and b. It picks the unvisited vertex with the <strong>lowest distance</strong>, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.</p>,\n        'optimality': <p>Dijkstra's is guranteed to find the shortest path.</p>\n    }\n}\nObject.freeze(pathfindingAlgoInfo);\nexport { pathfindingAlgoInfo };\n\n// NODE CONSTANTS ------------------------------------------------------------\nconst nodeTypeEnum = {\n    'path': 0,\n    'visited': 1,\n    'visiting': 2,\n    'none': 3,\n    'target': 4,\n    'start': 5,\n    'remObstacle': 6,\n    'wall': 7,\n    'weighted100': 8,\n    'weighted80': 9,\n    'weighted60': 10,\n    'weighted40': 11,\n    'weighted20': 12\n};\nObject.freeze(nodeTypeEnum);\n\nexport { nodeTypeEnum };\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'none',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.visiting]: 'visiting',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum.weighted100]: 'weighted100',\n    [nodeTypeEnum.weighted80]: 'weighted80',\n    [nodeTypeEnum.weighted60]: 'weighted60',\n    [nodeTypeEnum.weighted40]: 'weighted40',\n    [nodeTypeEnum.weighted20]: 'weighted20'\n}\nObject.freeze(nodeColorClass);\n\nexport { nodeColorClass };\n\nconst EMPTY_NODE_BORDER_COLOR = '#42464c';\nconst nodeColors = {\n    [nodeTypeEnum.none]: '#35393f',\n    [nodeTypeEnum.target]: '#f14846',\n    [nodeTypeEnum.wall]: '#18191c',\n    [nodeTypeEnum.visiting]: '#4988dc',\n    [nodeTypeEnum.start]: '#43b581',\n    [nodeTypeEnum.visited]: '#3f70dd',\n    [nodeTypeEnum.path]: '#f9a719',\n    [nodeTypeEnum.weighted100]: '#1b1c1e',\n    [nodeTypeEnum.weighted80]: '#1c1e21',\n    [nodeTypeEnum.weighted60]: '#222327',\n    [nodeTypeEnum.weighted40]: '#26272b',\n    [nodeTypeEnum.weighted20]: '#2b2c31'\n};\nObject.freeze(nodeColors);\n\nexport { EMPTY_NODE_BORDER_COLOR, nodeColors };\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum.weighted100]: 100,\n    [nodeTypeEnum.weighted80]: 80,\n    [nodeTypeEnum.weighted60]: 60,\n    [nodeTypeEnum.weighted40]: 40,\n    [nodeTypeEnum.weighted20]: 20\n}\nObject.freeze(nodeWeight);\nexport { nodeWeight };\n\n// OBSTACLE TYPES --------------------------------------------------------\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    [obstacleTypes[0]]: nodeColorClass[nodeTypeEnum.wall],\n    [obstacleTypes[1]]: nodeColorClass[nodeTypeEnum.weighted100],\n    [obstacleTypes[2]]: nodeColorClass[nodeTypeEnum.weighted80],\n    [obstacleTypes[3]]: nodeColorClass[nodeTypeEnum.weighted60],\n    [obstacleTypes[4]]: nodeColorClass[nodeTypeEnum.weighted40],\n    [obstacleTypes[5]]: nodeColorClass[nodeTypeEnum.weighted20]\n}\nObject.freeze(obsEnum);\nexport { obstacleTypes, obsEnum };","import { getNeighbourNodes, createPath } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const bfs = (startCord, targetCord, gridState, rows, cols, timeout) => {\n    let queue = [startCord];\n    let visited = { [startCord]: 1 };\n    let prevNodes = {};\n\n    while (queue.length > 0) {\n        const currCord = queue.pop();\n        if (currCord !== startCord && currCord !== targetCord) {\n            const nodeStateFunc = gridState[currCord][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n            }, timeout);\n        }\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            prevNodes[neighbour] = currCord;\n            queue.unshift(neighbour);\n            visited[neighbour] = 1;\n\n            if (neighbour === targetCord) {\n                return createPath(startCord, targetCord, prevNodes);\n            }\n\n            const nodeStateFunc = gridState[neighbour][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n            }, timeout);\n        }\n    }\n\n    return [];\n};\n","import { getNeighbourNodes } from '../../utils/helper.js'\nimport { nodeTypeEnum } from '../../utils/constants.js'\n\nexport const dfs = (startCord, targetCord, gridState, rows, cols, timeout) => {\n    const stack = [startCord];\n    const path = [];\n    const visited = { [startCord]: 1 };\n\n    while (stack.length > 0) {\n        const currCord = stack[0];\n        if (currCord !== targetCord && currCord !== startCord) {\n            const nodeStateFunc = gridState[currCord][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visiting, nodeTypeEnum.none]));\n            }, timeout);\n        }\n\n        if (currCord === targetCord) {\n            stack.pop();\n            stack.shift();\n            return stack;\n        }\n\n        if (currCord !== startCord) {\n            path.unshift(currCord);\n            visited[currCord] = 1;\n            const nodeStateFunc = gridState[currCord][1];\n            setTimeout(() => {\n                nodeStateFunc(prevState => ([nodeTypeEnum.visited, nodeTypeEnum.none]));\n            }, timeout);\n        }\n\n        const neighbours = getNeighbourNodes(currCord, rows, cols, gridState);\n        let unvisitedNeighbourFound = false;\n        for (const neighbour of neighbours) {\n            if (neighbour in visited) {\n                continue;\n            }\n\n            stack.unshift(neighbour);\n            unvisitedNeighbourFound = true;\n            break;\n        }\n\n        if (!unvisitedNeighbourFound) {\n            stack.splice(0, 1);\n        }\n    }\n\n    return [];\n};","import React from 'react'\nimport { useEffect, useState } from 'react'\nimport { EMPTY_NODE_BORDER_COLOR, nodeColors, nodeTypeEnum } from '../utils/constants.js'\nimport { getNodeColor } from '../utils/helper.js'\n\nconst Node = ({ nodeId, size, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle, startingState }) => {\n    const [nodeState, setNodeState] = useState(startingState);\n\n    useEffect(() => {\n        setGridState(prevState => ({ ...prevState, [nodeId]: [startingState, setNodeState] }));\n    }, []);\n\n    const nodeColor = getNodeColor(nodeState);\n    let nodeStyle = {\n        width: size,\n        height: size,\n        backgroundColor: nodeColor,\n        border: `1px solid ${nodeState[0] === nodeTypeEnum.none ? EMPTY_NODE_BORDER_COLOR : nodeColor}`\n    };\n\n    if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n        nodeStyle.cursor = 'grabbing';\n    }\n    else if (draggingSelection === nodeTypeEnum.none && (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target)) {\n        nodeStyle.cursor = 'grab';\n    }\n\n    const mouseDowned = () => {\n        if (nodeState[0] <= nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum[selectedObstacle]);\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n            return;\n        }\n        else if (nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n            setDraggingSelection(nodeTypeEnum.remObstacle);\n            return;\n        }\n        else if (nodeState[0] === nodeTypeEnum.start || nodeState[0] === nodeTypeEnum.target) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === nodeTypeEnum.remObstacle && nodeState[0] >= nodeTypeEnum.wall) {\n            setNodeState(prevState => prevState.slice(1));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState.slice(1), setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum[selectedObstacle] && nodeState[0] <= nodeTypeEnum.none) {\n            setNodeState(prevState => [nodeTypeEnum[selectedObstacle], nodeTypeEnum.none]);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [[nodeTypeEnum[selectedObstacle], nodeTypeEnum.none], setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.start) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => [draggingSelection, ...prevState]);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === nodeTypeEnum.start || draggingSelection === nodeTypeEnum.target) {\n            setNodeState(prevState => prevState.slice(1));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection === nodeTypeEnum.start) {\n            setStartCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        else if (draggingSelection === nodeTypeEnum.target) {\n            setTargetCord(nodeId);\n            setGridState(prevState => ({ ...prevState, [nodeId]: [nodeState, setNodeState] }));\n        }\n        if (draggingSelection !== nodeTypeEnum.none) {\n            setDraggingSelection(nodeTypeEnum.none);\n        }\n    };\n\n    return (\n        <div style={nodeStyle} className={`node ${draggingSelection === nodeTypeEnum.remObstacle && 'erasing'}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n};\n\nexport default Node\n","import Node from './Node.js'\nimport React from 'react'\nimport { useState } from 'react'\nimport { nodeTypeEnum } from '../utils/constants.js'\n\nconst Grid = React.memo(({ rows, cols, padding, nodeSize, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(nodeTypeEnum.none);\n\n    // fill nodes in the grid\n    console.log(\"RERENDERING GRID\");\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            let startingState = [nodeTypeEnum.none];\n            if (x === 0 && y === 0) {\n                startingState.unshift(nodeTypeEnum.start);\n            }\n            else if (x === (rows - 1) && y === (cols - 1)) {\n                startingState.unshift(nodeTypeEnum.target);\n            }\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} startingState={startingState} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n});\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { algoFunctions, nodeTypeEnum, algoSleepTimes } from '../utils/constants.js'\nimport { sleep } from '../utils/helper.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, gridState, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        if (startCord === targetCord) {\n            return;\n        }\n\n        clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        let timeout = 5;\n        path = await algoFunctions[selectedAlgo](startCord, targetCord, gridState, rows, cols, algoSleepTimes[selectedAlgo]);\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            await sleep(timeout);\n            const nodeStateFunc = gridState[path[i]][1];\n            // setTimeout(() => {\n            nodeStateFunc(prevState => ([nodeTypeEnum.path, ...gridState[path[i]][0]]));\n            // }, timeout);\n        }\n\n        setRunningAlgo(false);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","export default __webpack_public_path__ + \"static/media/weight.e51e9729.svg\";","export default __webpack_public_path__ + \"static/media/weight_unfilled.cc3c5f2f.svg\";","export default __webpack_public_path__ + \"static/media/optimal.5649a19a.svg\";","export default __webpack_public_path__ + \"static/media/optimal_unfilled.e461ee2c.svg\";","import { useState, useEffect } from 'react'\nimport { isAlgoUnweighted, isAlgoOptimal } from '../utils/helper.js'\nimport { nodeColors, nodeTypeEnum, obsEnum } from '../utils/constants.js'\nimport downArrow from '../images/down_arrow.svg';\nimport weight from '../images/weight.svg'\nimport weightUnfilled from '../images/weight_unfilled.svg'\nimport optimal from '../images/optimal.svg'\nimport optimalUnfilled from '../images/optimal_unfilled.svg'\n\nconst CustomDropdown = ({ setSelection, items, disabled, dropDownWidth, isAlgoSelector, isObstacleSelector }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n\n    useEffect(() => {\n        if (disabled) {\n            setSelectedVal(items[0]);\n            setSelectedId(0);\n            setDropDownOpen(false);\n            setSelection(items[0]);\n        }\n    }, [disabled])\n\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const style = {\n        width: dropDownWidth\n    }\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div style={style} className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n            {isAlgoSelector && (!isAlgoUnweighted(items[i]) ? <img className=\"algo-property-badge\" src={weight} title={`${items[i]} is a weighted path-finding algorithm.`} alt={`${items[i]} is a weighted path-finding algorithm.`}></img> : <img className=\"algo-property-badge\" src={weightUnfilled} title={`${items[i]} is not a weighted path-finding algorithm.`} alt={`${items[i]} is not a weighted path-finding algorithm.`}></img>)}\n            {isAlgoSelector && (isAlgoOptimal(items[i]) ? <img className=\"algo-property-badge\" src={optimal} title={`${items[i]} guarantees shortest path.`} alt={`${items[i]} guarantees shortest path.`}></img> : <img className=\"algo-property-badge\" src={optimalUnfilled} title={`${items[i]} does not guarantee shortest path.`} alt={`${items[i]} does not guarantee shortest path.`}></img>)}\n            {isObstacleSelector && <div style={{ backgroundColor: nodeColors[nodeTypeEnum[obsEnum[items[i]]]] }} className=\"obstacle-preview\"> </div>}\n        </div >)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div style={style} className={`dropdown-header ${dropDownOpen && 'open'} ${disabled && 'disabled'}`} onClick={disabled ? null : toggle}>\n                {selectedVal}\n                {!disabled && <img className=\"down-arrow\" src={downArrow} alt=\"\"></img>}\n            </div>\n            <div style={{ display: (dropDownOpen ? 'flex' : 'none') }} className='dropdown-list'>\n                {dropdownItems}\n            </div>\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","const ShowInfo = ({ toggleInfoBox }) => {\n    return (\n        <div className={`button blue`} onClick={toggleInfoBox} >\n            Info\n        </div >\n    )\n}\n\nexport default ShowInfo\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport ShowInfo from './ShowInfo.js'\n\nimport { allPathAlgos } from '../utils/constants.js'\n\nconst ChooseAlgorithm = ({ rows, cols, gridState, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={allPathAlgos} disabled={false} dropDownWidth={dropDownWidth} isAlgoSelector={true} isObstacleSelector={false} />\n            <ShowInfo toggleInfoBox={toggleInfoBox} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { terrainAlgos } from '../utils/constants.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo, dropDownWidth }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(terrainAlgos[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={terrainAlgos} disabled={false} dropDownWidth={dropDownWidth} isAlgoSelector={false} isObstacleSelector={false} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { obstacleTypes, obsEnum } from '../utils/constants.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle, weightedObsDisabled, dropDownWidth }) => {\n    const setObstacle = (obstacleName) => {\n        console.log(\"selected obs: \", obsEnum[obstacleName]);\n        setSelectedObstacle(obsEnum[obstacleName]);\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={obstacleTypes} disabled={weightedObsDisabled} dropDownWidth={dropDownWidth} isAlgoSelector={false} isObstacleSelector={true} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, gridState, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle, weightedObsDisabled, toggleInfoBox, selectedAlgo, setSelectedAlgo }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={250} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={setSelectedAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} dropDownWidth={190} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} dropDownWidth={150} />\n        </div>\n    )\n}\n\nexport default Header\n","export default __webpack_public_path__ + \"static/media/close.494fd48f.svg\";","import { useState } from 'react'\nimport closeIcon from '../images/close.svg'\nimport { pathfindingAlgoInfo } from '../utils/constants.js'\n\nconst InfoBox = ({ infoBoxOpen, toggleInfoBox, selectedAlgo }) => {\n    const [dragging, setDragging] = useState(false);\n    const [boxCord, setBoxCord] = useState([300, 0]);\n\n    const enableDragging = (e) => {\n        setDragging(true);\n    };\n\n    const beingDragged = (e) => {\n        if (dragging) {\n            setBoxCord(prevState => [prevState[0] + e.movementX, prevState[1] + e.movementY]);\n        }\n    };\n\n    const disableDragging = (e) => {\n        setDragging(false);\n    };\n\n    return (\n        <div style={{ left: `${boxCord[0]}px`, top: `${boxCord[1]}px` }} className={`info-box ${infoBoxOpen ? 'visible' : 'hidden'}`} onMouseMove={beingDragged} onMouseUp={disableDragging} onMouseLeave={disableDragging}>\n            <img className='close-info-icon' src={closeIcon} onClick={toggleInfoBox} alt='Close info box' />\n            <h1 onMouseDown={enableDragging} >{selectedAlgo}</h1>\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].description) || <p>No information.</p>}\n            {(pathfindingAlgoInfo[selectedAlgo] && pathfindingAlgoInfo[selectedAlgo].optimality)}\n        </div >\n    )\n}\n\nexport default InfoBox\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport InfoBox from './components/InfoBox.js'\n\nimport { allPathAlgos, nodeTypeEnum } from './utils/constants.js'\nimport { useState, useEffect } from 'react'\nimport { isAlgoUnweighted } from './utils/helper.js'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [infoBoxOpen, setInfoBoxOpen] = useState(false);\n  const [selectedAlgo, setSelectedAlgo] = useState(allPathAlgos[0]);\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const [weightedObsDisabled, setWeightedObsDisabled] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    console.log(\"RESETTING BOARD\");\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const currRows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const currCols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(currRows);\n    setCols(currCols);\n    setStartCord('0:0');\n    setTargetCord(`${currRows - 1}:${currCols - 1}`);\n  };\n\n  const clearPath = () => {\n    console.log(\"CLEARING PATH\");\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] <= nodeTypeEnum.visiting)) {\n          nodeState.splice(1, 1);\n        }\n        nodeStateFunc(prevState => nodeState);\n      }\n    }\n  };\n\n  const clearObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] >= nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState >= nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const clearWeightedObstacles = () => {\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        let nodeState = gridState[id][0];\n        let nodeStateFunc = gridState[id][1];\n        let currState = nodeState[0];\n\n        // check under start and target node for weighted obstacle\n        if ((currState === nodeTypeEnum.start || currState === nodeTypeEnum.target) && (nodeState[1] > nodeTypeEnum.wall)) {\n          nodeState.splice(1, 1);\n          nodeStateFunc(prev => nodeState);\n          setGridState(prevState => ({ ...prevState, [id]: [nodeState, prevState[id][1]] }));\n          continue;\n        }\n\n        if (currState <= nodeTypeEnum.visiting) {\n          currState = nodeState[1];\n        }\n\n        if (currState > nodeTypeEnum.wall) {\n          nodeStateFunc(prev => [nodeTypeEnum.none]);\n          setGridState(prevState => ({ ...prevState, [id]: [[nodeTypeEnum.none], prevState[id][1]] }));\n        }\n      }\n    }\n  };\n\n  const toggleInfoBox = () => {\n    setInfoBoxOpen(prevState => !prevState);\n  };\n\n  const alteredSetSelectedAlgo = (algoName) => {\n    const unweightedAlgo = isAlgoUnweighted(algoName);\n    setWeightedObsDisabled(unweightedAlgo);\n    setSelectedAlgo(algoName);\n    if (unweightedAlgo) {\n      clearPath();\n      clearWeightedObstacles();\n    }\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} gridState={gridState} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} weightedObsDisabled={weightedObsDisabled} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} setSelectedAlgo={alteredSetSelectedAlgo} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n      <InfoBox infoBoxOpen={infoBoxOpen} toggleInfoBox={toggleInfoBox} selectedAlgo={selectedAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}