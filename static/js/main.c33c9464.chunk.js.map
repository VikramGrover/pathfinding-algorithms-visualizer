{"version":3,"sources":["algorithms/path_finding/dijkstras.js","utils/util.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","components/Visualize.js","images/down_arrow.svg","components/CustomDropdown.js","components/ChooseAlgorithm.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["dijkstras","startCord","targetCord","gridState","setGridState","rows","cols","totalCosts","prevNodes","minPQ","visited","x","y","cord","Infinity","minKey","findMinPriorityNode","setTimeout","prevState","getNodeTypeEnum","createPath","neighbours","getNeighbourNodes","neighbour","currPath","getNodeWeight","Object","keys","length","path","push","node","row","parseInt","split","col","res","shuffleArray","minPriority","Math","min","values","key","nodeTypeEnum","freeze","nodeColorClass","none","target","obstacle","start","nodeWeight","pathAlgos","array","i","j","floor","random","temp","getPathAlgos","Node","React","memo","nodeId","size","nodeState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","nodeDim","width","height","style","className","onMouseDown","console","log","slice","onMouseUp","onMouseEnter","onMouseLeave","Grid","padding","nodeSize","selectedObstacle","useState","nodes","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","resetBoard","onClick","Clear","clearObstacles","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","CustomDropdown","setSelection","items","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","dropdownItems","id","src","downArrow","ChooseAlgorithm","setSelectedAlgo","Header","App","setSelectedObstacle","setRows","setCols","useEffect","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","unshift","change","currState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c33c9464.chunk.js","sourcesContent":["import { getNodeTypeEnum, getNodeWeight, shuffleArray } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    if (startCord === targetCord) {\n        return [];\n    }\n\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [getNodeTypeEnum('visited')] }));\n            }, 1);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n            }\n        }\n    }\n\n    return [];\n};\n\nconst createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nconst getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('obstacle'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('obstacle'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('obstacle'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('obstacle'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    shuffleArray(res);\n    return res;\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\n\nconst nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'obstacle': 6\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.obstacle]: 'obstacle',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.obstacle]: Infinity,\n    [nodeTypeEnum.start]: 1\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"Breadth First Search\", \"Depth First Search\"];\n\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const runPathAlgo = (selectedAlgo, startCord, targetCord, updatedGridState, setGridState, rows, cols) => {\n    switch (selectedAlgo) {\n        case \"Dijkstra's\":\n            return dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n    }\n};\n","import React from 'react'\nimport { getNodeColorClass, getNodeTypeEnum } from '../utils/util.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        console.log(\"HEELLLLLLOOOO\");\n        if (nodeState[0] === getNodeTypeEnum('none') || nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited')) {\n\n            setDraggingSelection(getNodeTypeEnum('obstacle'));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), getNodeTypeEnum('none')] }));\n            return;\n        }\n        else if (nodeState[0] === getNodeTypeEnum('obstacle')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(getNodeTypeEnum('remObstacle'));\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === getNodeTypeEnum('remObstacle') && nodeState[0] >= getNodeTypeEnum('obstacle')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('obstacle') && nodeState[0] !== getNodeTypeEnum('start') && nodeState[0] !== getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('obstacle'), getNodeTypeEnum('none')] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${getNodeColorClass(nodeState[0])}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n    // fill nodes in the grid\n    console.log(\"RERENDERING GRID\");\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ resetBoard, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : resetBoard}>\n            Reset Grid\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Clear\n","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { getNodeTypeEnum, runPathAlgo } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        const updatedGridState = clearForReRun();\n\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        switch (selectedAlgo) {\n            case \"Dijkstra's\":\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path')] }));\n            }, 1);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, 1);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","import { useState } from 'react'\nimport downArrow from '../images/down_arrow.svg';\n\nconst CustomDropdown = ({ setSelection, items }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div className={`dropdown-list-item ${i === selectedId && 'selected'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div className={`dropdown-header ${dropDownOpen && 'open'}`} onClick={toggle}>\n                {selectedVal}\n                <img className=\"down-arrow\" src={downArrow}></img>\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos } from '../utils/util.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const [selectedAlgo, setSelectedAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={getPathAlgos()} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, resetBoard, clearObstacles, clearForReRun }) => {\n    const style = {\n        padding: padding,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset resetBoard={resetBoard} runningAlgo={runningAlgo} />\n            <Clear clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div>\n    )\n}\n\nexport default Header\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState({});\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n\n    let defaultSelectedObstacle = {\n      'obstacle': false\n    };\n\n    setSelectedObstacle(defaultSelectedObstacle);\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState >= getNodeTypeEnum('obstacle')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearForReRun = () => {\n    console.log('CLEARING GRID FOR RE RERUN');\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('path')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      console.log(\"DONE CLEARING FOR RE RUN\")\n      setGridState(prevState => (gridMap));\n    }\n\n    setRunningAlgo(true);\n    return gridMap;\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} resetBoard={resetBoard} clearObstacles={clearObstacles} clearForReRun={clearForReRun} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}