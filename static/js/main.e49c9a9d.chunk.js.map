{"version":3,"sources":["utils/util.js","components/Node.js","components/Grid.js","components/Reset.js","components/Clear.js","algorithms/path_finding/dijkstras.js","components/Visualize.js","images/down_arrow.svg","components/CustomDropdown.js","components/ChooseAlgorithm.js","components/ChooseTerrain.js","components/ChooseObstacle.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["nodeTypeEnum","Object","freeze","nodeColorClass","none","target","wall","start","visited","path","nodeWeight","Infinity","pathAlgos","terrainAlgos","obstacleTypes","obsEnum","getNodeTypeEnum","key","getPathAlgos","Node","React","memo","nodeId","size","nodeState","setGridState","draggingSelection","setDraggingSelection","setStartCord","setTargetCord","runningAlgo","selectedObstacle","nodeDim","width","height","style","className","onMouseDown","prevState","slice","onMouseUp","onMouseEnter","onMouseLeave","Grid","rows","cols","padding","nodeSize","gridState","useState","nodes","x","y","push","gridDimensions","containerStyle","paddingLeft","paddingRight","Reset","clearObstacles","onClick","Clear","clearPath","dijkstras","startCord","targetCord","totalCosts","prevNodes","minPQ","cord","minKey","findMinPriorityNode","setTimeout","createPath","neighbours","getNeighbourNodes","neighbour","currPath","keys","length","node","row","parseInt","split","col","res","array","i","j","Math","floor","random","temp","shuffleArray","minPriority","min","values","Visualize","selectedAlgo","clearForReRun","setRunningAlgo","run","a","updatedGridState","console","log","CustomDropdown","setSelection","items","dropDownOpen","setDropDownOpen","selectedVal","setSelectedVal","selectedId","setSelectedId","dropdownItems","id","src","downArrow","ChooseAlgorithm","setSelectedAlgo","ChooseTerrain","selectedTerrainAlgo","setSelectedTerrainAlgo","ChooseObstacle","setSelectedObstacle","obstacleName","Header","paddingBottom","App","setRows","setCols","useEffect","resetBoard","adjustedWinHeight","window","innerHeight","adjustedWinWidth","innerWidth","gridMap","unshift","change","currState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAAMA,EAAe,CACjB,KAAQ,EACR,OAAU,EACV,KAAQ,EACR,MAAS,EACT,YAAe,EACf,QAAW,EACX,KAAQ,EACR,eAAgB,EAChB,cAAe,EACf,cAAe,EACf,cAAe,GACf,cAAe,IAEnBC,OAAOC,OAAOF,GAEd,IAAMG,GAAc,mBACfH,EAAaI,KAAO,SADL,cAEfJ,EAAaK,OAAS,UAFP,cAGfL,EAAaM,KAAO,QAHL,cAIfN,EAAaO,MAAQ,SAJN,cAKfP,EAAaQ,QAAU,WALR,cAMfR,EAAaS,KAAO,QANL,cAOfT,EAAa,gBAAkB,gBAPhB,cAQfA,EAAa,eAAiB,eARf,cASfA,EAAa,eAAiB,eATf,cAUfA,EAAa,eAAiB,eAVf,cAWfA,EAAa,eAAiB,eAXf,GAapBC,OAAOC,OAAOC,GAEd,IAAMO,GAAU,mBACXV,EAAaI,KAAO,GADT,cAEXJ,EAAaK,OAAS,GAFX,cAGXL,EAAaM,KAAOK,KAHT,cAIXX,EAAaO,MAAQ,GAJV,cAKXP,EAAa,gBAAkB,KALpB,cAMXA,EAAa,eAAiB,IANnB,cAOXA,EAAa,eAAiB,IAPnB,cAQXA,EAAa,eAAiB,IARnB,cASXA,EAAa,eAAiB,IATnB,GAWhBC,OAAOC,OAAOQ,GAEd,IAAME,EAAY,CAAC,aAAc,SAAU,MAAO,OAC5CC,EAAe,CAAC,SAAU,UAC1BC,EAAgB,CAAC,gBAAY,iBAAkB,gBAAiB,gBAAiB,gBAAiB,iBAClGC,EAAU,CACZ,gBAAY,OACZ,iBAAkB,eAClB,gBAAiB,cACjB,gBAAiB,cACjB,gBAAiB,cACjB,gBAAiB,eAERC,EAAkB,SAACC,GAC5B,OAAOjB,EAAaiB,IAoBXC,EAAe,WACxB,OAAON,G,OCjBIO,EAzDFC,IAAMC,MAAK,YAAqJ,IDwD3IJ,ECxDPK,EAAiJ,EAAjJA,OAAQC,EAAyI,EAAzIA,KAAMC,EAAmI,EAAnIA,UAAWC,EAAwH,EAAxHA,aAAcC,EAA0G,EAA1GA,kBAAmBC,EAAuF,EAAvFA,qBAAsBC,EAAiE,EAAjEA,aAAcC,EAAmD,EAAnDA,cAAeC,EAAoC,EAApCA,YAAaC,EAAuB,EAAvBA,iBAC3IC,EAAU,CACZC,MAAOV,EACPW,OAAQX,GAgDZ,OACI,qBAAKY,MAAK,eAAOH,GAAWI,UAAS,gBDIXnB,ECJuCO,EAAU,GDKxErB,EAAec,KCLgEoB,YAAaP,EAAc,KA9C7F,WAChB,OAAIN,EAAU,KAAOR,EAAgB,SAAWQ,EAAU,KAAOR,EAAgB,SAAWQ,EAAU,KAAOR,EAAgB,YACzHW,EAAqBX,EAAgBe,SACrCN,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAS,CAACN,EAAgBe,GAAmBf,EAAgB,eAGpGQ,EAAU,IAAMR,EAAgB,SACrCS,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,aAC7EZ,EAAqBX,EAAgB,sBAIzCW,EAAqBH,EAAU,KAkCkGgB,UAAWV,EAAc,KAP5I,WACVJ,IAAsBV,EAAgB,SACtCW,EAAqBX,EAAgB,UAKmIyB,aAAcX,EAAc,KA/BvL,WACbJ,IAAsBV,EAAgB,gBAAkBQ,EAAU,IAAMR,EAAgB,QACxFS,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,QAExEb,IAAsBV,EAAgBe,IAAsBP,EAAU,KAAOR,EAAgB,SAAWQ,EAAU,KAAOR,EAAgB,YAAcQ,EAAU,KAAOR,EAAgB,QAGxLU,IAAsBV,EAAgB,UAC3CS,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAtB,CAAgCN,EAAgB,UAAhD,mBAA6DsB,EAAUhB,UAC7FM,EAAaN,IAERI,IAAsBV,EAAgB,YAC3CS,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAtB,CAAgCN,EAAgB,WAAhD,mBAA8DsB,EAAUhB,UAC9FO,EAAcP,IARdG,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAAS,CAACN,EAAgBe,GAAmBf,EAAgB,eA0BgH0B,aAAcZ,EAAc,KAd3O,WACVJ,IAAsBV,EAAgB,UAAYU,IAAsBV,EAAgB,WACxFS,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBhB,EAASgB,EAAUhB,GAAQiB,MAAM,cCH1EI,EApCF,SAAC,GAKV,IALsI,IAA1HC,EAAyH,EAAzHA,KAAMC,EAAmH,EAAnHA,KAAMC,EAA6G,EAA7GA,QAASC,EAAoG,EAApGA,SAAUC,EAA0F,EAA1FA,UAAWvB,EAA+E,EAA/EA,aAAcM,EAAiE,EAAjEA,iBAAkBH,EAA+C,EAA/CA,aAAcC,EAAiC,EAAjCA,cAAeC,EAAkB,EAAlBA,YAAkB,EACnFmB,mBAASjC,EAAgB,SAD0D,mBAC9HU,EAD8H,KAC3GC,EAD2G,KAI/HuB,EAAQ,GACLC,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3B,IAAI9B,EAAM,UAAM6B,EAAN,YAAWC,GAErBF,EAAMG,KAAK,cAAC,EAAD,CAAM/B,OAAQA,EACrBC,KAAMwB,EAAUvB,UAAWwB,EAAU1B,GAASG,aAAcA,EAC5DC,kBAAmBA,EACnBC,qBAAsBA,EACtBC,aAAcA,EAAcC,cAAeA,EAAeC,YAAaA,EAAaC,iBAAkBA,GAAuBT,IAIzI,IAAMgC,EAAiB,CACnBrB,MAAQY,EAAOE,EAAYF,EAC3BX,OAASU,EAAOG,EAAYH,GAG1BW,EAAiB,CACnBC,YAAaV,EACbW,aAAcX,GAGlB,OACI,qBAAKX,MAAOoB,EAAZ,SACI,qBAAKnB,UAAU,OAAOD,MAAOmB,EAA7B,SACKJ,OC1BFQ,EARD,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,eAAgB7B,EAAkB,EAAlBA,YAC7B,OACI,qBAAKM,UAAS,iBAAYN,EAAc,WAAa,OAAS8B,QAAS9B,EAAc,KAAO6B,EAA5F,8BCQOE,EARD,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,UAAWhC,EAAkB,EAAlBA,YACxB,OACI,qBAAKM,UAAS,iBAAYN,EAAc,WAAa,UAAY8B,QAAS9B,EAAc,KAAOgC,EAA/F,yB,gCCFKC,EAAY,SAACC,EAAWC,EAAYjB,EAAWvB,EAAcmB,EAAMC,GAC5E,GAAImB,IAAcC,EACd,MAAO,GAGX,IAAIC,EAAa,GACbC,EAAY,GACZC,EAAQ,GACR5D,EAAU,GAEd0D,EAAWF,GAAa,EACxBI,EAAMJ,GAAa,EAEnB,IAAK,IAAIb,EAAI,EAAGA,EAAIP,EAAMO,IACtB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC3B,IAAIiB,EAAI,UAAMlB,EAAN,YAAWC,GAEfiB,IAASL,IACTE,EAAWG,GAAQ1D,KAK/B,IAvBqF,iBAwBjF,IAAM2D,EAASC,EAAoBH,GAInC,UAHOA,EAAME,GACb9D,EAAQ8D,GAAU,EAEdA,IAAWN,GAAaM,IAAWL,EACnCO,YAAW,WACP/C,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsBgC,EAAtB,CAAgCtD,EAAgB,YAAhD,mBAA+DsB,EAAUgC,YAChG,QAEF,GAAIA,IAAWL,EAChB,MAAM,CAAN,EAAOQ,EAAWT,EAAWC,EAAYE,IAG7C,IArCiF,EL6D3DlD,EKxBhByD,EAAaC,EAAkBL,EAAQ1B,EAAMC,EAAMG,GArCwB,cAsCzD0B,GAtCyD,IAsCjF,2BAAoC,CAAC,IAA1BE,EAAyB,QAC1BC,EAAWX,EAAWI,ILsBVrD,EKtBkC+B,EAAU4B,GAAW,GLuB1ElE,EAAWO,IKrBN2D,KAAapE,IAIXoE,KAAaR,GAAUS,EAAWX,EAAWU,MAAiBA,KAAaR,MAC7EF,EAAWU,GAAaC,EACxBV,EAAUS,GAAaN,EACvBF,EAAMQ,GAAaC,IAhDsD,gCAuB9E5E,OAAO6E,KAAKV,GAAOW,OAAS,GAAG,CAAC,IAAD,wCA8BtC,MAAO,IAGLN,EAAa,SAACT,EAAWC,EAAYE,GAIvC,IAHA,IAAIE,EAAOJ,EACPxD,EAAO,IAGP4D,EAAOF,EAAUE,MAEJL,GAIbvD,EAAK4C,KAAKgB,GAGd,OAAO5D,GAGLkE,EAAoB,SAACK,EAAMpC,EAAMC,EAAMG,GACzC,IAAMiC,EAAMC,SAASF,EAAKG,MAAM,KAAK,IAC/BC,EAAMF,SAASF,EAAKG,MAAM,KAAK,IAEjCE,EAAM,GAeV,OAdKD,EAAM,EAAIvC,GAAUG,EAAU,GAAD,OAAIiC,EAAJ,YAAWG,EAAM,IAAK,KAAOpE,EAAgB,SAC3EqE,EAAIhC,KAAJ,UAAY4B,EAAZ,YAAmBG,EAAM,IAExBH,EAAM,GAAK,GAAOjC,EAAU,GAAD,OAAIiC,EAAM,EAAV,YAAeG,IAAO,KAAOpE,EAAgB,SACzEqE,EAAIhC,KAAJ,UAAY4B,EAAM,EAAlB,YAAuBG,IAEtBH,EAAM,EAAKrC,GAASI,EAAU,GAAD,OAAIiC,EAAM,EAAV,YAAeG,IAAO,KAAOpE,EAAgB,SAC3EqE,EAAIhC,KAAJ,UAAY4B,EAAM,EAAlB,YAAuBG,IAEtBA,EAAM,GAAK,GAAOpC,EAAU,GAAD,OAAIiC,EAAJ,YAAWG,EAAM,IAAK,KAAOpE,EAAgB,SACzEqE,EAAIhC,KAAJ,UAAY4B,EAAZ,YAAmBG,EAAM,ILvBL,SAACE,GACzB,IAAK,IAAIC,EAAID,EAAMP,OAAS,EAAGQ,EAAI,EAAGA,IAAK,CACvC,IAAIC,EAAIC,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCK,EAAON,EAAMC,GACjBD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKI,GKqBfC,CAAaR,GACNA,GAGLd,EAAsB,SAACH,GACzB,IAAI0B,EAAcL,KAAKM,IAAL,MAAAN,KAAI,YAAQxF,OAAO+F,OAAO5B,KAE5C,IAAK,IAAMnD,KAAOmD,EACd,GAAIA,EAAMnD,KAAS6E,EACf,OAAO7E,GClEJgF,EAjCG,SAAC,GAAmH,IAAjHrD,EAAgH,EAAhHA,KAAMC,EAA0G,EAA1GA,KAAMqD,EAAoG,EAApGA,aAAczE,EAAsF,EAAtFA,aAAcuC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,WAAYkC,EAAiD,EAAjDA,cAAerE,EAAkC,EAAlCA,YAAasE,EAAqB,EAArBA,eACtGC,EAAG,uCAAG,kCAAAC,EAAA,sDACFC,EAAmBJ,IACzBC,GAAe,GACfI,QAAQC,IAAI,aAAcP,GAEtBzF,EAAO,GALH,KAMAyF,EANA,OAOC,eAPD,6BAQAzF,EAAOsD,EAAUC,EAAWC,EAAYsC,EAAkB9E,EAAcmB,EAAMC,GAR9E,2BAcR,IAFA2D,QAAQC,IAAI,UAAWP,GAZf,WAcCX,GACLf,YAAW,WACP/C,GAAa,SAAAa,GAAS,kCAAUA,GAAV,kBAAsB7B,EAAK8E,GAA3B,CAAiCvE,EAAgB,SAAjD,mBAA6DuF,EAAiB9F,EAAK8E,aAC1G,IAHEA,EAAI9E,EAAKsE,OAAS,EAAGQ,GAAK,EAAGA,IAAM,EAAnCA,GAMTf,YAAW,WACP4B,GAAe,KAChB,GAtBK,4CAAH,qDAyBT,OACI,qBAAKhE,UAAS,iBAAYN,EAAc,WAAa,SAAW8B,QAAS9B,EAAc,KAAOuE,EAA9F,kBC9BO,MAA0B,uCCwC1BK,EArCQ,SAAC,GAgBpB,IAhBiD,IAA3BC,EAA0B,EAA1BA,aAAcC,EAAY,EAAZA,MAAY,EACR3D,oBAAS,GADD,mBACzC4D,EADyC,KAC3BC,EAD2B,OAEV7D,mBAAS2D,EAAM,IAFL,mBAEzCG,EAFyC,KAE5BC,EAF4B,OAGZ/D,mBAAS,GAHG,mBAGzCgE,EAHyC,KAG7BC,EAH6B,KAe1CC,EAAgB,GAf0B,WAgBvC5B,GACL4B,EAAc9D,KAAK,qBAAKjB,UAAS,6BAAwBmD,IAAM0B,GAAc,WAA5C,YAA0D1B,IAAMqB,EAAM7B,OAAS,GAAK,QAAUnB,QAAS,WATtH,IAACwD,IAS2I7B,EAR9JuB,GAAgB,SAAAxE,GAAS,OAAKA,KAC9B0E,EAAeJ,EAAMQ,IACrBF,EAAcE,GACdT,EAAaC,EAAMQ,KAKA,SACdR,EAAMrB,IAD8JA,KADpKA,EAAI,EAAGA,EAAIqB,EAAM7B,OAAQQ,IAAM,EAA/BA,GAMT,OACI,sBAAKnD,UAAU,WAAf,UACI,sBAAKA,UAAS,0BAAqByE,GAAgB,QAAUjD,QApBtD,WACXkD,GAAgB,SAAAxE,GAAS,OAAKA,MAmB1B,UACKyE,EACD,qBAAK3E,UAAU,aAAaiF,IAAKC,OAEpCT,GACG,qBAAKzE,UAAU,gBAAf,SACK+E,QCjBNI,EAXS,SAAC,GAAqG,IAAnG3E,EAAkG,EAAlGA,KAAMC,EAA4F,EAA5FA,KAAMpB,EAAsF,EAAtFA,aAAcuC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,WAAYkC,EAAiD,EAAjDA,cAAerE,EAAkC,EAAlCA,YAAasE,EAAqB,EAArBA,eAAqB,EACjFnD,mBAAS/B,IAAe,IADyD,mBAClHgF,EADkH,KACpGsB,EADoG,KAGzH,OACI,sBAAKpF,UAAS,cAAd,UACI,cAAC,EAAD,CAAgBuE,aAAca,EAAiBZ,MAAO1F,MACtD,cAAC,EAAD,CAAW0B,KAAMA,EAAMC,KAAMA,EAAMqD,aAAcA,EAAczE,aAAcA,EAAcuC,UAAWA,EAAWC,WAAYA,EAAYkC,cAAeA,EAAerE,YAAaA,EAAasE,eAAgBA,QCK9MqB,EAXO,SAAC,GAAqG,IAAnG7E,EAAkG,EAAlGA,KAAMC,EAA4F,EAA5FA,KAAMpB,EAAsF,EAAtFA,aAAcuC,EAAwE,EAAxEA,UAAWC,EAA6D,EAA7DA,WAAYkC,EAAiD,EAAjDA,cAAerE,EAAkC,EAAlCA,YAAasE,EAAqB,EAArBA,eAAqB,EACjEnD,mBAAS/B,IAAe,IADyC,mBAChHwG,EADgH,KAC3FC,EAD2F,KAGvH,OACI,sBAAKvF,UAAS,iBAAd,UACI,cAAC,EAAD,CAAgBuE,aAAcgB,EAAwBf,MVuEvD/F,IUtEC,cAAC,EAAD,CAAW+B,KAAMA,EAAMC,KAAMA,EAAMqD,aAAcwB,EAAqBjG,aAAcA,EAAcuC,UAAWA,EAAWC,WAAYA,EAAYkC,cAAeA,EAAerE,YAAaA,EAAasE,eAAgBA,QCIrNwB,EAZQ,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAKtB,OACI,qBAAKzF,UAAS,kBAAd,SACI,cAAC,EAAD,CAAgBuE,aANJ,SAACmB,GACjBD,EXoFG9G,EWpFiC+G,KAKWlB,MX2E5C9F,OY7DIiH,EAlBA,SAAC,GAAuJ,IAArJnF,EAAoJ,EAApJA,KAAMC,EAA8I,EAA9IA,KAAMf,EAAwI,EAAxIA,YAAasE,EAA2H,EAA3HA,eAAgBtD,EAA2G,EAA3GA,QAASZ,EAAkG,EAAlGA,OAAQT,EAA0F,EAA1FA,aAAcuC,EAA4E,EAA5EA,UAAWC,EAAiE,EAAjEA,WAAYN,EAAqD,EAArDA,eAAgBG,EAAqC,EAArCA,UAAW+D,EAA0B,EAA1BA,oBAClI1F,EAAQ,CACVW,QAASA,EACTkF,cAAelF,EAAU,EACzBZ,OAAQA,GAGZ,OACI,sBAAKC,MAAOA,EAAOC,UAAU,SAA7B,UACI,cAAC,EAAD,CAAOuB,eAAgBA,EAAgB7B,YAAaA,IACpD,cAAC,EAAD,CAAOgC,UAAWA,EAAWhC,YAAaA,IAC1C,cAAC,EAAD,CAAiBc,KAAMA,EAAMC,KAAMA,EAAMpB,aAAcA,EAAcuC,UAAWA,EAAWC,WAAYA,EAAYkC,cAAerC,EAAWhC,YAAaA,EAAasE,eAAgBA,IACvL,cAAC,EAAD,CAAexD,KAAMA,EAAMC,KAAMA,EAAMpB,aAAcA,EAAcuC,UAAWA,EAAWC,WAAYA,EAAYkC,cAAerC,EAAWhC,YAAaA,EAAasE,eAAgBA,IACrL,cAAC,EAAD,CAAgByB,oBAAqBA,QC2HlCI,MAzIf,WAAgB,IAAD,EACqBhF,mBAAS,IAD9B,mBACND,EADM,KACKvB,EADL,OAEmCwB,mBAAS,QAF5C,mBAENlB,EAFM,KAEY8F,EAFZ,OAGW5E,mBAAS,GAHpB,mBAGNL,EAHM,KAGAsF,EAHA,OAIWjF,mBAAS,GAJpB,mBAINJ,EAJM,KAIAsF,EAJA,OAKqBlF,mBAAS,OAL9B,mBAKNe,EALM,KAKKpC,EALL,OAMuBqB,mBAAS,OANhC,mBAMNgB,EANM,KAMMpC,EANN,OAOyBoB,oBAAS,GAPlC,mBAONnB,EAPM,KAOOsE,EAPP,KAYbgC,qBAAU,WACRC,MACC,IAOH,IAAMA,EAAa,WACjB,IAAMC,EAAoBC,OAAOC,YAAP,IACpBC,EAAmBF,OAAOG,WAAc,GAExC9F,EAAOsC,SAASoD,EAAiB,IACjCzF,EAAOqC,SAASuD,EAAgB,IAEtCrC,GAAe,GACf8B,EAAQtF,GACRuF,EAAQtF,GACRjB,EAAa,OACbC,EAAc,GAAD,OAAIe,EAAO,EAAX,YAAgBC,EAAO,IAGpC,IADA,IAAI8F,EAAU,GACLxF,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAI5B,EAAY,CAACR,EAAgB,SACvB,IAANmC,GAAiB,IAANC,EACb5B,EAAUoH,QAAQ5H,EAAgB,UAE3BmC,IAAOP,EAAO,GAAMQ,IAAOP,EAAO,GACzCrB,EAAUoH,QAAQ5H,EAAgB,WAGpC2H,EAAQ,GAAD,OAAIxF,EAAJ,YAASC,IAAO5B,EAI3BC,EAAakH,IAgFf,OACE,qCACE,cAAC,EAAD,CAAQ/F,KAAMA,EAAMC,KAAMA,EAAMf,YAAaA,EAAasE,eAAgBA,EAAgBtD,QA3H/E,GA2HgGZ,OAzH1F,GAyHgHT,aAAcA,EAAcuC,UAAWA,EAAWC,WAAYA,EAAYN,eAvDxL,WAIrB,IAHA,IAAIgF,EAAU,GACVE,GAAS,EAEJ1F,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAIgE,EAAE,UAAMjE,EAAN,YAAWC,GACjBuF,EAAQvB,GAAMpE,EAAUoE,GACxB,IAAI0B,EAAY9F,EAAUoE,GAAI,GAE1B0B,IAAc9H,EAAgB,SAAW8H,IAAc9H,EAAgB,aACzE8H,EAAY9F,EAAUoE,GAAI,IAGxB0B,GAAa9H,EAAgB,UAC/B2H,EAAQvB,GAAM,CAACpG,EAAgB,SAC/B6H,GAAS,GAKXA,GACFpH,GAAa,SAAAa,GAAS,OAAKqG,MAiCgN7E,UA/E7N,WAIhB,IAHA,IAAI6E,EAAU,GACVE,GAAS,EAEJ1F,EAAI,EAAGA,EAAIP,EAAMO,IACxB,IAAK,IAAIC,EAAI,EAAGA,EAAIP,EAAMO,IAAK,CAC7B,IAAIgE,EAAE,UAAMjE,EAAN,YAAWC,GACjBuF,EAAQvB,GAAMpE,EAAUoE,GACxB,IAAI0B,EAAY9F,EAAUoE,GAAI,GAE1B0B,IAAc9H,EAAgB,SAAW8H,IAAc9H,EAAgB,aACzE2H,EAAQvB,GAAMuB,EAAQvB,GAAI7E,MAAM,GAChCsG,GAAS,GASf,OAJIA,GACFpH,GAAa,SAAAa,GAAS,OAAKqG,KAGtBA,GA0D4Pd,oBAAqBA,IACtR,cAAC,EAAD,CAAMjF,KAAMA,EAAMC,KAAMA,EAAMC,QA5HnB,GA4HoCC,SA3HlC,GA2HsDC,UAAWA,EAAWvB,aAAcA,EAAcM,iBAAkBA,EAAkBH,aAAcA,EAAcC,cAAeA,EAAeC,YAAaA,QC7HvNiH,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e49c9a9d.chunk.js","sourcesContent":["const nodeTypeEnum = {\n    'none': 0,\n    'target': 1,\n    'path': 2,\n    'start': 3,\n    'remObstacle': 4,\n    'visited': 5,\n    'wall': 6,\n    'weighted-100': 7,\n    'weighted-80': 8,\n    'weighted-60': 9,\n    'weighted-40': 10,\n    'weighted-20': 11\n};\nObject.freeze(nodeTypeEnum);\n\nconst nodeColorClass = {\n    [nodeTypeEnum.none]: 'empty',\n    [nodeTypeEnum.target]: 'target',\n    [nodeTypeEnum.wall]: 'wall',\n    [nodeTypeEnum.start]: 'start',\n    [nodeTypeEnum.visited]: 'visited',\n    [nodeTypeEnum.path]: 'path',\n    [nodeTypeEnum[\"weighted-100\"]]: 'weighted-100',\n    [nodeTypeEnum[\"weighted-80\"]]: 'weighted-80',\n    [nodeTypeEnum[\"weighted-60\"]]: 'weighted-60',\n    [nodeTypeEnum[\"weighted-40\"]]: 'weighted-40',\n    [nodeTypeEnum[\"weighted-20\"]]: 'weighted-20'\n}\nObject.freeze(nodeColorClass);\n\nconst nodeWeight = {\n    [nodeTypeEnum.none]: 1,\n    [nodeTypeEnum.target]: 1,\n    [nodeTypeEnum.wall]: Infinity,\n    [nodeTypeEnum.start]: 1,\n    [nodeTypeEnum[\"weighted-100\"]]: 100,\n    [nodeTypeEnum[\"weighted-80\"]]: 80,\n    [nodeTypeEnum[\"weighted-60\"]]: 60,\n    [nodeTypeEnum[\"weighted-40\"]]: 40,\n    [nodeTypeEnum[\"weighted-20\"]]: 20\n}\nObject.freeze(nodeWeight);\n\nconst pathAlgos = [\"Dijkstra's\", \"A-Star\", \"BFS\", \"DFS\"];\nconst terrainAlgos = [\"Algo 1\", \"Algo 2\"];\nconst obstacleTypes = ['Wall (∞)', 'Weighted (100)', 'Weighted (80)', 'Weighted (60)', 'Weighted (40)', 'Weighted (20)'];\nconst obsEnum = {\n    'Wall (∞)': 'wall',\n    'Weighted (100)': 'weighted-100',\n    'Weighted (80)': 'weighted-80',\n    'Weighted (60)': 'weighted-60',\n    'Weighted (40)': 'weighted-40',\n    'Weighted (20)': 'weighted-20'\n}\nexport const getNodeTypeEnum = (key) => {\n    return nodeTypeEnum[key];\n};\n\nexport const getNodeColorClass = (key) => {\n    return nodeColorClass[key];\n};\n\nexport const getNodeWeight = (key) => {\n    return nodeWeight[key];\n};\n\nexport const shuffleArray = (array) => {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n};\n\nexport const getPathAlgos = () => {\n    return pathAlgos;\n};\n\nexport const getTerrainAlgos = () => {\n    return terrainAlgos;\n};\n\nexport const getObstacleTypes = () => {\n    return obstacleTypes;\n}\n\nexport const getObstacleEnum = (key) => {\n    return obsEnum[key];\n};\n","import React from 'react'\nimport { getNodeColorClass, getNodeTypeEnum } from '../utils/util.js'\n\nconst Node = React.memo(({ nodeId, size, nodeState, setGridState, draggingSelection, setDraggingSelection, setStartCord, setTargetCord, runningAlgo, selectedObstacle }) => {\n    const nodeDim = {\n        width: size,\n        height: size\n    };\n\n    const mouseDowned = () => {\n        if (nodeState[0] === getNodeTypeEnum('none') || nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited')) {\n            setDraggingSelection(getNodeTypeEnum(selectedObstacle));\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n            return;\n        }\n        else if (nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            setDraggingSelection(getNodeTypeEnum('remObstacle'));\n            return;\n        }\n\n        setDraggingSelection(nodeState[0]);\n    };\n\n    const mouseEntered = () => {\n        if (draggingSelection === getNodeTypeEnum('remObstacle') && nodeState[0] >= getNodeTypeEnum('wall')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n        }\n        else if (draggingSelection === getNodeTypeEnum(selectedObstacle) && (nodeState[0] === getNodeTypeEnum('path') || nodeState[0] === getNodeTypeEnum('visited') || nodeState[0] === getNodeTypeEnum('none'))) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum(selectedObstacle), getNodeTypeEnum('none')] }));\n        }\n        else if (draggingSelection === getNodeTypeEnum('start')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('start'), ...prevState[nodeId]] }));\n            setStartCord(nodeId);\n        }\n        else if (draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: [getNodeTypeEnum('target'), ...prevState[nodeId]] }));\n            setTargetCord(nodeId);\n        }\n    };\n\n    const mouseLeft = () => {\n        if (draggingSelection === getNodeTypeEnum('start') || draggingSelection === getNodeTypeEnum('target')) {\n            setGridState(prevState => ({ ...prevState, [nodeId]: prevState[nodeId].slice(1) }));\n            return;\n        }\n    };\n\n    const mouseUped = () => {\n        if (draggingSelection !== getNodeTypeEnum('none')) {\n            setDraggingSelection(getNodeTypeEnum('none'));\n        }\n    };\n\n    return (\n        <div style={{ ...nodeDim }} className={`node ${getNodeColorClass(nodeState[0])}`} onMouseDown={runningAlgo ? null : mouseDowned} onMouseUp={runningAlgo ? null : mouseUped} onMouseEnter={runningAlgo ? null : mouseEntered} onMouseLeave={runningAlgo ? null : mouseLeft} >\n        </div>\n    );\n});\n\nexport default Node\n","import Node from './Node.js'\nimport { useState } from 'react'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Grid = ({ rows, cols, padding, nodeSize, gridState, setGridState, selectedObstacle, setStartCord, setTargetCord, runningAlgo }) => {\n    const [draggingSelection, setDraggingSelection] = useState(getNodeTypeEnum('none'));\n\n    // fill nodes in the grid\n    const nodes = [];\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let nodeId = `${x}:${y}`\n\n            nodes.push(<Node nodeId={nodeId}\n                size={nodeSize} nodeState={gridState[nodeId]} setGridState={setGridState}\n                draggingSelection={draggingSelection}\n                setDraggingSelection={setDraggingSelection}\n                setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} selectedObstacle={selectedObstacle} key={nodeId} />);\n        }\n    }\n\n    const gridDimensions = {\n        width: (cols * nodeSize) + cols,\n        height: (rows * nodeSize) + rows\n    };\n\n    const containerStyle = {\n        paddingLeft: padding,\n        paddingRight: padding\n    }\n\n    return (\n        <div style={containerStyle}>\n            <div className='grid' style={gridDimensions}>\n                {nodes}\n            </div >\n        </div>\n    )\n}\n\nexport default Grid\n","const Reset = ({ clearObstacles, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'red'}`} onClick={runningAlgo ? null : clearObstacles}>\n            Clear Obstacles\n        </div >\n    )\n}\n\nexport default Reset\n","import React from 'react'\n\nconst Clear = ({ clearPath, runningAlgo }) => {\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'orange'}`} onClick={runningAlgo ? null : clearPath}>\n            Clear Path\n        </div >\n    )\n}\n\nexport default Clear\n","import { getNodeTypeEnum, getNodeWeight, shuffleArray } from '../../utils/util.js'\n\nexport const dijkstras = (startCord, targetCord, gridState, setGridState, rows, cols) => {\n    if (startCord === targetCord) {\n        return [];\n    }\n\n    let totalCosts = {};\n    let prevNodes = {};\n    let minPQ = {};\n    let visited = {};\n\n    totalCosts[startCord] = 0;\n    minPQ[startCord] = 0;\n\n    for (let x = 0; x < rows; x++) {\n        for (let y = 0; y < cols; y++) {\n            let cord = `${x}:${y}`\n\n            if (cord !== startCord) {\n                totalCosts[cord] = Infinity;\n            }\n        }\n    }\n\n    while (Object.keys(minPQ).length > 0) {\n        const minKey = findMinPriorityNode(minPQ);\n        delete minPQ[minKey];\n        visited[minKey] = 1;\n\n        if (minKey !== startCord && minKey !== targetCord) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [minKey]: [getNodeTypeEnum('visited'), ...prevState[minKey]] }));\n            }, 1);\n        }\n        else if (minKey === targetCord) {\n            return createPath(startCord, targetCord, prevNodes);\n        }\n\n        const neighbours = getNeighbourNodes(minKey, rows, cols, gridState);\n        for (const neighbour of neighbours) {\n            const currPath = totalCosts[minKey] + getNodeWeight(gridState[neighbour][0]);\n\n            if (neighbour in visited) {\n                continue;\n            }\n\n            if (((neighbour in minPQ) && currPath < totalCosts[neighbour]) || !(neighbour in minPQ)) {\n                totalCosts[neighbour] = currPath;\n                prevNodes[neighbour] = minKey;\n                minPQ[neighbour] = currPath;\n            }\n        }\n    }\n\n    return [];\n};\n\nconst createPath = (startCord, targetCord, prevNodes) => {\n    let cord = targetCord;\n    let path = [];\n\n    while (true) {\n        cord = prevNodes[cord];\n\n        if (cord === startCord) {\n            break;\n        }\n\n        path.push(cord);\n    }\n\n    return path;\n};\n\nconst getNeighbourNodes = (node, rows, cols, gridState) => {\n    const row = parseInt(node.split(':')[0]);\n    const col = parseInt(node.split(':')[1]);\n\n    let res = [];\n    if ((col + 1 < cols) && (gridState[`${row}:${col + 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col + 1}`)\n    }\n    if ((row - 1 >= 0) && (gridState[`${row - 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row - 1}:${col}`)\n    }\n    if ((row + 1) < rows && (gridState[`${row + 1}:${col}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row + 1}:${col}`)\n    }\n    if ((col - 1 >= 0) && (gridState[`${row}:${col - 1}`][0] !== getNodeTypeEnum('wall'))) {\n        res.push(`${row}:${col - 1}`)\n    }\n\n    shuffleArray(res);\n    return res;\n};\n\nconst findMinPriorityNode = (minPQ) => {\n    let minPriority = Math.min(...Object.values(minPQ));\n\n    for (const key in minPQ) {\n        if (minPQ[key] === minPriority) {\n            return key;\n        }\n    }\n};","import { dijkstras } from '../algorithms/path_finding/dijkstras.js'\nimport { getNodeTypeEnum } from '../utils/util.js'\n\nconst Visualize = ({ rows, cols, selectedAlgo, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const run = async () => {\n        const updatedGridState = clearForReRun();\n        setRunningAlgo(true);\n        console.log(\"STARTING: \", selectedAlgo);\n\n        let path = [];\n        switch (selectedAlgo) {\n            case \"Dijkstra's\":\n                path = dijkstras(startCord, targetCord, updatedGridState, setGridState, rows, cols);\n                break;\n        }\n\n        console.log(\"ENDED: \", selectedAlgo);\n\n        for (let i = path.length - 1; i >= 0; i--) {\n            setTimeout(() => {\n                setGridState(prevState => ({ ...prevState, [path[i]]: [getNodeTypeEnum('path'), ...updatedGridState[path[i]]] }));\n            }, 1);\n        }\n\n        setTimeout(() => {\n            setRunningAlgo(false);\n        }, 1);\n    };\n\n    return (\n        <div className={`button ${runningAlgo ? 'disabled' : 'green'}`} onClick={runningAlgo ? null : run} >\n            Run\n        </div >\n    )\n}\n\nexport default Visualize\n","export default __webpack_public_path__ + \"static/media/down_arrow.8fed4a28.svg\";","import { useState } from 'react'\nimport downArrow from '../images/down_arrow.svg';\n\nconst CustomDropdown = ({ setSelection, items }) => {\n    const [dropDownOpen, setDropDownOpen] = useState(false);\n    const [selectedVal, setSelectedVal] = useState(items[0]);\n    const [selectedId, setSelectedId] = useState(0);\n    const toggle = () => {\n        setDropDownOpen(prevState => !prevState);\n    }\n\n    const madeSelection = (id) => {\n        setDropDownOpen(prevState => !prevState);\n        setSelectedVal(items[id]);\n        setSelectedId(id);\n        setSelection(items[id]);\n    };\n\n    const dropdownItems = [];\n    for (let i = 0; i < items.length; i++) {\n        dropdownItems.push(<div className={`dropdown-list-item ${i === selectedId && 'selected'} ${i === items.length - 1 && 'last'}`} onClick={() => { madeSelection(i) }} key={i}>\n            {items[i]}\n        </div>)\n    }\n\n    return (\n        <div className='dropdown'>\n            <div className={`dropdown-header ${dropDownOpen && 'open'}`} onClick={toggle}>\n                {selectedVal}\n                <img className=\"down-arrow\" src={downArrow}></img>\n            </div>\n            {dropDownOpen &&\n                <div className='dropdown-list'>\n                    {dropdownItems}\n                </div>\n            }\n        </div >\n    )\n}\n\nexport default CustomDropdown\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos } from '../utils/util.js'\n\nconst ChooseAlgorithm = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const [selectedAlgo, setSelectedAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-algo`}>\n            <CustomDropdown setSelection={setSelectedAlgo} items={getPathAlgos()} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseAlgorithm\n","import Visualize from './Visualize.js'\nimport CustomDropdown from './CustomDropdown.js'\nimport { useState } from 'react'\nimport { getPathAlgos, getTerrainAlgos } from '../utils/util.js'\n\nconst ChooseTerrain = ({ rows, cols, setGridState, startCord, targetCord, clearForReRun, runningAlgo, setRunningAlgo }) => {\n    const [selectedTerrainAlgo, setSelectedTerrainAlgo] = useState(getPathAlgos()[0]);\n\n    return (\n        <div className={`choose-terrain`}>\n            <CustomDropdown setSelection={setSelectedTerrainAlgo} items={getTerrainAlgos()} />\n            <Visualize rows={rows} cols={cols} selectedAlgo={selectedTerrainAlgo} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearForReRun} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n        </div >\n    )\n}\n\nexport default ChooseTerrain\n","import CustomDropdown from './CustomDropdown.js'\nimport { getObstacleTypes, getObstacleEnum } from '../utils/util.js'\n\nconst ChooseObstacle = ({ setSelectedObstacle }) => {\n    const setObstacle = (obstacleName) => {\n        setSelectedObstacle(getObstacleEnum(obstacleName));\n    };\n\n    return (\n        <div className={`choose-obstacle`}>\n            <CustomDropdown setSelection={setObstacle} items={getObstacleTypes()} />\n        </div >\n    )\n}\n\nexport default ChooseObstacle\n","import Reset from './Reset.js'\nimport Clear from './Clear.js'\nimport ChooseAlgorithm from './ChooseAlgorithm.js'\nimport ChooseTerrain from './ChooseTerrain.js'\nimport ChooseObstacle from './ChooseObstacle.js'\n\nconst Header = ({ rows, cols, runningAlgo, setRunningAlgo, padding, height, setGridState, startCord, targetCord, clearObstacles, clearPath, setSelectedObstacle }) => {\n    const style = {\n        padding: padding,\n        paddingBottom: padding / 2,\n        height: height\n    };\n\n    return (\n        <div style={style} className='header'>\n            <Reset clearObstacles={clearObstacles} runningAlgo={runningAlgo} />\n            <Clear clearPath={clearPath} runningAlgo={runningAlgo} />\n            <ChooseAlgorithm rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n            <ChooseTerrain rows={rows} cols={cols} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearForReRun={clearPath} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} />\n            <ChooseObstacle setSelectedObstacle={setSelectedObstacle} />\n        </div>\n    )\n}\n\nexport default Header\n","import Grid from './components/Grid.js'\nimport Header from './components/Header.js'\nimport { getNodeTypeEnum } from './utils/util.js'\nimport { useState, useEffect } from 'react'\n\nfunction App() {\n  const [gridState, setGridState] = useState({});\n  const [selectedObstacle, setSelectedObstacle] = useState('wall');\n  const [rows, setRows] = useState(0);\n  const [cols, setCols] = useState(0);\n  const [startCord, setStartCord] = useState('0:0');\n  const [targetCord, setTargetCord] = useState('0:0');\n  const [runningAlgo, setRunningAlgo] = useState(false);\n  const margin = 30;\n  const nodeSize = 28;\n  const navBarHeight = 90;\n\n  useEffect(() => {\n    resetBoard();\n  }, []);\n\n  // useEffect(() => {\n  //   window.addEventListener(\"resize\", resetBoard);\n  //   return () => window.removeEventListener(\"resize\", resetBoard)\n  // }, []);\n\n  const resetBoard = () => {\n    const adjustedWinHeight = window.innerHeight - (navBarHeight + (margin * 3));\n    const adjustedWinWidth = window.innerWidth - (2 * margin);\n\n    const rows = parseInt(adjustedWinHeight / (nodeSize + 1));\n    const cols = parseInt(adjustedWinWidth / (nodeSize + 1));\n\n    setRunningAlgo(false);\n    setRows(rows);\n    setCols(cols);\n    setStartCord('0:0');\n    setTargetCord(`${rows - 1}:${cols - 1}`);\n\n    let gridMap = {};\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let nodeState = [getNodeTypeEnum('none')];\n        if (x === 0 && y === 0) {\n          nodeState.unshift(getNodeTypeEnum('start'));\n        }\n        else if (x === (rows - 1) && y === (cols - 1)) {\n          nodeState.unshift(getNodeTypeEnum('target'));\n        }\n\n        gridMap[`${x}:${y}`] = nodeState;\n      }\n    }\n\n    setGridState(gridMap);\n  };\n\n  const clearPath = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n\n    return gridMap;\n  };\n\n  const clearObstacles = () => {\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('path') || currState === getNodeTypeEnum('visited')) {\n          currState = gridState[id][1];\n        }\n\n        if (currState >= getNodeTypeEnum('wall')) {\n          gridMap[id] = [getNodeTypeEnum('none')];\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      setGridState(prevState => (gridMap));\n    }\n  };\n\n  const clearForReRun = () => {\n    console.log('CLEARING GRID FOR RE RERUN');\n    let gridMap = {};\n    let change = false;\n\n    for (let x = 0; x < rows; x++) {\n      for (let y = 0; y < cols; y++) {\n        let id = `${x}:${y}`;\n        gridMap[id] = gridState[id];\n        let currState = gridState[id][0];\n\n        if (currState === getNodeTypeEnum('visited') || currState === getNodeTypeEnum('path')) {\n          gridMap[id] = gridMap[id].slice(1);\n          change = true;\n        }\n      }\n    }\n\n    if (change) {\n      console.log(\"DONE CLEARING FOR RE RUN\")\n      setGridState(prevState => (gridMap));\n    }\n\n    setRunningAlgo(true);\n    return gridMap;\n  };\n\n  return (\n    <>\n      <Header rows={rows} cols={cols} runningAlgo={runningAlgo} setRunningAlgo={setRunningAlgo} padding={margin} height={navBarHeight} setGridState={setGridState} startCord={startCord} targetCord={targetCord} clearObstacles={clearObstacles} clearPath={clearPath} setSelectedObstacle={setSelectedObstacle} />\n      <Grid rows={rows} cols={cols} padding={margin} nodeSize={nodeSize} gridState={gridState} setGridState={setGridState} selectedObstacle={selectedObstacle} setStartCord={setStartCord} setTargetCord={setTargetCord} runningAlgo={runningAlgo} />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}